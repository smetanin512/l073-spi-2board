
l073-spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003280  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033ac  080033ac  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033b4  080033b4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b4  080033b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033b8  080033b8  000133b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080033bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000084  08003440  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08003440  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001974  00000000  00000000  0002b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c3c  00000000  00000000  0002dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1ff  00000000  00000000  00041adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b25d  00000000  00000000  0004ccdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7f38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000c7f8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003328 	.word	0x08003328

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08003328 	.word	0x08003328

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <Buffercmp>:
 * @param  BufferLength: buffer's length
 * @retval 0  : pBuffer1 identical to pBuffer2
 *         >0 : pBuffer1 differs from pBuffer2
 */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	1dbb      	adds	r3, r7, #6
 80004a8:	801a      	strh	r2, [r3, #0]
	while (BufferLength--)
 80004aa:	e00e      	b.n	80004ca <Buffercmp+0x2e>
	{
		if((*pBuffer1) != *pBuffer2)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d002      	beq.n	80004be <Buffercmp+0x22>
		{
			return BufferLength;
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	e00d      	b.n	80004da <Buffercmp+0x3e>
		}
		pBuffer1++;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3301      	adds	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
		pBuffer2++;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
	while (BufferLength--)
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	1dba      	adds	r2, r7, #6
 80004d0:	1e59      	subs	r1, r3, #1
 80004d2:	8011      	strh	r1, [r2, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d1e9      	bne.n	80004ac <Buffercmp+0x10>
	}

	return 0;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	0018      	movs	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e8:	f000 fabe 	bl	8000a68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ec:	f000 f846 	bl	800057c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f0:	f000 f91e 	bl	8000730 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004f4:	f000 f8ec 	bl	80006d0 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 80004f8:	f000 f8b2 	bl	8000660 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
#ifdef MASTER_BOARD
	/* Wait for User push-button press before starting the Communication */
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET)
 80004fc:	e008      	b.n	8000510 <main+0x2c>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004fe:	23a0      	movs	r3, #160	; 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2120      	movs	r1, #32
 8000504:	0018      	movs	r0, r3
 8000506:	f000 fe21 	bl	800114c <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 fb1c 	bl	8000b48 <HAL_Delay>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) != GPIO_PIN_RESET)
 8000510:	2380      	movs	r3, #128	; 0x80
 8000512:	019b      	lsls	r3, r3, #6
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <main+0x84>)
 8000516:	0019      	movs	r1, r3
 8000518:	0010      	movs	r0, r2
 800051a:	f000 fddd 	bl	80010d8 <HAL_GPIO_ReadPin>
 800051e:	1e03      	subs	r3, r0, #0
 8000520:	d1ed      	bne.n	80004fe <main+0x1a>
#endif /* MASTER_BOARD */

	/*##-2- Start the Full Duplex Communication process ########################*/
	/* While the SPI in TransmitReceive process, user can transmit data through
     "aTxBuffer" buffer & receive data through "aRxBuffer" */
	if(HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 8000522:	4a12      	ldr	r2, [pc, #72]	; (800056c <main+0x88>)
 8000524:	4912      	ldr	r1, [pc, #72]	; (8000570 <main+0x8c>)
 8000526:	4813      	ldr	r0, [pc, #76]	; (8000574 <main+0x90>)
 8000528:	2375      	movs	r3, #117	; 0x75
 800052a:	f001 fe2b 	bl	8002184 <HAL_SPI_TransmitReceive_IT>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d001      	beq.n	8000536 <main+0x52>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 8000532:	f000 f98f 	bl	8000854 <Error_Handler>
	/*  Before starting a new communication transfer, you must wait the callback call
      to get the transfer complete confirmation or an error detection.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
	while (wTransferState == TRANSFER_WAIT)
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x94>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d0fb      	beq.n	8000538 <main+0x54>
	{
	}

	switch(wTransferState)
 8000540:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0x94>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10a      	bne.n	800055e <main+0x7a>
	{
	case TRANSFER_COMPLETE :
		/*##-4- Compare the sent and received buffers ##############################*/
		if(Buffercmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 8000548:	4908      	ldr	r1, [pc, #32]	; (800056c <main+0x88>)
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <main+0x8c>)
 800054c:	2275      	movs	r2, #117	; 0x75
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff ffa4 	bl	800049c <Buffercmp>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d005      	beq.n	8000564 <main+0x80>
		{
			/* Processing Error */
			Error_Handler();
 8000558:	f000 f97c 	bl	8000854 <Error_Handler>
		}
		break;
 800055c:	e002      	b.n	8000564 <main+0x80>
	default :
		Error_Handler();
 800055e:	f000 f979 	bl	8000854 <Error_Handler>
		break;
 8000562:	e000      	b.n	8000566 <main+0x82>
		break;
 8000564:	46c0      	nop			; (mov r8, r8)

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000566:	e7fe      	b.n	8000566 <main+0x82>
 8000568:	50000800 	.word	0x50000800
 800056c:	200000fc 	.word	0x200000fc
 8000570:	20000000 	.word	0x20000000
 8000574:	200000a4 	.word	0x200000a4
 8000578:	200000a0 	.word	0x200000a0

0800057c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b09f      	sub	sp, #124	; 0x7c
 8000580:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	2440      	movs	r4, #64	; 0x40
 8000584:	193b      	adds	r3, r7, r4
 8000586:	0018      	movs	r0, r3
 8000588:	2338      	movs	r3, #56	; 0x38
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f002 fec3 	bl	8003318 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000592:	232c      	movs	r3, #44	; 0x2c
 8000594:	18fb      	adds	r3, r7, r3
 8000596:	0018      	movs	r0, r3
 8000598:	2314      	movs	r3, #20
 800059a:	001a      	movs	r2, r3
 800059c:	2100      	movs	r1, #0
 800059e:	f002 febb 	bl	8003318 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	0018      	movs	r0, r3
 80005a6:	2328      	movs	r3, #40	; 0x28
 80005a8:	001a      	movs	r2, r3
 80005aa:	2100      	movs	r1, #0
 80005ac:	f002 feb4 	bl	8003318 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xdc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a29      	ldr	r2, [pc, #164]	; (800065c <SystemClock_Config+0xe0>)
 80005b6:	401a      	ands	r2, r3
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <SystemClock_Config+0xdc>)
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	0109      	lsls	r1, r1, #4
 80005be:	430a      	orrs	r2, r1
 80005c0:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c2:	0021      	movs	r1, r4
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2202      	movs	r2, #2
 80005c8:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	2201      	movs	r2, #1
 80005ce:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	2210      	movs	r2, #16
 80005d4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2202      	movs	r2, #2
 80005da:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	0312      	lsls	r2, r2, #12
 80005e8:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	0412      	lsls	r2, r2, #16
 80005f0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	0018      	movs	r0, r3
 80005f6:	f000 fdc5 	bl	8001184 <HAL_RCC_OscConfig>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x86>
	{
		Error_Handler();
 80005fe:	f000 f929 	bl	8000854 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	212c      	movs	r1, #44	; 0x2c
 8000604:	187b      	adds	r3, r7, r1
 8000606:	220f      	movs	r2, #15
 8000608:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2203      	movs	r2, #3
 800060e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2101      	movs	r1, #1
 8000626:	0018      	movs	r0, r3
 8000628:	f001 f980 	bl	800192c <HAL_RCC_ClockConfig>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8000630:	f000 f910 	bl	8000854 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2202      	movs	r2, #2
 8000638:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fb96 	bl	8001d74 <HAL_RCCEx_PeriphCLKConfig>
 8000648:	1e03      	subs	r3, r0, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 800064c:	f000 f902 	bl	8000854 <Error_Handler>
	}
}
 8000650:	46c0      	nop			; (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	b01f      	add	sp, #124	; 0x7c
 8000656:	bd90      	pop	{r4, r7, pc}
 8000658:	40007000 	.word	0x40007000
 800065c:	ffffe7ff 	.word	0xffffe7ff

08000660 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000664:	4b18      	ldr	r3, [pc, #96]	; (80006c8 <MX_SPI2_Init+0x68>)
 8000666:	4a19      	ldr	r2, [pc, #100]	; (80006cc <MX_SPI2_Init+0x6c>)
 8000668:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800066a:	4b17      	ldr	r3, [pc, #92]	; (80006c8 <MX_SPI2_Init+0x68>)
 800066c:	2282      	movs	r2, #130	; 0x82
 800066e:	0052      	lsls	r2, r2, #1
 8000670:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <MX_SPI2_Init+0x68>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000678:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <MX_SPI2_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <MX_SPI2_Init+0x68>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000684:	4b10      	ldr	r3, [pc, #64]	; (80006c8 <MX_SPI2_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <MX_SPI2_Init+0x68>)
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	0092      	lsls	r2, r2, #2
 8000690:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <MX_SPI2_Init+0x68>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000698:	4b0b      	ldr	r3, [pc, #44]	; (80006c8 <MX_SPI2_Init+0x68>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <MX_SPI2_Init+0x68>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <MX_SPI2_Init+0x68>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <MX_SPI2_Init+0x68>)
 80006ac:	2207      	movs	r2, #7
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MX_SPI2_Init+0x68>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fcd2 	bl	800205c <HAL_SPI_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 80006bc:	f000 f8ca 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 80006c0:	46c0      	nop			; (mov r8, r8)
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	200000a4 	.word	0x200000a4
 80006cc:	40003800 	.word	0x40003800

080006d0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006d6:	4a15      	ldr	r2, [pc, #84]	; (800072c <MX_USART2_UART_Init+0x5c>)
 80006d8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006dc:	22e1      	movs	r2, #225	; 0xe1
 80006de:	0252      	lsls	r2, r2, #9
 80006e0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x58>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x58>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x58>)
 8000714:	0018      	movs	r0, r3
 8000716:	f002 f909 	bl	800292c <HAL_UART_Init>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 800071e:	f000 f899 	bl	8000854 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000174 	.word	0x20000174
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08b      	sub	sp, #44	; 0x2c
 8000734:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	2414      	movs	r4, #20
 8000738:	193b      	adds	r3, r7, r4
 800073a:	0018      	movs	r0, r3
 800073c:	2314      	movs	r3, #20
 800073e:	001a      	movs	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	f002 fde9 	bl	8003318 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_GPIO_Init+0xd8>)
 800074c:	2104      	movs	r1, #4
 800074e:	430a      	orrs	r2, r1
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	2204      	movs	r2, #4
 8000758:	4013      	ands	r3, r2
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	430a      	orrs	r2, r1
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
 800076a:	4b27      	ldr	r3, [pc, #156]	; (8000808 <MX_GPIO_Init+0xd8>)
 800076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076e:	2280      	movs	r2, #128	; 0x80
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_GPIO_Init+0xd8>)
 800077c:	2101      	movs	r1, #1
 800077e:	430a      	orrs	r2, r1
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000786:	2201      	movs	r2, #1
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0xd8>)
 8000794:	2102      	movs	r1, #2
 8000796:	430a      	orrs	r2, r1
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_GPIO_Init+0xd8>)
 800079c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079e:	2202      	movs	r2, #2
 80007a0:	4013      	ands	r3, r2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007a6:	23a0      	movs	r3, #160	; 0xa0
 80007a8:	05db      	lsls	r3, r3, #23
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fcaf 	bl	8001112 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	0192      	lsls	r2, r2, #6
 80007ba:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2284      	movs	r2, #132	; 0x84
 80007c0:	0392      	lsls	r2, r2, #14
 80007c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	4a0f      	ldr	r2, [pc, #60]	; (800080c <MX_GPIO_Init+0xdc>)
 80007ce:	0019      	movs	r1, r3
 80007d0:	0010      	movs	r0, r2
 80007d2:	f000 fb03 	bl	8000ddc <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d6:	0021      	movs	r1, r4
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2220      	movs	r2, #32
 80007dc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2201      	movs	r2, #1
 80007e2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f0:	187a      	adds	r2, r7, r1
 80007f2:	23a0      	movs	r3, #160	; 0xa0
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	0011      	movs	r1, r2
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 faef 	bl	8000ddc <HAL_GPIO_Init>

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b00b      	add	sp, #44	; 0x2c
 8000804:	bd90      	pop	{r4, r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	40021000 	.word	0x40021000
 800080c:	50000800 	.word	0x50000800

08000810 <HAL_SPI_TxRxCpltCallback>:
 * @note   This example shows a simple way to report end of Interrupt TxRx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	/* Turn LED on: Transfer in transmission/reception process is correct */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	05db      	lsls	r3, r3, #23
 800081c:	2201      	movs	r2, #1
 800081e:	2120      	movs	r1, #32
 8000820:	0018      	movs	r0, r3
 8000822:	f000 fc76 	bl	8001112 <HAL_GPIO_WritePin>
	wTransferState = TRANSFER_COMPLETE;
 8000826:	4b03      	ldr	r3, [pc, #12]	; (8000834 <HAL_SPI_TxRxCpltCallback+0x24>)
 8000828:	2201      	movs	r2, #1
 800082a:	601a      	str	r2, [r3, #0]
}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000a0 	.word	0x200000a0

08000838 <HAL_SPI_ErrorCallback>:
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8000840:	4b03      	ldr	r3, [pc, #12]	; (8000850 <HAL_SPI_ErrorCallback+0x18>)
 8000842:	2202      	movs	r2, #2
 8000844:	601a      	str	r2, [r3, #0]
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	200000a0 	.word	0x200000a0

08000854 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000858:	b672      	cpsid	i
}
 800085a:	46c0      	nop			; (mov r8, r8)
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
	{
		/* Toggle LED2 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800085c:	23a0      	movs	r3, #160	; 0xa0
 800085e:	05db      	lsls	r3, r3, #23
 8000860:	2120      	movs	r1, #32
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fc72 	bl	800114c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000868:	23fa      	movs	r3, #250	; 0xfa
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 f96b 	bl	8000b48 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000872:	e7f3      	b.n	800085c <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000878:	4b07      	ldr	r3, [pc, #28]	; (8000898 <HAL_MspInit+0x24>)
 800087a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_MspInit+0x24>)
 800087e:	2101      	movs	r1, #1
 8000880:	430a      	orrs	r2, r1
 8000882:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <HAL_MspInit+0x24>)
 8000886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000888:	4b03      	ldr	r3, [pc, #12]	; (8000898 <HAL_MspInit+0x24>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	0549      	lsls	r1, r1, #21
 800088e:	430a      	orrs	r2, r1
 8000890:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	; 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	240c      	movs	r4, #12
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f002 fd32 	bl	8003318 <memset>
  if(hspi->Instance==SPI2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1c      	ldr	r2, [pc, #112]	; (800092c <HAL_SPI_MspInit+0x90>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d131      	bne.n	8000922 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_SPI_MspInit+0x94>)
 80008c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_SPI_MspInit+0x94>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	01c9      	lsls	r1, r1, #7
 80008c8:	430a      	orrs	r2, r1
 80008ca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_SPI_MspInit+0x94>)
 80008ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <HAL_SPI_MspInit+0x94>)
 80008d2:	2102      	movs	r1, #2
 80008d4:	430a      	orrs	r2, r1
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_SPI_MspInit+0x94>)
 80008da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008dc:	2202      	movs	r2, #2
 80008de:	4013      	ands	r3, r2
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	22e0      	movs	r2, #224	; 0xe0
 80008e8:	0212      	lsls	r2, r2, #8
 80008ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	0021      	movs	r1, r4
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2202      	movs	r2, #2
 80008f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2203      	movs	r2, #3
 80008fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	187b      	adds	r3, r7, r1
 8000908:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_SPI_MspInit+0x98>)
 800090a:	0019      	movs	r1, r3
 800090c:	0010      	movs	r0, r2
 800090e:	f000 fa65 	bl	8000ddc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	201a      	movs	r0, #26
 8000918:	f000 f9e6 	bl	8000ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800091c:	201a      	movs	r0, #26
 800091e:	f000 f9f8 	bl	8000d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b009      	add	sp, #36	; 0x24
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40003800 	.word	0x40003800
 8000930:	40021000 	.word	0x40021000
 8000934:	50000400 	.word	0x50000400

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b089      	sub	sp, #36	; 0x24
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	240c      	movs	r4, #12
 8000942:	193b      	adds	r3, r7, r4
 8000944:	0018      	movs	r0, r3
 8000946:	2314      	movs	r3, #20
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f002 fce4 	bl	8003318 <memset>
  if(huart->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <HAL_UART_MspInit+0x80>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d129      	bne.n	80009ae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	4b18      	ldr	r3, [pc, #96]	; (80009bc <HAL_UART_MspInit+0x84>)
 800095c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x84>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0289      	lsls	r1, r1, #10
 8000964:	430a      	orrs	r2, r1
 8000966:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_UART_MspInit+0x84>)
 800096a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <HAL_UART_MspInit+0x84>)
 800096e:	2101      	movs	r1, #1
 8000970:	430a      	orrs	r2, r1
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_UART_MspInit+0x84>)
 8000976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000978:	2201      	movs	r2, #1
 800097a:	4013      	ands	r3, r2
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000980:	0021      	movs	r1, r4
 8000982:	187b      	adds	r3, r7, r1
 8000984:	220c      	movs	r2, #12
 8000986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2202      	movs	r2, #2
 800098c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2203      	movs	r2, #3
 8000998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2204      	movs	r2, #4
 800099e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	187a      	adds	r2, r7, r1
 80009a2:	23a0      	movs	r3, #160	; 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fa17 	bl	8000ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b009      	add	sp, #36	; 0x24
 80009b4:	bd90      	pop	{r4, r7, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e4:	f000 f894 	bl	8000b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
	...

080009f0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <SPI2_IRQHandler+0x14>)
 80009f6:	0018      	movs	r0, r3
 80009f8:	f001 fc6c 	bl	80022d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	200000a4 	.word	0x200000a4

08000a08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000a16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a1a:	490e      	ldr	r1, [pc, #56]	; (8000a54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a1c:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <LoopForever+0xe>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a20:	e002      	b.n	8000a28 <LoopCopyDataInit>

08000a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a26:	3304      	adds	r3, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a2c:	d3f9      	bcc.n	8000a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2e:	4a0b      	ldr	r2, [pc, #44]	; (8000a5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a30:	4c0b      	ldr	r4, [pc, #44]	; (8000a60 <LoopForever+0x16>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a34:	e001      	b.n	8000a3a <LoopFillZerobss>

08000a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a38:	3204      	adds	r2, #4

08000a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a3c:	d3fb      	bcc.n	8000a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a3e:	f7ff ffe3 	bl	8000a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a42:	f002 fc45 	bl	80032d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a46:	f7ff fd4d 	bl	80004e4 <main>

08000a4a <LoopForever>:

LoopForever:
    b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
   ldr   r0, =_estack
 8000a4c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a54:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000a58:	080033bc 	.word	0x080033bc
  ldr r2, =_sbss
 8000a5c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000a60:	200001fc 	.word	0x200001fc

08000a64 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_COMP_IRQHandler>
	...

08000a68 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_Init+0x3c>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <HAL_Init+0x3c>)
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a80:	2000      	movs	r0, #0
 8000a82:	f000 f811 	bl	8000aa8 <HAL_InitTick>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d003      	beq.n	8000a92 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	e001      	b.n	8000a96 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a92:	f7ff feef 	bl	8000874 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	40022000 	.word	0x40022000

08000aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_InitTick+0x5c>)
 8000ab2:	681c      	ldr	r4, [r3, #0]
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_InitTick+0x60>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	0019      	movs	r1, r3
 8000aba:	23fa      	movs	r3, #250	; 0xfa
 8000abc:	0098      	lsls	r0, r3, #2
 8000abe:	f7ff fb23 	bl	8000108 <__udivsi3>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0020      	movs	r0, r4
 8000ac8:	f7ff fb1e 	bl	8000108 <__udivsi3>
 8000acc:	0003      	movs	r3, r0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f92f 	bl	8000d32 <HAL_SYSTICK_Config>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e00f      	b.n	8000afc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d80b      	bhi.n	8000afa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	2200      	movs	r2, #0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f8fc 	bl	8000ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_InitTick+0x64>)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e000      	b.n	8000afc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	0018      	movs	r0, r3
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b003      	add	sp, #12
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	20000078 	.word	0x20000078
 8000b08:	20000080 	.word	0x20000080
 8000b0c:	2000007c 	.word	0x2000007c

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x1c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	001a      	movs	r2, r3
 8000b1a:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <HAL_IncTick+0x20>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	18d2      	adds	r2, r2, r3
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_IncTick+0x20>)
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	20000080 	.word	0x20000080
 8000b30:	200001f8 	.word	0x200001f8

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <HAL_GetTick+0x10>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	200001f8 	.word	0x200001f8

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff fff0 	bl	8000b34 <HAL_GetTick>
 8000b54:	0003      	movs	r3, r0
 8000b56:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	001a      	movs	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	189b      	adds	r3, r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	f7ff ffe0 	bl	8000b34 <HAL_GetTick>
 8000b74:	0002      	movs	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b004      	add	sp, #16
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	20000080 	.word	0x20000080

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	0002      	movs	r2, r0
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba2:	d809      	bhi.n	8000bb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	001a      	movs	r2, r3
 8000baa:	231f      	movs	r3, #31
 8000bac:	401a      	ands	r2, r3
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <__NVIC_EnableIRQ+0x30>)
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	000a      	movs	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
  }
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	e000e100 	.word	0xe000e100

08000bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	0002      	movs	r2, r0
 8000bcc:	6039      	str	r1, [r7, #0]
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bd8:	d828      	bhi.n	8000c2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <__NVIC_SetPriority+0xd4>)
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	089b      	lsrs	r3, r3, #2
 8000be4:	33c0      	adds	r3, #192	; 0xc0
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	589b      	ldr	r3, [r3, r2]
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	0011      	movs	r1, r2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	21ff      	movs	r1, #255	; 0xff
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	401a      	ands	r2, r3
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	4003      	ands	r3, r0
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	481f      	ldr	r0, [pc, #124]	; (8000c98 <__NVIC_SetPriority+0xd4>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b25b      	sxtb	r3, r3
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	430a      	orrs	r2, r1
 8000c24:	33c0      	adds	r3, #192	; 0xc0
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c2a:	e031      	b.n	8000c90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <__NVIC_SetPriority+0xd8>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0019      	movs	r1, r3
 8000c34:	230f      	movs	r3, #15
 8000c36:	400b      	ands	r3, r1
 8000c38:	3b08      	subs	r3, #8
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	3306      	adds	r3, #6
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	18d3      	adds	r3, r2, r3
 8000c42:	3304      	adds	r3, #4
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	1dfa      	adds	r2, r7, #7
 8000c48:	7812      	ldrb	r2, [r2, #0]
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	400a      	ands	r2, r1
 8000c50:	00d2      	lsls	r2, r2, #3
 8000c52:	21ff      	movs	r1, #255	; 0xff
 8000c54:	4091      	lsls	r1, r2
 8000c56:	000a      	movs	r2, r1
 8000c58:	43d2      	mvns	r2, r2
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	019b      	lsls	r3, r3, #6
 8000c62:	22ff      	movs	r2, #255	; 0xff
 8000c64:	401a      	ands	r2, r3
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	4003      	ands	r3, r0
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c74:	4809      	ldr	r0, [pc, #36]	; (8000c9c <__NVIC_SetPriority+0xd8>)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	001c      	movs	r4, r3
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	4023      	ands	r3, r4
 8000c80:	3b08      	subs	r3, #8
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	430a      	orrs	r2, r1
 8000c86:	3306      	adds	r3, #6
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	18c3      	adds	r3, r0, r3
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	601a      	str	r2, [r3, #0]
}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b003      	add	sp, #12
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	2380      	movs	r3, #128	; 0x80
 8000cae:	045b      	lsls	r3, r3, #17
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d301      	bcc.n	8000cb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e010      	b.n	8000cda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <SysTick_Config+0x44>)
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	3a01      	subs	r2, #1
 8000cbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	425b      	negs	r3, r3
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff ff7c 	bl	8000bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x44>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x44>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b002      	add	sp, #8
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	1c02      	adds	r2, r0, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	0011      	movs	r1, r2
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff ff5d 	bl	8000bc4 <__NVIC_SetPriority>
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	0002      	movs	r2, r0
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff ff33 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2a:	46c0      	nop			; (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	b002      	add	sp, #8
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ffaf 	bl	8000ca0 <SysTick_Config>
 8000d42:	0003      	movs	r3, r0
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d54:	210f      	movs	r1, #15
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2225      	movs	r2, #37	; 0x25
 8000d60:	5c9b      	ldrb	r3, [r3, r2]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b02      	cmp	r3, #2
 8000d66:	d006      	beq.n	8000d76 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2201      	movs	r2, #1
 8000d72:	701a      	strb	r2, [r3, #0]
 8000d74:	e02a      	b.n	8000dcc <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	210e      	movs	r1, #14
 8000d82:	438a      	bics	r2, r1
 8000d84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	438a      	bics	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	221c      	movs	r2, #28
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	2101      	movs	r1, #1
 8000da4:	4091      	lsls	r1, r2
 8000da6:	000a      	movs	r2, r1
 8000da8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2225      	movs	r2, #37	; 0x25
 8000dae:	2101      	movs	r1, #1
 8000db0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2224      	movs	r2, #36	; 0x24
 8000db6:	2100      	movs	r1, #0
 8000db8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	0010      	movs	r0, r2
 8000dca:	4798      	blx	r3
    }
  }
  return status;
 8000dcc:	230f      	movs	r3, #15
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	781b      	ldrb	r3, [r3, #0]
}
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b004      	add	sp, #16
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000df2:	e155      	b.n	80010a0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	4013      	ands	r3, r2
 8000e02:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d100      	bne.n	8000e0c <HAL_GPIO_Init+0x30>
 8000e0a:	e146      	b.n	800109a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2203      	movs	r2, #3
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d005      	beq.n	8000e24 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d130      	bne.n	8000e86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	409a      	lsls	r2, r3
 8000e32:	0013      	movs	r3, r2
 8000e34:	43da      	mvns	r2, r3
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	68da      	ldr	r2, [r3, #12]
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	409a      	lsls	r2, r3
 8000e46:	0013      	movs	r3, r2
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	43da      	mvns	r2, r3
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	091b      	lsrs	r3, r3, #4
 8000e70:	2201      	movs	r2, #1
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d017      	beq.n	8000ec2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	0013      	movs	r3, r2
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d123      	bne.n	8000f16 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	0092      	lsls	r2, r2, #2
 8000ed8:	58d3      	ldr	r3, [r2, r3]
 8000eda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	2207      	movs	r2, #7
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	43da      	mvns	r2, r3
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	691a      	ldr	r2, [r3, #16]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	2107      	movs	r1, #7
 8000efa:	400b      	ands	r3, r1
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	409a      	lsls	r2, r3
 8000f00:	0013      	movs	r3, r2
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	08da      	lsrs	r2, r3, #3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3208      	adds	r2, #8
 8000f10:	0092      	lsls	r2, r2, #2
 8000f12:	6939      	ldr	r1, [r7, #16]
 8000f14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	2203      	movs	r2, #3
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	43da      	mvns	r2, r3
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2203      	movs	r2, #3
 8000f34:	401a      	ands	r2, r3
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	0013      	movs	r3, r2
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	23c0      	movs	r3, #192	; 0xc0
 8000f50:	029b      	lsls	r3, r3, #10
 8000f52:	4013      	ands	r3, r2
 8000f54:	d100      	bne.n	8000f58 <HAL_GPIO_Init+0x17c>
 8000f56:	e0a0      	b.n	800109a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <HAL_GPIO_Init+0x2dc>)
 8000f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f5c:	4b56      	ldr	r3, [pc, #344]	; (80010b8 <HAL_GPIO_Init+0x2dc>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	430a      	orrs	r2, r1
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f64:	4a55      	ldr	r2, [pc, #340]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	589b      	ldr	r3, [r3, r2]
 8000f70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	2203      	movs	r2, #3
 8000f76:	4013      	ands	r3, r2
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	23a0      	movs	r3, #160	; 0xa0
 8000f8c:	05db      	lsls	r3, r3, #23
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d01f      	beq.n	8000fd2 <HAL_GPIO_Init+0x1f6>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4a      	ldr	r2, [pc, #296]	; (80010c0 <HAL_GPIO_Init+0x2e4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d019      	beq.n	8000fce <HAL_GPIO_Init+0x1f2>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a49      	ldr	r2, [pc, #292]	; (80010c4 <HAL_GPIO_Init+0x2e8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0x1ee>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a48      	ldr	r2, [pc, #288]	; (80010c8 <HAL_GPIO_Init+0x2ec>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d00d      	beq.n	8000fc6 <HAL_GPIO_Init+0x1ea>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a47      	ldr	r2, [pc, #284]	; (80010cc <HAL_GPIO_Init+0x2f0>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d007      	beq.n	8000fc2 <HAL_GPIO_Init+0x1e6>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a46      	ldr	r2, [pc, #280]	; (80010d0 <HAL_GPIO_Init+0x2f4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d101      	bne.n	8000fbe <HAL_GPIO_Init+0x1e2>
 8000fba:	2305      	movs	r3, #5
 8000fbc:	e00a      	b.n	8000fd4 <HAL_GPIO_Init+0x1f8>
 8000fbe:	2306      	movs	r3, #6
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x1f8>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x1f8>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x1f8>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x1f8>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x1f8>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	2103      	movs	r1, #3
 8000fd8:	400a      	ands	r2, r1
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4935      	ldr	r1, [pc, #212]	; (80010bc <HAL_GPIO_Init+0x2e0>)
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b38      	ldr	r3, [pc, #224]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43da      	mvns	r2, r3
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	2380      	movs	r3, #128	; 0x80
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	4013      	ands	r3, r2
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001016:	4b2f      	ldr	r3, [pc, #188]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800101c:	4b2d      	ldr	r3, [pc, #180]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	43da      	mvns	r2, r3
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b23      	ldr	r3, [pc, #140]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	43da      	mvns	r2, r3
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4013      	ands	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685a      	ldr	r2, [r3, #4]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	035b      	lsls	r3, r3, #13
 800105e:	4013      	ands	r3, r2
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43da      	mvns	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685a      	ldr	r2, [r3, #4]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	039b      	lsls	r3, r3, #14
 8001088:	4013      	ands	r3, r2
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_GPIO_Init+0x2f8>)
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	3301      	adds	r3, #1
 800109e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	40da      	lsrs	r2, r3
 80010a8:	1e13      	subs	r3, r2, #0
 80010aa:	d000      	beq.n	80010ae <HAL_GPIO_Init+0x2d2>
 80010ac:	e6a2      	b.n	8000df4 <HAL_GPIO_Init+0x18>
  }
}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b006      	add	sp, #24
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	50000400 	.word	0x50000400
 80010c4:	50000800 	.word	0x50000800
 80010c8:	50000c00 	.word	0x50000c00
 80010cc:	50001000 	.word	0x50001000
 80010d0:	50001c00 	.word	0x50001c00
 80010d4:	40010400 	.word	0x40010400

080010d8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	000a      	movs	r2, r1
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	1cba      	adds	r2, r7, #2
 80010ec:	8812      	ldrh	r2, [r2, #0]
 80010ee:	4013      	ands	r3, r2
 80010f0:	d004      	beq.n	80010fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010f2:	230f      	movs	r3, #15
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e003      	b.n	8001104 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001104:	230f      	movs	r3, #15
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	0008      	movs	r0, r1
 800111c:	0011      	movs	r1, r2
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	1c02      	adds	r2, r0, #0
 8001122:	801a      	strh	r2, [r3, #0]
 8001124:	1c7b      	adds	r3, r7, #1
 8001126:	1c0a      	adds	r2, r1, #0
 8001128:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112a:	1c7b      	adds	r3, r7, #1
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d004      	beq.n	800113c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	1cbb      	adds	r3, r7, #2
 8001134:	881a      	ldrh	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800113a:	e003      	b.n	8001144 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800113c:	1cbb      	adds	r3, r7, #2
 800113e:	881a      	ldrh	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001144:	46c0      	nop			; (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	000a      	movs	r2, r1
 8001156:	1cbb      	adds	r3, r7, #2
 8001158:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001160:	1cbb      	adds	r3, r7, #2
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4013      	ands	r3, r2
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	43db      	mvns	r3, r3
 800116e:	1cb9      	adds	r1, r7, #2
 8001170:	8809      	ldrh	r1, [r1, #0]
 8001172:	400b      	ands	r3, r1
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	619a      	str	r2, [r3, #24]
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b004      	add	sp, #16
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b08a      	sub	sp, #40	; 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d102      	bne.n	8001198 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	f000 fbbf 	bl	8001916 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001198:	4bc9      	ldr	r3, [pc, #804]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	220c      	movs	r2, #12
 800119e:	4013      	ands	r3, r2
 80011a0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011a2:	4bc7      	ldr	r3, [pc, #796]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	2380      	movs	r3, #128	; 0x80
 80011a8:	025b      	lsls	r3, r3, #9
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2201      	movs	r2, #1
 80011b4:	4013      	ands	r3, r2
 80011b6:	d100      	bne.n	80011ba <HAL_RCC_OscConfig+0x36>
 80011b8:	e07e      	b.n	80012b8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	2b08      	cmp	r3, #8
 80011be:	d007      	beq.n	80011d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0c      	cmp	r3, #12
 80011c4:	d112      	bne.n	80011ec <HAL_RCC_OscConfig+0x68>
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	2380      	movs	r3, #128	; 0x80
 80011ca:	025b      	lsls	r3, r3, #9
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d10d      	bne.n	80011ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4bbb      	ldr	r3, [pc, #748]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	4013      	ands	r3, r2
 80011da:	d100      	bne.n	80011de <HAL_RCC_OscConfig+0x5a>
 80011dc:	e06b      	b.n	80012b6 <HAL_RCC_OscConfig+0x132>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d167      	bne.n	80012b6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f000 fb95 	bl	8001916 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	025b      	lsls	r3, r3, #9
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d107      	bne.n	8001208 <HAL_RCC_OscConfig+0x84>
 80011f8:	4bb1      	ldr	r3, [pc, #708]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	4bb0      	ldr	r3, [pc, #704]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	0249      	lsls	r1, r1, #9
 8001202:	430a      	orrs	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e027      	b.n	8001258 <HAL_RCC_OscConfig+0xd4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685a      	ldr	r2, [r3, #4]
 800120c:	23a0      	movs	r3, #160	; 0xa0
 800120e:	02db      	lsls	r3, r3, #11
 8001210:	429a      	cmp	r2, r3
 8001212:	d10e      	bne.n	8001232 <HAL_RCC_OscConfig+0xae>
 8001214:	4baa      	ldr	r3, [pc, #680]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4ba9      	ldr	r3, [pc, #676]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	02c9      	lsls	r1, r1, #11
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	4ba7      	ldr	r3, [pc, #668]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4ba6      	ldr	r3, [pc, #664]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0249      	lsls	r1, r1, #9
 800122c:	430a      	orrs	r2, r1
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e012      	b.n	8001258 <HAL_RCC_OscConfig+0xd4>
 8001232:	4ba3      	ldr	r3, [pc, #652]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4ba2      	ldr	r3, [pc, #648]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001238:	49a2      	ldr	r1, [pc, #648]	; (80014c4 <HAL_RCC_OscConfig+0x340>)
 800123a:	400a      	ands	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	4ba0      	ldr	r3, [pc, #640]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	025b      	lsls	r3, r3, #9
 8001246:	4013      	ands	r3, r2
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4b9c      	ldr	r3, [pc, #624]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b9b      	ldr	r3, [pc, #620]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001252:	499d      	ldr	r1, [pc, #628]	; (80014c8 <HAL_RCC_OscConfig+0x344>)
 8001254:	400a      	ands	r2, r1
 8001256:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d015      	beq.n	800128c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001260:	f7ff fc68 	bl	8000b34 <HAL_GetTick>
 8001264:	0003      	movs	r3, r0
 8001266:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001268:	e009      	b.n	800127e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800126a:	f7ff fc63 	bl	8000b34 <HAL_GetTick>
 800126e:	0002      	movs	r2, r0
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	2b64      	cmp	r3, #100	; 0x64
 8001276:	d902      	bls.n	800127e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001278:	2303      	movs	r3, #3
 800127a:	f000 fb4c 	bl	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800127e:	4b90      	ldr	r3, [pc, #576]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	029b      	lsls	r3, r3, #10
 8001286:	4013      	ands	r3, r2
 8001288:	d0ef      	beq.n	800126a <HAL_RCC_OscConfig+0xe6>
 800128a:	e015      	b.n	80012b8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fc52 	bl	8000b34 <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001296:	f7ff fc4d 	bl	8000b34 <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b64      	cmp	r3, #100	; 0x64
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e336      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012a8:	4b85      	ldr	r3, [pc, #532]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	029b      	lsls	r3, r3, #10
 80012b0:	4013      	ands	r3, r2
 80012b2:	d1f0      	bne.n	8001296 <HAL_RCC_OscConfig+0x112>
 80012b4:	e000      	b.n	80012b8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2202      	movs	r2, #2
 80012be:	4013      	ands	r3, r2
 80012c0:	d100      	bne.n	80012c4 <HAL_RCC_OscConfig+0x140>
 80012c2:	e099      	b.n	80013f8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80012ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012cc:	2220      	movs	r2, #32
 80012ce:	4013      	ands	r3, r2
 80012d0:	d009      	beq.n	80012e6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80012d2:	4b7b      	ldr	r3, [pc, #492]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80012d8:	2120      	movs	r1, #32
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	2220      	movs	r2, #32
 80012e2:	4393      	bics	r3, r2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0c      	cmp	r3, #12
 80012f0:	d13e      	bne.n	8001370 <HAL_RCC_OscConfig+0x1ec>
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d13b      	bne.n	8001370 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012f8:	4b71      	ldr	r3, [pc, #452]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2204      	movs	r2, #4
 80012fe:	4013      	ands	r3, r2
 8001300:	d004      	beq.n	800130c <HAL_RCC_OscConfig+0x188>
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e304      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130c:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x348>)
 8001312:	4013      	ands	r3, r2
 8001314:	0019      	movs	r1, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	021a      	lsls	r2, r3, #8
 800131c:	4b68      	ldr	r3, [pc, #416]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800131e:	430a      	orrs	r2, r1
 8001320:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001322:	4b67      	ldr	r3, [pc, #412]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2209      	movs	r2, #9
 8001328:	4393      	bics	r3, r2
 800132a:	0019      	movs	r1, r3
 800132c:	4b64      	ldr	r3, [pc, #400]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	430a      	orrs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001334:	f000 fc42 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001338:	0001      	movs	r1, r0
 800133a:	4b61      	ldr	r3, [pc, #388]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	091b      	lsrs	r3, r3, #4
 8001340:	220f      	movs	r2, #15
 8001342:	4013      	ands	r3, r2
 8001344:	4a62      	ldr	r2, [pc, #392]	; (80014d0 <HAL_RCC_OscConfig+0x34c>)
 8001346:	5cd3      	ldrb	r3, [r2, r3]
 8001348:	000a      	movs	r2, r1
 800134a:	40da      	lsrs	r2, r3
 800134c:	4b61      	ldr	r3, [pc, #388]	; (80014d4 <HAL_RCC_OscConfig+0x350>)
 800134e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <HAL_RCC_OscConfig+0x354>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2513      	movs	r5, #19
 8001356:	197c      	adds	r4, r7, r5
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff fba5 	bl	8000aa8 <HAL_InitTick>
 800135e:	0003      	movs	r3, r0
 8001360:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001362:	197b      	adds	r3, r7, r5
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d046      	beq.n	80013f8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800136a:	197b      	adds	r3, r7, r5
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	e2d2      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	2b00      	cmp	r3, #0
 8001374:	d027      	beq.n	80013c6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001376:	4b52      	ldr	r3, [pc, #328]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2209      	movs	r2, #9
 800137c:	4393      	bics	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	4b4f      	ldr	r3, [pc, #316]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fbd4 	bl	8000b34 <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff fbcf 	bl	8000b34 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e2b8      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2204      	movs	r2, #4
 80013aa:	4013      	ands	r3, r2
 80013ac:	d0f1      	beq.n	8001392 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	4a46      	ldr	r2, [pc, #280]	; (80014cc <HAL_RCC_OscConfig+0x348>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	0019      	movs	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	4b40      	ldr	r3, [pc, #256]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80013c0:	430a      	orrs	r2, r1
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	e018      	b.n	80013f8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	438a      	bics	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fbaf 	bl	8000b34 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fbaa 	bl	8000b34 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e293      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013ee:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2204      	movs	r2, #4
 80013f4:	4013      	ands	r3, r2
 80013f6:	d1f1      	bne.n	80013dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2210      	movs	r2, #16
 80013fe:	4013      	ands	r3, r2
 8001400:	d100      	bne.n	8001404 <HAL_RCC_OscConfig+0x280>
 8001402:	e0a2      	b.n	800154a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d140      	bne.n	800148c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4013      	ands	r3, r2
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x29e>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69db      	ldr	r3, [r3, #28]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e279      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001422:	4b27      	ldr	r3, [pc, #156]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	4a2d      	ldr	r2, [pc, #180]	; (80014dc <HAL_RCC_OscConfig+0x358>)
 8001428:	4013      	ands	r3, r2
 800142a:	0019      	movs	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001432:	430a      	orrs	r2, r1
 8001434:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	0a19      	lsrs	r1, r3, #8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a1b      	ldr	r3, [r3, #32]
 8001442:	061a      	lsls	r2, r3, #24
 8001444:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	0b5b      	lsrs	r3, r3, #13
 8001450:	3301      	adds	r3, #1
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	0212      	lsls	r2, r2, #8
 8001456:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001458:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	091b      	lsrs	r3, r3, #4
 800145e:	210f      	movs	r1, #15
 8001460:	400b      	ands	r3, r1
 8001462:	491b      	ldr	r1, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x34c>)
 8001464:	5ccb      	ldrb	r3, [r1, r3]
 8001466:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HAL_RCC_OscConfig+0x350>)
 800146a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_RCC_OscConfig+0x354>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2513      	movs	r5, #19
 8001472:	197c      	adds	r4, r7, r5
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fb17 	bl	8000aa8 <HAL_InitTick>
 800147a:	0003      	movs	r3, r0
 800147c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800147e:	197b      	adds	r3, r7, r5
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d061      	beq.n	800154a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001486:	197b      	adds	r3, r7, r5
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	e244      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d040      	beq.n	8001516 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <HAL_RCC_OscConfig+0x33c>)
 800149a:	2180      	movs	r1, #128	; 0x80
 800149c:	0049      	lsls	r1, r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a2:	f7ff fb47 	bl	8000b34 <HAL_GetTick>
 80014a6:	0003      	movs	r3, r0
 80014a8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014aa:	e019      	b.n	80014e0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ac:	f7ff fb42 	bl	8000b34 <HAL_GetTick>
 80014b0:	0002      	movs	r2, r0
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d912      	bls.n	80014e0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e22b      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	40021000 	.word	0x40021000
 80014c4:	fffeffff 	.word	0xfffeffff
 80014c8:	fffbffff 	.word	0xfffbffff
 80014cc:	ffffe0ff 	.word	0xffffe0ff
 80014d0:	08003340 	.word	0x08003340
 80014d4:	20000078 	.word	0x20000078
 80014d8:	2000007c 	.word	0x2000007c
 80014dc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014e0:	4bca      	ldr	r3, [pc, #808]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d0df      	beq.n	80014ac <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	4bc7      	ldr	r3, [pc, #796]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4ac7      	ldr	r2, [pc, #796]	; (8001810 <HAL_RCC_OscConfig+0x68c>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014fa:	4bc4      	ldr	r3, [pc, #784]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001500:	4bc2      	ldr	r3, [pc, #776]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	0a19      	lsrs	r1, r3, #8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a1b      	ldr	r3, [r3, #32]
 800150c:	061a      	lsls	r2, r3, #24
 800150e:	4bbf      	ldr	r3, [pc, #764]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	e019      	b.n	800154a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001516:	4bbd      	ldr	r3, [pc, #756]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4bbc      	ldr	r3, [pc, #752]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800151c:	49bd      	ldr	r1, [pc, #756]	; (8001814 <HAL_RCC_OscConfig+0x690>)
 800151e:	400a      	ands	r2, r1
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff fb07 	bl	8000b34 <HAL_GetTick>
 8001526:	0003      	movs	r3, r0
 8001528:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152c:	f7ff fb02 	bl	8000b34 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e1eb      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800153e:	4bb3      	ldr	r3, [pc, #716]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4013      	ands	r3, r2
 8001548:	d1f0      	bne.n	800152c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2208      	movs	r2, #8
 8001550:	4013      	ands	r3, r2
 8001552:	d036      	beq.n	80015c2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d019      	beq.n	8001590 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155c:	4bab      	ldr	r3, [pc, #684]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800155e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001560:	4baa      	ldr	r3, [pc, #680]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001562:	2101      	movs	r1, #1
 8001564:	430a      	orrs	r2, r1
 8001566:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001568:	f7ff fae4 	bl	8000b34 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001572:	f7ff fadf 	bl	8000b34 <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1c8      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001584:	4ba1      	ldr	r3, [pc, #644]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d0f1      	beq.n	8001572 <HAL_RCC_OscConfig+0x3ee>
 800158e:	e018      	b.n	80015c2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001590:	4b9e      	ldr	r3, [pc, #632]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001594:	4b9d      	ldr	r3, [pc, #628]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001596:	2101      	movs	r1, #1
 8001598:	438a      	bics	r2, r1
 800159a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff faca 	bl	8000b34 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a6:	f7ff fac5 	bl	8000b34 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1ae      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015b8:	4b94      	ldr	r3, [pc, #592]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80015ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d1f1      	bne.n	80015a6 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2204      	movs	r2, #4
 80015c8:	4013      	ands	r3, r2
 80015ca:	d100      	bne.n	80015ce <HAL_RCC_OscConfig+0x44a>
 80015cc:	e0ae      	b.n	800172c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ce:	2023      	movs	r0, #35	; 0x23
 80015d0:	183b      	adds	r3, r7, r0
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d6:	4b8d      	ldr	r3, [pc, #564]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80015d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	055b      	lsls	r3, r3, #21
 80015de:	4013      	ands	r3, r2
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b8a      	ldr	r3, [pc, #552]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80015e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015e6:	4b89      	ldr	r3, [pc, #548]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	0549      	lsls	r1, r1, #21
 80015ec:	430a      	orrs	r2, r1
 80015ee:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80015f0:	183b      	adds	r3, r7, r0
 80015f2:	2201      	movs	r2, #1
 80015f4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f6:	4b88      	ldr	r3, [pc, #544]	; (8001818 <HAL_RCC_OscConfig+0x694>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	d11a      	bne.n	8001638 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001602:	4b85      	ldr	r3, [pc, #532]	; (8001818 <HAL_RCC_OscConfig+0x694>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4b84      	ldr	r3, [pc, #528]	; (8001818 <HAL_RCC_OscConfig+0x694>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	0049      	lsls	r1, r1, #1
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001610:	f7ff fa90 	bl	8000b34 <HAL_GetTick>
 8001614:	0003      	movs	r3, r0
 8001616:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161a:	f7ff fa8b 	bl	8000b34 <HAL_GetTick>
 800161e:	0002      	movs	r2, r0
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b64      	cmp	r3, #100	; 0x64
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e174      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162c:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x694>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4013      	ands	r3, r2
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	2380      	movs	r3, #128	; 0x80
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	429a      	cmp	r2, r3
 8001642:	d107      	bne.n	8001654 <HAL_RCC_OscConfig+0x4d0>
 8001644:	4b71      	ldr	r3, [pc, #452]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001646:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001648:	4b70      	ldr	r3, [pc, #448]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800164a:	2180      	movs	r1, #128	; 0x80
 800164c:	0049      	lsls	r1, r1, #1
 800164e:	430a      	orrs	r2, r1
 8001650:	651a      	str	r2, [r3, #80]	; 0x50
 8001652:	e031      	b.n	80016b8 <HAL_RCC_OscConfig+0x534>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10c      	bne.n	8001676 <HAL_RCC_OscConfig+0x4f2>
 800165c:	4b6b      	ldr	r3, [pc, #428]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800165e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001660:	4b6a      	ldr	r3, [pc, #424]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001662:	496c      	ldr	r1, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0x690>)
 8001664:	400a      	ands	r2, r1
 8001666:	651a      	str	r2, [r3, #80]	; 0x50
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800166a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800166c:	4b67      	ldr	r3, [pc, #412]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800166e:	496b      	ldr	r1, [pc, #428]	; (800181c <HAL_RCC_OscConfig+0x698>)
 8001670:	400a      	ands	r2, r1
 8001672:	651a      	str	r2, [r3, #80]	; 0x50
 8001674:	e020      	b.n	80016b8 <HAL_RCC_OscConfig+0x534>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	23a0      	movs	r3, #160	; 0xa0
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	429a      	cmp	r2, r3
 8001680:	d10e      	bne.n	80016a0 <HAL_RCC_OscConfig+0x51c>
 8001682:	4b62      	ldr	r3, [pc, #392]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	00c9      	lsls	r1, r1, #3
 800168c:	430a      	orrs	r2, r1
 800168e:	651a      	str	r2, [r3, #80]	; 0x50
 8001690:	4b5e      	ldr	r3, [pc, #376]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001694:	4b5d      	ldr	r3, [pc, #372]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001696:	2180      	movs	r1, #128	; 0x80
 8001698:	0049      	lsls	r1, r1, #1
 800169a:	430a      	orrs	r2, r1
 800169c:	651a      	str	r2, [r3, #80]	; 0x50
 800169e:	e00b      	b.n	80016b8 <HAL_RCC_OscConfig+0x534>
 80016a0:	4b5a      	ldr	r3, [pc, #360]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80016a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a4:	4b59      	ldr	r3, [pc, #356]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80016a6:	495b      	ldr	r1, [pc, #364]	; (8001814 <HAL_RCC_OscConfig+0x690>)
 80016a8:	400a      	ands	r2, r1
 80016aa:	651a      	str	r2, [r3, #80]	; 0x50
 80016ac:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80016ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80016b2:	495a      	ldr	r1, [pc, #360]	; (800181c <HAL_RCC_OscConfig+0x698>)
 80016b4:	400a      	ands	r2, r1
 80016b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d015      	beq.n	80016ec <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fa38 	bl	8000b34 <HAL_GetTick>
 80016c4:	0003      	movs	r3, r0
 80016c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016c8:	e009      	b.n	80016de <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ca:	f7ff fa33 	bl	8000b34 <HAL_GetTick>
 80016ce:	0002      	movs	r2, r0
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_RCC_OscConfig+0x69c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e11b      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016de:	4b4b      	ldr	r3, [pc, #300]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80016e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0ef      	beq.n	80016ca <HAL_RCC_OscConfig+0x546>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ec:	f7ff fa22 	bl	8000b34 <HAL_GetTick>
 80016f0:	0003      	movs	r3, r0
 80016f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016f4:	e009      	b.n	800170a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f7ff fa1d 	bl	8000b34 <HAL_GetTick>
 80016fa:	0002      	movs	r2, r0
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	4a47      	ldr	r2, [pc, #284]	; (8001820 <HAL_RCC_OscConfig+0x69c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e105      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800170c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4013      	ands	r3, r2
 8001714:	d1ef      	bne.n	80016f6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001716:	2323      	movs	r3, #35	; 0x23
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d105      	bne.n	800172c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001726:	493f      	ldr	r1, [pc, #252]	; (8001824 <HAL_RCC_OscConfig+0x6a0>)
 8001728:	400a      	ands	r2, r1
 800172a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2220      	movs	r2, #32
 8001732:	4013      	ands	r3, r2
 8001734:	d049      	beq.n	80017ca <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d026      	beq.n	800178c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001744:	2101      	movs	r1, #1
 8001746:	430a      	orrs	r2, r1
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800174c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
 8001756:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0x6a4>)
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_RCC_OscConfig+0x6a4>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0189      	lsls	r1, r1, #6
 8001760:	430a      	orrs	r2, r1
 8001762:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff f9e6 	bl	8000b34 <HAL_GetTick>
 8001768:	0003      	movs	r3, r0
 800176a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800176e:	f7ff f9e1 	bl	8000b34 <HAL_GetTick>
 8001772:	0002      	movs	r2, r0
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e0ca      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001780:	4b22      	ldr	r3, [pc, #136]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d0f1      	beq.n	800176e <HAL_RCC_OscConfig+0x5ea>
 800178a:	e01e      	b.n	80017ca <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800178c:	4b1f      	ldr	r3, [pc, #124]	; (800180c <HAL_RCC_OscConfig+0x688>)
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	4b1e      	ldr	r3, [pc, #120]	; (800180c <HAL_RCC_OscConfig+0x688>)
 8001792:	2101      	movs	r1, #1
 8001794:	438a      	bics	r2, r1
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_RCC_OscConfig+0x6a4>)
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	4b22      	ldr	r3, [pc, #136]	; (8001828 <HAL_RCC_OscConfig+0x6a4>)
 800179e:	4923      	ldr	r1, [pc, #140]	; (800182c <HAL_RCC_OscConfig+0x6a8>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff f9c6 	bl	8000b34 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ae:	f7ff f9c1 	bl	8000b34 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0aa      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f1      	bne.n	80017ae <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d100      	bne.n	80017d4 <HAL_RCC_OscConfig+0x650>
 80017d2:	e09f      	b.n	8001914 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d100      	bne.n	80017dc <HAL_RCC_OscConfig+0x658>
 80017da:	e078      	b.n	80018ce <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d159      	bne.n	8001898 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_RCC_OscConfig+0x688>)
 80017ea:	4911      	ldr	r1, [pc, #68]	; (8001830 <HAL_RCC_OscConfig+0x6ac>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff f9a0 	bl	8000b34 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017f8:	e01c      	b.n	8001834 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017fa:	f7ff f99b 	bl	8000b34 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d915      	bls.n	8001834 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e084      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
 800180c:	40021000 	.word	0x40021000
 8001810:	ffff1fff 	.word	0xffff1fff
 8001814:	fffffeff 	.word	0xfffffeff
 8001818:	40007000 	.word	0x40007000
 800181c:	fffffbff 	.word	0xfffffbff
 8001820:	00001388 	.word	0x00001388
 8001824:	efffffff 	.word	0xefffffff
 8001828:	40010000 	.word	0x40010000
 800182c:	ffffdfff 	.word	0xffffdfff
 8001830:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001834:	4b3a      	ldr	r3, [pc, #232]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	049b      	lsls	r3, r3, #18
 800183c:	4013      	ands	r3, r2
 800183e:	d1dc      	bne.n	80017fa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4a37      	ldr	r2, [pc, #220]	; (8001924 <HAL_RCC_OscConfig+0x7a0>)
 8001846:	4013      	ands	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001858:	431a      	orrs	r2, r3
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b2f      	ldr	r3, [pc, #188]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 8001866:	2180      	movs	r1, #128	; 0x80
 8001868:	0449      	lsls	r1, r1, #17
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186e:	f7ff f961 	bl	8000b34 <HAL_GetTick>
 8001872:	0003      	movs	r3, r0
 8001874:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f95c 	bl	8000b34 <HAL_GetTick>
 800187c:	0002      	movs	r2, r0
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	049b      	lsls	r3, r3, #18
 8001892:	4013      	ands	r3, r2
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x6f4>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001898:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 800189e:	4922      	ldr	r1, [pc, #136]	; (8001928 <HAL_RCC_OscConfig+0x7a4>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff f946 	bl	8000b34 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f941 	bl	8000b34 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e02a      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	049b      	lsls	r3, r3, #18
 80018c8:	4013      	ands	r3, r2
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x72a>
 80018cc:	e022      	b.n	8001914 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e01d      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_RCC_OscConfig+0x79c>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	2380      	movs	r3, #128	; 0x80
 80018e4:	025b      	lsls	r3, r3, #9
 80018e6:	401a      	ands	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d10f      	bne.n	8001910 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	23f0      	movs	r3, #240	; 0xf0
 80018f4:	039b      	lsls	r3, r3, #14
 80018f6:	401a      	ands	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	23c0      	movs	r3, #192	; 0xc0
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	0018      	movs	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	b00a      	add	sp, #40	; 0x28
 800191c:	bdb0      	pop	{r4, r5, r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	40021000 	.word	0x40021000
 8001924:	ff02ffff 	.word	0xff02ffff
 8001928:	feffffff 	.word	0xfeffffff

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b5b0      	push	{r4, r5, r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e128      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b96      	ldr	r3, [pc, #600]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2201      	movs	r2, #1
 8001946:	4013      	ands	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d91e      	bls.n	800198c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b93      	ldr	r3, [pc, #588]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4393      	bics	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	4b90      	ldr	r3, [pc, #576]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001960:	f7ff f8e8 	bl	8000b34 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001968:	e009      	b.n	800197e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7ff f8e3 	bl	8000b34 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a8a      	ldr	r2, [pc, #552]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e109      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b87      	ldr	r3, [pc, #540]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	4013      	ands	r3, r2
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d009      	beq.n	80019aa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001996:	4b83      	ldr	r3, [pc, #524]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	22f0      	movs	r2, #240	; 0xf0
 800199c:	4393      	bics	r3, r2
 800199e:	0019      	movs	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	4b7f      	ldr	r3, [pc, #508]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019a6:	430a      	orrs	r2, r1
 80019a8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2201      	movs	r2, #1
 80019b0:	4013      	ands	r3, r2
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_ClockConfig+0x8a>
 80019b4:	e089      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019be:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	029b      	lsls	r3, r3, #10
 80019c6:	4013      	ands	r3, r2
 80019c8:	d120      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0e1      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019d6:	4b73      	ldr	r3, [pc, #460]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	049b      	lsls	r3, r3, #18
 80019de:	4013      	ands	r3, r2
 80019e0:	d114      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0d5      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d106      	bne.n	80019fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2204      	movs	r2, #4
 80019f4:	4013      	ands	r3, r2
 80019f6:	d109      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0ca      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019fc:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4013      	ands	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0c2      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a0c:	4b65      	ldr	r3, [pc, #404]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2203      	movs	r2, #3
 8001a12:	4393      	bics	r3, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685a      	ldr	r2, [r3, #4]
 8001a1a:	4b62      	ldr	r3, [pc, #392]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a20:	f7ff f888 	bl	8000b34 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d111      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a30:	e009      	b.n	8001a46 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a32:	f7ff f87f 	bl	8000b34 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e0a5      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a46:	4b57      	ldr	r3, [pc, #348]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	220c      	movs	r2, #12
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d1ef      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x106>
 8001a52:	e03a      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d111      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	e009      	b.n	8001a72 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5e:	f7ff f869 	bl	8000b34 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	4a4d      	ldr	r2, [pc, #308]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e08f      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	220c      	movs	r2, #12
 8001a78:	4013      	ands	r3, r2
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d1ef      	bne.n	8001a5e <HAL_RCC_ClockConfig+0x132>
 8001a7e:	e024      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d11b      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f853 	bl	8000b34 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a42      	ldr	r2, [pc, #264]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e079      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d1ef      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x15e>
 8001aaa:	e00e      	b.n	8001aca <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff f842 	bl	8000b34 <HAL_GetTick>
 8001ab0:	0002      	movs	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	4a3a      	ldr	r2, [pc, #232]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e068      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ac0:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	220c      	movs	r2, #12
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d21e      	bcs.n	8001b16 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4393      	bics	r3, r2
 8001ae0:	0019      	movs	r1, r3
 8001ae2:	4b2e      	ldr	r3, [pc, #184]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aea:	f7ff f823 	bl	8000b34 <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	e009      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7ff f81e 	bl	8000b34 <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <HAL_RCC_ClockConfig+0x274>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e044      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b08:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <HAL_RCC_ClockConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4013      	ands	r3, r2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d1ee      	bne.n	8001af4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d009      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b20:	4b20      	ldr	r3, [pc, #128]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a20      	ldr	r2, [pc, #128]	; (8001ba8 <HAL_RCC_ClockConfig+0x27c>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	0019      	movs	r1, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2208      	movs	r2, #8
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d00a      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4a1a      	ldr	r2, [pc, #104]	; (8001bac <HAL_RCC_ClockConfig+0x280>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	0019      	movs	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	00da      	lsls	r2, r3, #3
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b50:	430a      	orrs	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b54:	f000 f832 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b58:	0001      	movs	r1, r0
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x278>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	220f      	movs	r2, #15
 8001b62:	4013      	ands	r3, r2
 8001b64:	4a12      	ldr	r2, [pc, #72]	; (8001bb0 <HAL_RCC_ClockConfig+0x284>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	000a      	movs	r2, r1
 8001b6a:	40da      	lsrs	r2, r3
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_ClockConfig+0x288>)
 8001b6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_RCC_ClockConfig+0x28c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	250b      	movs	r5, #11
 8001b76:	197c      	adds	r4, r7, r5
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f7fe ff95 	bl	8000aa8 <HAL_InitTick>
 8001b7e:	0003      	movs	r3, r0
 8001b80:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b82:	197b      	adds	r3, r7, r5
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b8a:	197b      	adds	r3, r7, r5
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b004      	add	sp, #16
 8001b98:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	00001388 	.word	0x00001388
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	fffff8ff 	.word	0xfffff8ff
 8001bac:	ffffc7ff 	.word	0xffffc7ff
 8001bb0:	08003340 	.word	0x08003340
 8001bb4:	20000078 	.word	0x20000078
 8001bb8:	2000007c 	.word	0x2000007c

08001bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	b5b0      	push	{r4, r5, r7, lr}
 8001bbe:	b08e      	sub	sp, #56	; 0x38
 8001bc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bca:	230c      	movs	r3, #12
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	d014      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x40>
 8001bd2:	d900      	bls.n	8001bd6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001bd4:	e07b      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x112>
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d002      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x24>
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bde:	e076      	b.n	8001cce <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001be0:	4b44      	ldr	r3, [pc, #272]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2210      	movs	r2, #16
 8001be6:	4013      	ands	r3, r2
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001bea:	4b43      	ldr	r3, [pc, #268]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001bee:	e07c      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x140>)
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bf4:	e079      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b42      	ldr	r3, [pc, #264]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bfa:	e076      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfe:	0c9a      	lsrs	r2, r3, #18
 8001c00:	230f      	movs	r3, #15
 8001c02:	401a      	ands	r2, r3
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c06:	5c9b      	ldrb	r3, [r3, r2]
 8001c08:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0c:	0d9a      	lsrs	r2, r3, #22
 8001c0e:	2303      	movs	r3, #3
 8001c10:	4013      	ands	r3, r2
 8001c12:	3301      	adds	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c16:	4b37      	ldr	r3, [pc, #220]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c18:	68da      	ldr	r2, [r3, #12]
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	025b      	lsls	r3, r3, #9
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d01a      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
 8001c2a:	4a35      	ldr	r2, [pc, #212]	; (8001d00 <HAL_RCC_GetSysClockFreq+0x144>)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	69b8      	ldr	r0, [r7, #24]
 8001c30:	69f9      	ldr	r1, [r7, #28]
 8001c32:	f7fe fb15 	bl	8000260 <__aeabi_lmul>
 8001c36:	0002      	movs	r2, r0
 8001c38:	000b      	movs	r3, r1
 8001c3a:	0010      	movs	r0, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f7fe fae9 	bl	8000220 <__aeabi_uldivmod>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	000b      	movs	r3, r1
 8001c52:	0013      	movs	r3, r2
 8001c54:	637b      	str	r3, [r7, #52]	; 0x34
 8001c56:	e037      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c58:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d01a      	beq.n	8001c98 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	68b8      	ldr	r0, [r7, #8]
 8001c70:	68f9      	ldr	r1, [r7, #12]
 8001c72:	f7fe faf5 	bl	8000260 <__aeabi_lmul>
 8001c76:	0002      	movs	r2, r0
 8001c78:	000b      	movs	r3, r1
 8001c7a:	0010      	movs	r0, r2
 8001c7c:	0019      	movs	r1, r3
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f7fe fac9 	bl	8000220 <__aeabi_uldivmod>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	000b      	movs	r3, r1
 8001c92:	0013      	movs	r3, r2
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
 8001c96:	e017      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	0019      	movs	r1, r3
 8001ca0:	4a16      	ldr	r2, [pc, #88]	; (8001cfc <HAL_RCC_GetSysClockFreq+0x140>)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f7fe fadc 	bl	8000260 <__aeabi_lmul>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	000b      	movs	r3, r1
 8001cac:	0010      	movs	r0, r2
 8001cae:	0019      	movs	r1, r3
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	001c      	movs	r4, r3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	001d      	movs	r5, r3
 8001cb8:	0022      	movs	r2, r4
 8001cba:	002b      	movs	r3, r5
 8001cbc:	f7fe fab0 	bl	8000220 <__aeabi_uldivmod>
 8001cc0:	0002      	movs	r2, r0
 8001cc2:	000b      	movs	r3, r1
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ccc:	e00d      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	0b5b      	lsrs	r3, r3, #13
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	0212      	lsls	r2, r2, #8
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ce8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b00e      	add	sp, #56	; 0x38
 8001cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	003d0900 	.word	0x003d0900
 8001cfc:	00f42400 	.word	0x00f42400
 8001d00:	007a1200 	.word	0x007a1200
 8001d04:	08003358 	.word	0x08003358

08001d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d0c:	4b02      	ldr	r3, [pc, #8]	; (8001d18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	46c0      	nop			; (mov r8, r8)
 8001d18:	20000078 	.word	0x20000078

08001d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d20:	f7ff fff2 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d24:	0001      	movs	r1, r0
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	0a1b      	lsrs	r3, r3, #8
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	4013      	ands	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d32:	5cd3      	ldrb	r3, [r2, r3]
 8001d34:	40d9      	lsrs	r1, r3
 8001d36:	000b      	movs	r3, r1
}
 8001d38:	0018      	movs	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	46c0      	nop			; (mov r8, r8)
 8001d40:	40021000 	.word	0x40021000
 8001d44:	08003350 	.word	0x08003350

08001d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d4c:	f7ff ffdc 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d50:	0001      	movs	r1, r0
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	0adb      	lsrs	r3, r3, #11
 8001d58:	2207      	movs	r2, #7
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	4a04      	ldr	r2, [pc, #16]	; (8001d70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d5e:	5cd3      	ldrb	r3, [r2, r3]
 8001d60:	40d9      	lsrs	r1, r3
 8001d62:	000b      	movs	r3, r1
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	08003350 	.word	0x08003350

08001d74 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d7c:	2317      	movs	r3, #23
 8001d7e:	18fb      	adds	r3, r7, r3
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	4013      	ands	r3, r2
 8001d98:	d100      	bne.n	8001d9c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d9a:	e0d9      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9c:	4ba4      	ldr	r3, [pc, #656]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	4013      	ands	r3, r2
 8001da6:	d10a      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da8:	4ba1      	ldr	r3, [pc, #644]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dac:	4ba0      	ldr	r3, [pc, #640]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dae:	2180      	movs	r1, #128	; 0x80
 8001db0:	0549      	lsls	r1, r1, #21
 8001db2:	430a      	orrs	r2, r1
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001db6:	2317      	movs	r3, #23
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b9d      	ldr	r3, [pc, #628]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d11a      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dca:	4b9a      	ldr	r3, [pc, #616]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b99      	ldr	r3, [pc, #612]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0049      	lsls	r1, r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd8:	f7fe feac 	bl	8000b34 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7fe fea7 	bl	8000b34 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	d901      	bls.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e118      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df4:	4b8f      	ldr	r3, [pc, #572]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e00:	4b8b      	ldr	r3, [pc, #556]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	23c0      	movs	r3, #192	; 0xc0
 8001e06:	039b      	lsls	r3, r3, #14
 8001e08:	4013      	ands	r3, r2
 8001e0a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	23c0      	movs	r3, #192	; 0xc0
 8001e12:	039b      	lsls	r3, r3, #14
 8001e14:	4013      	ands	r3, r2
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d107      	bne.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	23c0      	movs	r3, #192	; 0xc0
 8001e22:	039b      	lsls	r3, r3, #14
 8001e24:	4013      	ands	r3, r2
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d013      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	23c0      	movs	r3, #192	; 0xc0
 8001e32:	029b      	lsls	r3, r3, #10
 8001e34:	401a      	ands	r2, r3
 8001e36:	23c0      	movs	r3, #192	; 0xc0
 8001e38:	029b      	lsls	r3, r3, #10
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d10a      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e3e:	4b7c      	ldr	r3, [pc, #496]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	029b      	lsls	r3, r3, #10
 8001e46:	401a      	ands	r2, r3
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	029b      	lsls	r3, r3, #10
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0e8      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e58:	23c0      	movs	r3, #192	; 0xc0
 8001e5a:	029b      	lsls	r3, r3, #10
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d049      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	23c0      	movs	r3, #192	; 0xc0
 8001e6c:	029b      	lsls	r3, r3, #10
 8001e6e:	4013      	ands	r3, r2
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d004      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d10d      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	23c0      	movs	r3, #192	; 0xc0
 8001e86:	029b      	lsls	r3, r3, #10
 8001e88:	4013      	ands	r3, r2
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d034      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	011b      	lsls	r3, r3, #4
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d02e      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e9c:	4b64      	ldr	r3, [pc, #400]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	4a65      	ldr	r2, [pc, #404]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ea6:	4b62      	ldr	r3, [pc, #392]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ea8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eaa:	4b61      	ldr	r3, [pc, #388]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eac:	2180      	movs	r1, #128	; 0x80
 8001eae:	0309      	lsls	r1, r1, #12
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb4:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001eb8:	4b5d      	ldr	r3, [pc, #372]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eba:	4960      	ldr	r1, [pc, #384]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ec0:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d014      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fe30 	bl	8000b34 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ed8:	e009      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eda:	f7fe fe2b 	bl	8000b34 <HAL_GetTick>
 8001ede:	0002      	movs	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	4a56      	ldr	r2, [pc, #344]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e09b      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eee:	4b50      	ldr	r3, [pc, #320]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d0ef      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	029b      	lsls	r3, r3, #10
 8001f02:	401a      	ands	r2, r3
 8001f04:	23c0      	movs	r3, #192	; 0xc0
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001f0c:	4b48      	ldr	r3, [pc, #288]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001f12:	4013      	ands	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	23c0      	movs	r3, #192	; 0xc0
 8001f1c:	039b      	lsls	r3, r3, #14
 8001f1e:	401a      	ands	r2, r3
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	4b42      	ldr	r3, [pc, #264]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	23c0      	movs	r3, #192	; 0xc0
 8001f30:	029b      	lsls	r3, r3, #10
 8001f32:	401a      	ands	r2, r3
 8001f34:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f3a:	2317      	movs	r3, #23
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f44:	4b3a      	ldr	r3, [pc, #232]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f4a:	493f      	ldr	r1, [pc, #252]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f78:	4b2d      	ldr	r3, [pc, #180]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	220c      	movs	r2, #12
 8001f7e:	4393      	bics	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2204      	movs	r2, #4
 8001f92:	4013      	ands	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a2c      	ldr	r2, [pc, #176]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2208      	movs	r2, #8
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	4a25      	ldr	r2, [pc, #148]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d009      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	4a17      	ldr	r2, [pc, #92]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	0019      	movs	r1, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2240      	movs	r2, #64	; 0x40
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	4a17      	ldr	r2, [pc, #92]	; (8002054 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002002:	430a      	orrs	r2, r1
 8002004:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	4013      	ands	r3, r2
 800200e:	d009      	beq.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002014:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002016:	4013      	ands	r3, r2
 8002018:	0019      	movs	r1, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1a      	ldr	r2, [r3, #32]
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002020:	430a      	orrs	r2, r1
 8002022:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b006      	add	sp, #24
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
 8002038:	fffcffff 	.word	0xfffcffff
 800203c:	fff7ffff 	.word	0xfff7ffff
 8002040:	00001388 	.word	0x00001388
 8002044:	ffcfffff 	.word	0xffcfffff
 8002048:	efffffff 	.word	0xefffffff
 800204c:	fffff3ff 	.word	0xfffff3ff
 8002050:	ffffcfff 	.word	0xffffcfff
 8002054:	fbffffff 	.word	0xfbffffff
 8002058:	fff3ffff 	.word	0xfff3ffff

0800205c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e083      	b.n	8002176 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	2b00      	cmp	r3, #0
 8002074:	d109      	bne.n	800208a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	2382      	movs	r3, #130	; 0x82
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	429a      	cmp	r2, r3
 8002080:	d009      	beq.n	8002096 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	61da      	str	r2, [r3, #28]
 8002088:	e005      	b.n	8002096 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2251      	movs	r2, #81	; 0x51
 80020a0:	5c9b      	ldrb	r3, [r3, r2]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2250      	movs	r2, #80	; 0x50
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f7fe fbf2 	bl	800089c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2251      	movs	r2, #81	; 0x51
 80020bc:	2102      	movs	r1, #2
 80020be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2140      	movs	r1, #64	; 0x40
 80020cc:	438a      	bics	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	2382      	movs	r3, #130	; 0x82
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	401a      	ands	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6899      	ldr	r1, [r3, #8]
 80020de:	2384      	movs	r3, #132	; 0x84
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	400b      	ands	r3, r1
 80020e4:	431a      	orrs	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68d9      	ldr	r1, [r3, #12]
 80020ea:	2380      	movs	r3, #128	; 0x80
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	400b      	ands	r3, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2102      	movs	r1, #2
 80020f8:	400b      	ands	r3, r1
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	2101      	movs	r1, #1
 8002102:	400b      	ands	r3, r1
 8002104:	431a      	orrs	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6999      	ldr	r1, [r3, #24]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	400b      	ands	r3, r1
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	2138      	movs	r1, #56	; 0x38
 8002118:	400b      	ands	r3, r1
 800211a:	431a      	orrs	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	400b      	ands	r3, r1
 8002124:	431a      	orrs	r2, r3
 8002126:	0011      	movs	r1, r2
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	019b      	lsls	r3, r3, #6
 8002130:	401a      	ands	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	430a      	orrs	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	0c1b      	lsrs	r3, r3, #16
 8002140:	2204      	movs	r2, #4
 8002142:	4013      	ands	r3, r2
 8002144:	0019      	movs	r1, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	2210      	movs	r2, #16
 800214c:	401a      	ands	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69da      	ldr	r2, [r3, #28]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <HAL_SPI_Init+0x124>)
 8002162:	400a      	ands	r2, r1
 8002164:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2251      	movs	r2, #81	; 0x51
 8002170:	2101      	movs	r1, #1
 8002172:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	b002      	add	sp, #8
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	fffff7ff 	.word	0xfffff7ff

08002184 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
 8002190:	001a      	movs	r2, r3
 8002192:	1cbb      	adds	r3, r7, #2
 8002194:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002196:	2317      	movs	r3, #23
 8002198:	18fb      	adds	r3, r7, r3
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2250      	movs	r2, #80	; 0x50
 80021a2:	5c9b      	ldrb	r3, [r3, r2]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_SPI_TransmitReceive_IT+0x28>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e086      	b.n	80022ba <HAL_SPI_TransmitReceive_IT+0x136>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2250      	movs	r2, #80	; 0x50
 80021b0:	2101      	movs	r1, #1
 80021b2:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021b4:	2016      	movs	r0, #22
 80021b6:	183b      	adds	r3, r7, r0
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	2151      	movs	r1, #81	; 0x51
 80021bc:	5c52      	ldrb	r2, [r2, r1]
 80021be:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021c6:	0001      	movs	r1, r0
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d011      	beq.n	80021f4 <HAL_SPI_TransmitReceive_IT+0x70>
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	2382      	movs	r3, #130	; 0x82
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d107      	bne.n	80021ea <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d103      	bne.n	80021ea <HAL_SPI_TransmitReceive_IT+0x66>
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d004      	beq.n	80021f4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 80021ea:	2317      	movs	r3, #23
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	2202      	movs	r2, #2
 80021f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80021f2:	e05b      	b.n	80022ac <HAL_SPI_TransmitReceive_IT+0x128>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d006      	beq.n	8002208 <HAL_SPI_TransmitReceive_IT+0x84>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_SPI_TransmitReceive_IT+0x84>
 8002200:	1cbb      	adds	r3, r7, #2
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 8002208:	2317      	movs	r3, #23
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2201      	movs	r2, #1
 800220e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002210:	e04c      	b.n	80022ac <HAL_SPI_TransmitReceive_IT+0x128>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2251      	movs	r2, #81	; 0x51
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b04      	cmp	r3, #4
 800221c:	d003      	beq.n	8002226 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2251      	movs	r2, #81	; 0x51
 8002222:	2105      	movs	r1, #5
 8002224:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1cba      	adds	r2, r7, #2
 8002236:	8812      	ldrh	r2, [r2, #0]
 8002238:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1cba      	adds	r2, r7, #2
 800223e:	8812      	ldrh	r2, [r2, #0]
 8002240:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1cba      	adds	r2, r7, #2
 800224c:	8812      	ldrh	r2, [r2, #0]
 800224e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1cba      	adds	r2, r7, #2
 8002254:	8812      	ldrh	r2, [r2, #0]
 8002256:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_SPI_TransmitReceive_IT+0xea>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a18      	ldr	r2, [pc, #96]	; (80022c4 <HAL_SPI_TransmitReceive_IT+0x140>)
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	4a17      	ldr	r2, [pc, #92]	; (80022c8 <HAL_SPI_TransmitReceive_IT+0x144>)
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
 800226c:	e005      	b.n	800227a <HAL_SPI_TransmitReceive_IT+0xf6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4a16      	ldr	r2, [pc, #88]	; (80022cc <HAL_SPI_TransmitReceive_IT+0x148>)
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8002278:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	21e0      	movs	r1, #224	; 0xe0
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2240      	movs	r2, #64	; 0x40
 8002292:	4013      	ands	r3, r2
 8002294:	2b40      	cmp	r3, #64	; 0x40
 8002296:	d008      	beq.n	80022aa <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2140      	movs	r1, #64	; 0x40
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e000      	b.n	80022ac <HAL_SPI_TransmitReceive_IT+0x128>
  }

error :
 80022aa:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2250      	movs	r2, #80	; 0x50
 80022b0:	2100      	movs	r1, #0
 80022b2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022b4:	2317      	movs	r3, #23
 80022b6:	18fb      	adds	r3, r7, r3
 80022b8:	781b      	ldrb	r3, [r3, #0]
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b006      	add	sp, #24
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	080025d3 	.word	0x080025d3
 80022c8:	08002635 	.word	0x08002635
 80022cc:	0800250b 	.word	0x0800250b
 80022d0:	08002571 	.word	0x08002571

080022d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b088      	sub	sp, #32
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	001a      	movs	r2, r3
 80022f2:	2301      	movs	r3, #1
 80022f4:	4013      	ands	r3, r2
 80022f6:	d10f      	bne.n	8002318 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2201      	movs	r2, #1
 80022fc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80022fe:	d00b      	beq.n	8002318 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	001a      	movs	r2, r3
 8002306:	2301      	movs	r3, #1
 8002308:	4013      	ands	r3, r2
 800230a:	d005      	beq.n	8002318 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	0010      	movs	r0, r2
 8002314:	4798      	blx	r3
    return;
 8002316:	e0d5      	b.n	80024c4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	085b      	lsrs	r3, r3, #1
 800231c:	001a      	movs	r2, r3
 800231e:	2301      	movs	r3, #1
 8002320:	4013      	ands	r3, r2
 8002322:	d00b      	beq.n	800233c <HAL_SPI_IRQHandler+0x68>
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	09db      	lsrs	r3, r3, #7
 8002328:	001a      	movs	r2, r3
 800232a:	2301      	movs	r3, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d005      	beq.n	800233c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	0010      	movs	r0, r2
 8002338:	4798      	blx	r3
    return;
 800233a:	e0c3      	b.n	80024c4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	001a      	movs	r2, r3
 8002342:	2301      	movs	r3, #1
 8002344:	4013      	ands	r3, r2
 8002346:	d10c      	bne.n	8002362 <HAL_SPI_IRQHandler+0x8e>
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	099b      	lsrs	r3, r3, #6
 800234c:	001a      	movs	r2, r3
 800234e:	2301      	movs	r3, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d106      	bne.n	8002362 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	001a      	movs	r2, r3
 800235a:	2301      	movs	r3, #1
 800235c:	4013      	ands	r3, r2
 800235e:	d100      	bne.n	8002362 <HAL_SPI_IRQHandler+0x8e>
 8002360:	e0b0      	b.n	80024c4 <HAL_SPI_IRQHandler+0x1f0>
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	001a      	movs	r2, r3
 8002368:	2301      	movs	r3, #1
 800236a:	4013      	ands	r3, r2
 800236c:	d100      	bne.n	8002370 <HAL_SPI_IRQHandler+0x9c>
 800236e:	e0a9      	b.n	80024c4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	001a      	movs	r2, r3
 8002376:	2301      	movs	r3, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d023      	beq.n	80023c4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2251      	movs	r2, #81	; 0x51
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b03      	cmp	r3, #3
 8002386:	d011      	beq.n	80023ac <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	2204      	movs	r2, #4
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	e00b      	b.n	80023c4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
        return;
 80023c2:	e07f      	b.n	80024c4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	001a      	movs	r2, r3
 80023ca:	2301      	movs	r3, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	d014      	beq.n	80023fa <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d4:	2201      	movs	r2, #1
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2140      	movs	r1, #64	; 0x40
 80023f4:	438a      	bics	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	001a      	movs	r2, r3
 8002400:	2301      	movs	r3, #1
 8002402:	4013      	ands	r3, r2
 8002404:	d00c      	beq.n	8002420 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240a:	2208      	movs	r2, #8
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002424:	2b00      	cmp	r3, #0
 8002426:	d04c      	beq.n	80024c2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	21e0      	movs	r1, #224	; 0xe0
 8002434:	438a      	bics	r2, r1
 8002436:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2251      	movs	r2, #81	; 0x51
 800243c:	2101      	movs	r1, #1
 800243e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2202      	movs	r2, #2
 8002444:	4013      	ands	r3, r2
 8002446:	d103      	bne.n	8002450 <HAL_SPI_IRQHandler+0x17c>
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2201      	movs	r2, #1
 800244c:	4013      	ands	r3, r2
 800244e:	d032      	beq.n	80024b6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2103      	movs	r1, #3
 800245c:	438a      	bics	r2, r1
 800245e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d010      	beq.n	800248a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246c:	4a17      	ldr	r2, [pc, #92]	; (80024cc <HAL_SPI_IRQHandler+0x1f8>)
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002474:	0018      	movs	r0, r3
 8002476:	f7fe fc69 	bl	8000d4c <HAL_DMA_Abort_IT>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d005      	beq.n	800248a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002482:	2240      	movs	r2, #64	; 0x40
 8002484:	431a      	orrs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002496:	4a0d      	ldr	r2, [pc, #52]	; (80024cc <HAL_SPI_IRQHandler+0x1f8>)
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249e:	0018      	movs	r0, r3
 80024a0:	f7fe fc54 	bl	8000d4c <HAL_DMA_Abort_IT>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d00b      	beq.n	80024c0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ac:	2240      	movs	r2, #64	; 0x40
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80024b4:	e004      	b.n	80024c0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe f9bd 	bl	8000838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80024be:	e000      	b.n	80024c2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80024c0:	46c0      	nop			; (mov r8, r8)
    return;
 80024c2:	46c0      	nop			; (mov r8, r8)
  }
}
 80024c4:	46bd      	mov	sp, r7
 80024c6:	b008      	add	sp, #32
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	080024e1 	.word	0x080024e1

080024d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80024d8:	46c0      	nop			; (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b002      	add	sp, #8
 80024de:	bd80      	pop	{r7, pc}

080024e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7fe f99b 	bl	8000838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bd80      	pop	{r7, pc}

0800250a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	330c      	adds	r3, #12
 8002518:	001a      	movs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	7812      	ldrb	r2, [r2, #0]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d110      	bne.n	8002568 <SPI_2linesRxISR_8BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2160      	movs	r1, #96	; 0x60
 8002552:	438a      	bics	r2, r1
 8002554:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d103      	bne.n	8002568 <SPI_2linesRxISR_8BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f96a 	bl	800283c <SPI_CloseRxTx_ISR>
    }
  }
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	330c      	adds	r3, #12
 8002582:	7812      	ldrb	r2, [r2, #0]
 8002584:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d110      	bne.n	80025ca <SPI_2linesTxISR_8BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2180      	movs	r1, #128	; 0x80
 80025b4:	438a      	bics	r2, r1
 80025b6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d103      	bne.n	80025ca <SPI_2linesTxISR_8BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	0018      	movs	r0, r3
 80025c6:	f000 f939 	bl	800283c <SPI_CloseRxTx_ISR>
    }
  }
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68da      	ldr	r2, [r3, #12]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e4:	b292      	uxth	r2, r2
 80025e6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ec:	1c9a      	adds	r2, r3, #2
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d110      	bne.n	800262c <SPI_2linesRxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2140      	movs	r1, #64	; 0x40
 8002616:	438a      	bics	r2, r1
 8002618:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d103      	bne.n	800262c <SPI_2linesRxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f908 	bl	800283c <SPI_CloseRxTx_ISR>
    }
  }
}
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}

08002634 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	881a      	ldrh	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	1c9a      	adds	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002664:	b29b      	uxth	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d110      	bne.n	800268c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	438a      	bics	r2, r1
 8002678:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d103      	bne.n	800268c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	0018      	movs	r0, r3
 8002688:	f000 f8d8 	bl	800283c <SPI_CloseRxTx_ISR>
    }
  }
}
 800268c:	46c0      	nop			; (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	b002      	add	sp, #8
 8002692:	bd80      	pop	{r7, pc}

08002694 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	1dfb      	adds	r3, r7, #7
 80026a2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026a4:	f7fe fa46 	bl	8000b34 <HAL_GetTick>
 80026a8:	0002      	movs	r2, r0
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	18d3      	adds	r3, r2, r3
 80026b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026b4:	f7fe fa3e 	bl	8000b34 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	015b      	lsls	r3, r3, #5
 80026c2:	0d1b      	lsrs	r3, r3, #20
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	4353      	muls	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026ca:	e058      	b.n	800277e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	3301      	adds	r3, #1
 80026d0:	d055      	beq.n	800277e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026d2:	f7fe fa2f 	bl	8000b34 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	69fa      	ldr	r2, [r7, #28]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d902      	bls.n	80026e8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d142      	bne.n	800276e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	21e0      	movs	r1, #224	; 0xe0
 80026f4:	438a      	bics	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	2382      	movs	r3, #130	; 0x82
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	429a      	cmp	r2, r3
 8002702:	d113      	bne.n	800272c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	021b      	lsls	r3, r3, #8
 800270c:	429a      	cmp	r2, r3
 800270e:	d005      	beq.n	800271c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	429a      	cmp	r2, r3
 800271a:	d107      	bne.n	800272c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	438a      	bics	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002730:	2380      	movs	r3, #128	; 0x80
 8002732:	019b      	lsls	r3, r3, #6
 8002734:	429a      	cmp	r2, r3
 8002736:	d110      	bne.n	800275a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	491a      	ldr	r1, [pc, #104]	; (80027ac <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002744:	400a      	ands	r2, r1
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0189      	lsls	r1, r1, #6
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2251      	movs	r2, #81	; 0x51
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2250      	movs	r2, #80	; 0x50
 8002766:	2100      	movs	r1, #0
 8002768:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e017      	b.n	800279e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3b01      	subs	r3, #1
 800277c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	4013      	ands	r3, r2
 8002788:	68ba      	ldr	r2, [r7, #8]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	425a      	negs	r2, r3
 800278e:	4153      	adcs	r3, r2
 8002790:	b2db      	uxtb	r3, r3
 8002792:	001a      	movs	r2, r3
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	429a      	cmp	r2, r3
 800279a:	d197      	bne.n	80026cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b008      	add	sp, #32
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	20000078 	.word	0x20000078
 80027ac:	ffffdfff 	.word	0xffffdfff

080027b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <SPI_EndRxTxTransaction+0x84>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	491d      	ldr	r1, [pc, #116]	; (8002838 <SPI_EndRxTxTransaction+0x88>)
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7fd fca0 	bl	8000108 <__udivsi3>
 80027c8:	0003      	movs	r3, r0
 80027ca:	001a      	movs	r2, r3
 80027cc:	0013      	movs	r3, r2
 80027ce:	015b      	lsls	r3, r3, #5
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	189b      	adds	r3, r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	2382      	movs	r3, #130	; 0x82
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d112      	bne.n	800280c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	0013      	movs	r3, r2
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	; 0x80
 80027f4:	f7ff ff4e 	bl	8002694 <SPI_WaitFlagStateUntilTimeout>
 80027f8:	1e03      	subs	r3, r0, #0
 80027fa:	d016      	beq.n	800282a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	2220      	movs	r2, #32
 8002802:	431a      	orrs	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e00f      	b.n	800282c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	3b01      	subs	r3, #1
 8002816:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	4013      	ands	r3, r2
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d0f2      	beq.n	800280c <SPI_EndRxTxTransaction+0x5c>
 8002826:	e000      	b.n	800282a <SPI_EndRxTxTransaction+0x7a>
        break;
 8002828:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b006      	add	sp, #24
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000078 	.word	0x20000078
 8002838:	016e3600 	.word	0x016e3600

0800283c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <SPI_CloseRxTx_ISR+0xe8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4937      	ldr	r1, [pc, #220]	; (8002928 <SPI_CloseRxTx_ISR+0xec>)
 800284a:	0018      	movs	r0, r3
 800284c:	f7fd fc5c 	bl	8000108 <__udivsi3>
 8002850:	0003      	movs	r3, r0
 8002852:	001a      	movs	r2, r3
 8002854:	2364      	movs	r3, #100	; 0x64
 8002856:	4353      	muls	r3, r2
 8002858:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800285a:	f7fe f96b 	bl	8000b34 <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	617b      	str	r3, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2120      	movs	r1, #32
 800286e:	438a      	bics	r2, r1
 8002870:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <SPI_CloseRxTx_ISR+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800287c:	2220      	movs	r2, #32
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002884:	e008      	b.n	8002898 <SPI_CloseRxTx_ISR+0x5c>
    }
    count--;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	3b01      	subs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2202      	movs	r2, #2
 8002894:	4013      	ands	r3, r2
 8002896:	d0ec      	beq.n	8002872 <SPI_CloseRxTx_ISR+0x36>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2164      	movs	r1, #100	; 0x64
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff ff86 	bl	80027b0 <SPI_EndRxTxTransaction>
 80028a4:	1e03      	subs	r3, r0, #0
 80028a6:	d005      	beq.n	80028b4 <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ac:	2220      	movs	r2, #32
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028bc:	2300      	movs	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d117      	bne.n	800290a <SPI_CloseRxTx_ISR+0xce>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2251      	movs	r2, #81	; 0x51
 80028de:	5c9b      	ldrb	r3, [r3, r2]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d108      	bne.n	80028f8 <SPI_CloseRxTx_ISR+0xbc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2251      	movs	r2, #81	; 0x51
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff fded 	bl	80024d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80028f6:	e010      	b.n	800291a <SPI_CloseRxTx_ISR+0xde>
        hspi->State = HAL_SPI_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2251      	movs	r2, #81	; 0x51
 80028fc:	2101      	movs	r1, #1
 80028fe:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f7fd ff84 	bl	8000810 <HAL_SPI_TxRxCpltCallback>
}
 8002908:	e007      	b.n	800291a <SPI_CloseRxTx_ISR+0xde>
      hspi->State = HAL_SPI_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2251      	movs	r2, #81	; 0x51
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0018      	movs	r0, r3
 8002916:	f7fd ff8f 	bl	8000838 <HAL_SPI_ErrorCallback>
}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b006      	add	sp, #24
 8002920:	bd80      	pop	{r7, pc}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	20000078 	.word	0x20000078
 8002928:	00005dc0 	.word	0x00005dc0

0800292c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e044      	b.n	80029c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2274      	movs	r2, #116	; 0x74
 800294a:	2100      	movs	r1, #0
 800294c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0018      	movs	r0, r3
 8002952:	f7fd fff1 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2224      	movs	r2, #36	; 0x24
 800295a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2101      	movs	r1, #1
 8002968:	438a      	bics	r2, r1
 800296a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 f830 	bl	80029d4 <UART_SetConfig>
 8002974:	0003      	movs	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	d101      	bne.n	800297e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e024      	b.n	80029c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fae1 	bl	8002f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	490d      	ldr	r1, [pc, #52]	; (80029d0 <HAL_UART_Init+0xa4>)
 800299a:	400a      	ands	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	212a      	movs	r1, #42	; 0x2a
 80029aa:	438a      	bics	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 fb79 	bl	80030b8 <UART_CheckIdleState>
 80029c6:	0003      	movs	r3, r0
}
 80029c8:	0018      	movs	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	b002      	add	sp, #8
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	ffffb7ff 	.word	0xffffb7ff

080029d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b08e      	sub	sp, #56	; 0x38
 80029d8:	af00      	add	r7, sp, #0
 80029da:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029dc:	231a      	movs	r3, #26
 80029de:	2218      	movs	r2, #24
 80029e0:	4694      	mov	ip, r2
 80029e2:	44bc      	add	ip, r7
 80029e4:	4463      	add	r3, ip
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	431a      	orrs	r2, r3
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4ab0      	ldr	r2, [pc, #704]	; (8002ccc <UART_SetConfig+0x2f8>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	4aac      	ldr	r2, [pc, #688]	; (8002cd0 <UART_SetConfig+0x2fc>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4aa6      	ldr	r2, [pc, #664]	; (8002cd4 <UART_SetConfig+0x300>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a46:	4313      	orrs	r3, r2
 8002a48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	4aa1      	ldr	r2, [pc, #644]	; (8002cd8 <UART_SetConfig+0x304>)
 8002a52:	4013      	ands	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a9d      	ldr	r2, [pc, #628]	; (8002cdc <UART_SetConfig+0x308>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d136      	bne.n	8002ad8 <UART_SetConfig+0x104>
 8002a6a:	4b9d      	ldr	r3, [pc, #628]	; (8002ce0 <UART_SetConfig+0x30c>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	2203      	movs	r2, #3
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d020      	beq.n	8002ab8 <UART_SetConfig+0xe4>
 8002a76:	d827      	bhi.n	8002ac8 <UART_SetConfig+0xf4>
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d00d      	beq.n	8002a98 <UART_SetConfig+0xc4>
 8002a7c:	d824      	bhi.n	8002ac8 <UART_SetConfig+0xf4>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <UART_SetConfig+0xb4>
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d010      	beq.n	8002aa8 <UART_SetConfig+0xd4>
 8002a86:	e01f      	b.n	8002ac8 <UART_SetConfig+0xf4>
 8002a88:	231b      	movs	r3, #27
 8002a8a:	2218      	movs	r2, #24
 8002a8c:	4694      	mov	ip, r2
 8002a8e:	44bc      	add	ip, r7
 8002a90:	4463      	add	r3, ip
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e0c5      	b.n	8002c24 <UART_SetConfig+0x250>
 8002a98:	231b      	movs	r3, #27
 8002a9a:	2218      	movs	r2, #24
 8002a9c:	4694      	mov	ip, r2
 8002a9e:	44bc      	add	ip, r7
 8002aa0:	4463      	add	r3, ip
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e0bd      	b.n	8002c24 <UART_SetConfig+0x250>
 8002aa8:	231b      	movs	r3, #27
 8002aaa:	2218      	movs	r2, #24
 8002aac:	4694      	mov	ip, r2
 8002aae:	44bc      	add	ip, r7
 8002ab0:	4463      	add	r3, ip
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	701a      	strb	r2, [r3, #0]
 8002ab6:	e0b5      	b.n	8002c24 <UART_SetConfig+0x250>
 8002ab8:	231b      	movs	r3, #27
 8002aba:	2218      	movs	r2, #24
 8002abc:	4694      	mov	ip, r2
 8002abe:	44bc      	add	ip, r7
 8002ac0:	4463      	add	r3, ip
 8002ac2:	2208      	movs	r2, #8
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	e0ad      	b.n	8002c24 <UART_SetConfig+0x250>
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2218      	movs	r2, #24
 8002acc:	4694      	mov	ip, r2
 8002ace:	44bc      	add	ip, r7
 8002ad0:	4463      	add	r3, ip
 8002ad2:	2210      	movs	r2, #16
 8002ad4:	701a      	strb	r2, [r3, #0]
 8002ad6:	e0a5      	b.n	8002c24 <UART_SetConfig+0x250>
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a81      	ldr	r2, [pc, #516]	; (8002ce4 <UART_SetConfig+0x310>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d136      	bne.n	8002b50 <UART_SetConfig+0x17c>
 8002ae2:	4b7f      	ldr	r3, [pc, #508]	; (8002ce0 <UART_SetConfig+0x30c>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	220c      	movs	r2, #12
 8002ae8:	4013      	ands	r3, r2
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d020      	beq.n	8002b30 <UART_SetConfig+0x15c>
 8002aee:	d827      	bhi.n	8002b40 <UART_SetConfig+0x16c>
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d00d      	beq.n	8002b10 <UART_SetConfig+0x13c>
 8002af4:	d824      	bhi.n	8002b40 <UART_SetConfig+0x16c>
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <UART_SetConfig+0x12c>
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d010      	beq.n	8002b20 <UART_SetConfig+0x14c>
 8002afe:	e01f      	b.n	8002b40 <UART_SetConfig+0x16c>
 8002b00:	231b      	movs	r3, #27
 8002b02:	2218      	movs	r2, #24
 8002b04:	4694      	mov	ip, r2
 8002b06:	44bc      	add	ip, r7
 8002b08:	4463      	add	r3, ip
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e089      	b.n	8002c24 <UART_SetConfig+0x250>
 8002b10:	231b      	movs	r3, #27
 8002b12:	2218      	movs	r2, #24
 8002b14:	4694      	mov	ip, r2
 8002b16:	44bc      	add	ip, r7
 8002b18:	4463      	add	r3, ip
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e081      	b.n	8002c24 <UART_SetConfig+0x250>
 8002b20:	231b      	movs	r3, #27
 8002b22:	2218      	movs	r2, #24
 8002b24:	4694      	mov	ip, r2
 8002b26:	44bc      	add	ip, r7
 8002b28:	4463      	add	r3, ip
 8002b2a:	2204      	movs	r2, #4
 8002b2c:	701a      	strb	r2, [r3, #0]
 8002b2e:	e079      	b.n	8002c24 <UART_SetConfig+0x250>
 8002b30:	231b      	movs	r3, #27
 8002b32:	2218      	movs	r2, #24
 8002b34:	4694      	mov	ip, r2
 8002b36:	44bc      	add	ip, r7
 8002b38:	4463      	add	r3, ip
 8002b3a:	2208      	movs	r2, #8
 8002b3c:	701a      	strb	r2, [r3, #0]
 8002b3e:	e071      	b.n	8002c24 <UART_SetConfig+0x250>
 8002b40:	231b      	movs	r3, #27
 8002b42:	2218      	movs	r2, #24
 8002b44:	4694      	mov	ip, r2
 8002b46:	44bc      	add	ip, r7
 8002b48:	4463      	add	r3, ip
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	e069      	b.n	8002c24 <UART_SetConfig+0x250>
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a64      	ldr	r2, [pc, #400]	; (8002ce8 <UART_SetConfig+0x314>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d107      	bne.n	8002b6a <UART_SetConfig+0x196>
 8002b5a:	231b      	movs	r3, #27
 8002b5c:	2218      	movs	r2, #24
 8002b5e:	4694      	mov	ip, r2
 8002b60:	44bc      	add	ip, r7
 8002b62:	4463      	add	r3, ip
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e05c      	b.n	8002c24 <UART_SetConfig+0x250>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a5f      	ldr	r2, [pc, #380]	; (8002cec <UART_SetConfig+0x318>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d107      	bne.n	8002b84 <UART_SetConfig+0x1b0>
 8002b74:	231b      	movs	r3, #27
 8002b76:	2218      	movs	r2, #24
 8002b78:	4694      	mov	ip, r2
 8002b7a:	44bc      	add	ip, r7
 8002b7c:	4463      	add	r3, ip
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	e04f      	b.n	8002c24 <UART_SetConfig+0x250>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a52      	ldr	r2, [pc, #328]	; (8002cd4 <UART_SetConfig+0x300>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d143      	bne.n	8002c16 <UART_SetConfig+0x242>
 8002b8e:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <UART_SetConfig+0x30c>)
 8002b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b92:	23c0      	movs	r3, #192	; 0xc0
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	4013      	ands	r3, r2
 8002b98:	22c0      	movs	r2, #192	; 0xc0
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d02a      	beq.n	8002bf6 <UART_SetConfig+0x222>
 8002ba0:	22c0      	movs	r2, #192	; 0xc0
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d82e      	bhi.n	8002c06 <UART_SetConfig+0x232>
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	0112      	lsls	r2, r2, #4
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d012      	beq.n	8002bd6 <UART_SetConfig+0x202>
 8002bb0:	2280      	movs	r2, #128	; 0x80
 8002bb2:	0112      	lsls	r2, r2, #4
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d826      	bhi.n	8002c06 <UART_SetConfig+0x232>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d004      	beq.n	8002bc6 <UART_SetConfig+0x1f2>
 8002bbc:	2280      	movs	r2, #128	; 0x80
 8002bbe:	00d2      	lsls	r2, r2, #3
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d010      	beq.n	8002be6 <UART_SetConfig+0x212>
 8002bc4:	e01f      	b.n	8002c06 <UART_SetConfig+0x232>
 8002bc6:	231b      	movs	r3, #27
 8002bc8:	2218      	movs	r2, #24
 8002bca:	4694      	mov	ip, r2
 8002bcc:	44bc      	add	ip, r7
 8002bce:	4463      	add	r3, ip
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
 8002bd4:	e026      	b.n	8002c24 <UART_SetConfig+0x250>
 8002bd6:	231b      	movs	r3, #27
 8002bd8:	2218      	movs	r2, #24
 8002bda:	4694      	mov	ip, r2
 8002bdc:	44bc      	add	ip, r7
 8002bde:	4463      	add	r3, ip
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]
 8002be4:	e01e      	b.n	8002c24 <UART_SetConfig+0x250>
 8002be6:	231b      	movs	r3, #27
 8002be8:	2218      	movs	r2, #24
 8002bea:	4694      	mov	ip, r2
 8002bec:	44bc      	add	ip, r7
 8002bee:	4463      	add	r3, ip
 8002bf0:	2204      	movs	r2, #4
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	e016      	b.n	8002c24 <UART_SetConfig+0x250>
 8002bf6:	231b      	movs	r3, #27
 8002bf8:	2218      	movs	r2, #24
 8002bfa:	4694      	mov	ip, r2
 8002bfc:	44bc      	add	ip, r7
 8002bfe:	4463      	add	r3, ip
 8002c00:	2208      	movs	r2, #8
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e00e      	b.n	8002c24 <UART_SetConfig+0x250>
 8002c06:	231b      	movs	r3, #27
 8002c08:	2218      	movs	r2, #24
 8002c0a:	4694      	mov	ip, r2
 8002c0c:	44bc      	add	ip, r7
 8002c0e:	4463      	add	r3, ip
 8002c10:	2210      	movs	r2, #16
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e006      	b.n	8002c24 <UART_SetConfig+0x250>
 8002c16:	231b      	movs	r3, #27
 8002c18:	2218      	movs	r2, #24
 8002c1a:	4694      	mov	ip, r2
 8002c1c:	44bc      	add	ip, r7
 8002c1e:	4463      	add	r3, ip
 8002c20:	2210      	movs	r2, #16
 8002c22:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a2a      	ldr	r2, [pc, #168]	; (8002cd4 <UART_SetConfig+0x300>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d000      	beq.n	8002c30 <UART_SetConfig+0x25c>
 8002c2e:	e09e      	b.n	8002d6e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c30:	231b      	movs	r3, #27
 8002c32:	2218      	movs	r2, #24
 8002c34:	4694      	mov	ip, r2
 8002c36:	44bc      	add	ip, r7
 8002c38:	4463      	add	r3, ip
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d01d      	beq.n	8002c7c <UART_SetConfig+0x2a8>
 8002c40:	dc20      	bgt.n	8002c84 <UART_SetConfig+0x2b0>
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d015      	beq.n	8002c72 <UART_SetConfig+0x29e>
 8002c46:	dc1d      	bgt.n	8002c84 <UART_SetConfig+0x2b0>
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <UART_SetConfig+0x27e>
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d005      	beq.n	8002c5c <UART_SetConfig+0x288>
 8002c50:	e018      	b.n	8002c84 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c52:	f7ff f863 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8002c56:	0003      	movs	r3, r0
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c5a:	e01d      	b.n	8002c98 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c5c:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <UART_SetConfig+0x30c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2210      	movs	r2, #16
 8002c62:	4013      	ands	r3, r2
 8002c64:	d002      	beq.n	8002c6c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002c66:	4b22      	ldr	r3, [pc, #136]	; (8002cf0 <UART_SetConfig+0x31c>)
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002c6a:	e015      	b.n	8002c98 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <UART_SetConfig+0x320>)
 8002c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c70:	e012      	b.n	8002c98 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c72:	f7fe ffa3 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8002c76:	0003      	movs	r3, r0
 8002c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c7a:	e00d      	b.n	8002c98 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c7c:	2380      	movs	r3, #128	; 0x80
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c82:	e009      	b.n	8002c98 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c88:	231a      	movs	r3, #26
 8002c8a:	2218      	movs	r2, #24
 8002c8c:	4694      	mov	ip, r2
 8002c8e:	44bc      	add	ip, r7
 8002c90:	4463      	add	r3, ip
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
        break;
 8002c96:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d100      	bne.n	8002ca0 <UART_SetConfig+0x2cc>
 8002c9e:	e13c      	b.n	8002f1a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	0013      	movs	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	189b      	adds	r3, r3, r2
 8002caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d305      	bcc.n	8002cbc <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d91d      	bls.n	8002cf8 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002cbc:	231a      	movs	r3, #26
 8002cbe:	2218      	movs	r2, #24
 8002cc0:	4694      	mov	ip, r2
 8002cc2:	44bc      	add	ip, r7
 8002cc4:	4463      	add	r3, ip
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
 8002cca:	e126      	b.n	8002f1a <UART_SetConfig+0x546>
 8002ccc:	efff69f3 	.word	0xefff69f3
 8002cd0:	ffffcfff 	.word	0xffffcfff
 8002cd4:	40004800 	.word	0x40004800
 8002cd8:	fffff4ff 	.word	0xfffff4ff
 8002cdc:	40013800 	.word	0x40013800
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40004400 	.word	0x40004400
 8002ce8:	40004c00 	.word	0x40004c00
 8002cec:	40005000 	.word	0x40005000
 8002cf0:	003d0900 	.word	0x003d0900
 8002cf4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	613b      	str	r3, [r7, #16]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	6939      	ldr	r1, [r7, #16]
 8002d02:	697a      	ldr	r2, [r7, #20]
 8002d04:	000b      	movs	r3, r1
 8002d06:	0e1b      	lsrs	r3, r3, #24
 8002d08:	0010      	movs	r0, r2
 8002d0a:	0205      	lsls	r5, r0, #8
 8002d0c:	431d      	orrs	r5, r3
 8002d0e:	000b      	movs	r3, r1
 8002d10:	021c      	lsls	r4, r3, #8
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68b8      	ldr	r0, [r7, #8]
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	1900      	adds	r0, r0, r4
 8002d24:	4169      	adcs	r1, r5
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f7fd fa74 	bl	8000220 <__aeabi_uldivmod>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	0013      	movs	r3, r2
 8002d3e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d42:	23c0      	movs	r3, #192	; 0xc0
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d309      	bcc.n	8002d5e <UART_SetConfig+0x38a>
 8002d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	035b      	lsls	r3, r3, #13
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d204      	bcs.n	8002d5e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	e0dd      	b.n	8002f1a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002d5e:	231a      	movs	r3, #26
 8002d60:	2218      	movs	r2, #24
 8002d62:	4694      	mov	ip, r2
 8002d64:	44bc      	add	ip, r7
 8002d66:	4463      	add	r3, ip
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e0d5      	b.n	8002f1a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	69da      	ldr	r2, [r3, #28]
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	021b      	lsls	r3, r3, #8
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d000      	beq.n	8002d7c <UART_SetConfig+0x3a8>
 8002d7a:	e074      	b.n	8002e66 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002d7c:	231b      	movs	r3, #27
 8002d7e:	2218      	movs	r2, #24
 8002d80:	4694      	mov	ip, r2
 8002d82:	44bc      	add	ip, r7
 8002d84:	4463      	add	r3, ip
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d822      	bhi.n	8002dd2 <UART_SetConfig+0x3fe>
 8002d8c:	009a      	lsls	r2, r3, #2
 8002d8e:	4b6b      	ldr	r3, [pc, #428]	; (8002f3c <UART_SetConfig+0x568>)
 8002d90:	18d3      	adds	r3, r2, r3
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d96:	f7fe ffc1 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d9e:	e022      	b.n	8002de6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002da0:	f7fe ffd2 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 8002da4:	0003      	movs	r3, r0
 8002da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002da8:	e01d      	b.n	8002de6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <UART_SetConfig+0x56c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2210      	movs	r2, #16
 8002db0:	4013      	ands	r3, r2
 8002db2:	d002      	beq.n	8002dba <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002db4:	4b63      	ldr	r3, [pc, #396]	; (8002f44 <UART_SetConfig+0x570>)
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002db8:	e015      	b.n	8002de6 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002dba:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <UART_SetConfig+0x574>)
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dbe:	e012      	b.n	8002de6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc0:	f7fe fefc 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dc8:	e00d      	b.n	8002de6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	021b      	lsls	r3, r3, #8
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dd0:	e009      	b.n	8002de6 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002dd6:	231a      	movs	r3, #26
 8002dd8:	2218      	movs	r2, #24
 8002dda:	4694      	mov	ip, r2
 8002ddc:	44bc      	add	ip, r7
 8002dde:	4463      	add	r3, ip
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
        break;
 8002de4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d100      	bne.n	8002dee <UART_SetConfig+0x41a>
 8002dec:	e095      	b.n	8002f1a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df0:	005a      	lsls	r2, r3, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	18d2      	adds	r2, r2, r3
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	0019      	movs	r1, r3
 8002e00:	0010      	movs	r0, r2
 8002e02:	f7fd f981 	bl	8000108 <__udivsi3>
 8002e06:	0003      	movs	r3, r0
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d921      	bls.n	8002e56 <UART_SetConfig+0x482>
 8002e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e14:	2380      	movs	r3, #128	; 0x80
 8002e16:	025b      	lsls	r3, r3, #9
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d21c      	bcs.n	8002e56 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	200e      	movs	r0, #14
 8002e22:	2418      	movs	r4, #24
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	181b      	adds	r3, r3, r0
 8002e28:	210f      	movs	r1, #15
 8002e2a:	438a      	bics	r2, r1
 8002e2c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e30:	085b      	lsrs	r3, r3, #1
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2207      	movs	r2, #7
 8002e36:	4013      	ands	r3, r2
 8002e38:	b299      	uxth	r1, r3
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	181b      	adds	r3, r3, r0
 8002e3e:	193a      	adds	r2, r7, r4
 8002e40:	1812      	adds	r2, r2, r0
 8002e42:	8812      	ldrh	r2, [r2, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	193a      	adds	r2, r7, r4
 8002e4e:	1812      	adds	r2, r2, r0
 8002e50:	8812      	ldrh	r2, [r2, #0]
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	e061      	b.n	8002f1a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002e56:	231a      	movs	r3, #26
 8002e58:	2218      	movs	r2, #24
 8002e5a:	4694      	mov	ip, r2
 8002e5c:	44bc      	add	ip, r7
 8002e5e:	4463      	add	r3, ip
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]
 8002e64:	e059      	b.n	8002f1a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e66:	231b      	movs	r3, #27
 8002e68:	2218      	movs	r2, #24
 8002e6a:	4694      	mov	ip, r2
 8002e6c:	44bc      	add	ip, r7
 8002e6e:	4463      	add	r3, ip
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d822      	bhi.n	8002ebc <UART_SetConfig+0x4e8>
 8002e76:	009a      	lsls	r2, r3, #2
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <UART_SetConfig+0x578>)
 8002e7a:	18d3      	adds	r3, r2, r3
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e80:	f7fe ff4c 	bl	8001d1c <HAL_RCC_GetPCLK1Freq>
 8002e84:	0003      	movs	r3, r0
 8002e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e88:	e022      	b.n	8002ed0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e8a:	f7fe ff5d 	bl	8001d48 <HAL_RCC_GetPCLK2Freq>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e92:	e01d      	b.n	8002ed0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e94:	4b2a      	ldr	r3, [pc, #168]	; (8002f40 <UART_SetConfig+0x56c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2210      	movs	r2, #16
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	d002      	beq.n	8002ea4 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e9e:	4b29      	ldr	r3, [pc, #164]	; (8002f44 <UART_SetConfig+0x570>)
 8002ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ea2:	e015      	b.n	8002ed0 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <UART_SetConfig+0x574>)
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ea8:	e012      	b.n	8002ed0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eaa:	f7fe fe87 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eb2:	e00d      	b.n	8002ed0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002eba:	e009      	b.n	8002ed0 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ec0:	231a      	movs	r3, #26
 8002ec2:	2218      	movs	r2, #24
 8002ec4:	4694      	mov	ip, r2
 8002ec6:	44bc      	add	ip, r7
 8002ec8:	4463      	add	r3, ip
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
        break;
 8002ece:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d021      	beq.n	8002f1a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	085a      	lsrs	r2, r3, #1
 8002edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ede:	18d2      	adds	r2, r2, r3
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	0010      	movs	r0, r2
 8002ee8:	f7fd f90e 	bl	8000108 <__udivsi3>
 8002eec:	0003      	movs	r3, r0
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	2b0f      	cmp	r3, #15
 8002ef6:	d909      	bls.n	8002f0c <UART_SetConfig+0x538>
 8002ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	025b      	lsls	r3, r3, #9
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d204      	bcs.n	8002f0c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f08:	60da      	str	r2, [r3, #12]
 8002f0a:	e006      	b.n	8002f1a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002f0c:	231a      	movs	r3, #26
 8002f0e:	2218      	movs	r2, #24
 8002f10:	4694      	mov	ip, r2
 8002f12:	44bc      	add	ip, r7
 8002f14:	4463      	add	r3, ip
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2200      	movs	r2, #0
 8002f24:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f26:	231a      	movs	r3, #26
 8002f28:	2218      	movs	r2, #24
 8002f2a:	4694      	mov	ip, r2
 8002f2c:	44bc      	add	ip, r7
 8002f2e:	4463      	add	r3, ip
 8002f30:	781b      	ldrb	r3, [r3, #0]
}
 8002f32:	0018      	movs	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	b00e      	add	sp, #56	; 0x38
 8002f38:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	08003364 	.word	0x08003364
 8002f40:	40021000 	.word	0x40021000
 8002f44:	003d0900 	.word	0x003d0900
 8002f48:	00f42400 	.word	0x00f42400
 8002f4c:	08003388 	.word	0x08003388

08002f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d00b      	beq.n	8002f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <UART_AdvFeatureConfig+0x144>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	0019      	movs	r1, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2202      	movs	r2, #2
 8002f80:	4013      	ands	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	4a43      	ldr	r2, [pc, #268]	; (8003098 <UART_AdvFeatureConfig+0x148>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	0019      	movs	r1, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d00b      	beq.n	8002fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	4a3b      	ldr	r2, [pc, #236]	; (800309c <UART_AdvFeatureConfig+0x14c>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	0019      	movs	r1, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <UART_AdvFeatureConfig+0x150>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	0019      	movs	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d00b      	beq.n	8003002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a2c      	ldr	r2, [pc, #176]	; (80030a4 <UART_AdvFeatureConfig+0x154>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2220      	movs	r2, #32
 8003008:	4013      	ands	r3, r2
 800300a:	d00b      	beq.n	8003024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	4a25      	ldr	r2, [pc, #148]	; (80030a8 <UART_AdvFeatureConfig+0x158>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2240      	movs	r2, #64	; 0x40
 800302a:	4013      	ands	r3, r2
 800302c:	d01d      	beq.n	800306a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <UART_AdvFeatureConfig+0x15c>)
 8003036:	4013      	ands	r3, r2
 8003038:	0019      	movs	r1, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	035b      	lsls	r3, r3, #13
 800304e:	429a      	cmp	r2, r3
 8003050:	d10b      	bne.n	800306a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <UART_AdvFeatureConfig+0x160>)
 800305a:	4013      	ands	r3, r2
 800305c:	0019      	movs	r1, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2280      	movs	r2, #128	; 0x80
 8003070:	4013      	ands	r3, r2
 8003072:	d00b      	beq.n	800308c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <UART_AdvFeatureConfig+0x164>)
 800307c:	4013      	ands	r3, r2
 800307e:	0019      	movs	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  }
}
 800308c:	46c0      	nop			; (mov r8, r8)
 800308e:	46bd      	mov	sp, r7
 8003090:	b002      	add	sp, #8
 8003092:	bd80      	pop	{r7, pc}
 8003094:	fffdffff 	.word	0xfffdffff
 8003098:	fffeffff 	.word	0xfffeffff
 800309c:	fffbffff 	.word	0xfffbffff
 80030a0:	ffff7fff 	.word	0xffff7fff
 80030a4:	ffffefff 	.word	0xffffefff
 80030a8:	ffffdfff 	.word	0xffffdfff
 80030ac:	ffefffff 	.word	0xffefffff
 80030b0:	ff9fffff 	.word	0xff9fffff
 80030b4:	fff7ffff 	.word	0xfff7ffff

080030b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af02      	add	r7, sp, #8
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	2100      	movs	r1, #0
 80030c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030c8:	f7fd fd34 	bl	8000b34 <HAL_GetTick>
 80030cc:	0003      	movs	r3, r0
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2208      	movs	r2, #8
 80030d8:	4013      	ands	r3, r2
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d10c      	bne.n	80030f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2280      	movs	r2, #128	; 0x80
 80030e2:	0391      	lsls	r1, r2, #14
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <UART_CheckIdleState+0x8c>)
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f000 f82c 	bl	8003148 <UART_WaitOnFlagUntilTimeout>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d001      	beq.n	80030f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e021      	b.n	800313c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2204      	movs	r2, #4
 8003100:	4013      	ands	r3, r2
 8003102:	2b04      	cmp	r3, #4
 8003104:	d10c      	bne.n	8003120 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	03d1      	lsls	r1, r2, #15
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4a0d      	ldr	r2, [pc, #52]	; (8003144 <UART_CheckIdleState+0x8c>)
 8003110:	9200      	str	r2, [sp, #0]
 8003112:	2200      	movs	r2, #0
 8003114:	f000 f818 	bl	8003148 <UART_WaitOnFlagUntilTimeout>
 8003118:	1e03      	subs	r3, r0, #0
 800311a:	d001      	beq.n	8003120 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e00d      	b.n	800313c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2220      	movs	r2, #32
 800312a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2274      	movs	r2, #116	; 0x74
 8003136:	2100      	movs	r1, #0
 8003138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	0018      	movs	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	b004      	add	sp, #16
 8003142:	bd80      	pop	{r7, pc}
 8003144:	01ffffff 	.word	0x01ffffff

08003148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b094      	sub	sp, #80	; 0x50
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	603b      	str	r3, [r7, #0]
 8003154:	1dfb      	adds	r3, r7, #7
 8003156:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003158:	e0a3      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800315c:	3301      	adds	r3, #1
 800315e:	d100      	bne.n	8003162 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003160:	e09f      	b.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003162:	f7fd fce7 	bl	8000b34 <HAL_GetTick>
 8003166:	0002      	movs	r2, r0
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800316e:	429a      	cmp	r2, r3
 8003170:	d302      	bcc.n	8003178 <UART_WaitOnFlagUntilTimeout+0x30>
 8003172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003174:	2b00      	cmp	r3, #0
 8003176:	d13d      	bne.n	80031f4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003178:	f3ef 8310 	mrs	r3, PRIMASK
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800317e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003180:	647b      	str	r3, [r7, #68]	; 0x44
 8003182:	2301      	movs	r3, #1
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003188:	f383 8810 	msr	PRIMASK, r3
}
 800318c:	46c0      	nop			; (mov r8, r8)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	494c      	ldr	r1, [pc, #304]	; (80032cc <UART_WaitOnFlagUntilTimeout+0x184>)
 800319a:	400a      	ands	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	f383 8810 	msr	PRIMASK, r3
}
 80031a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031aa:	f3ef 8310 	mrs	r3, PRIMASK
 80031ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
 80031b4:	2301      	movs	r3, #1
 80031b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ba:	f383 8810 	msr	PRIMASK, r3
}
 80031be:	46c0      	nop			; (mov r8, r8)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2101      	movs	r1, #1
 80031cc:	438a      	bics	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]
 80031d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d6:	f383 8810 	msr	PRIMASK, r3
}
 80031da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2220      	movs	r2, #32
 80031e0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2274      	movs	r2, #116	; 0x74
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e067      	b.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2204      	movs	r2, #4
 80031fc:	4013      	ands	r3, r2
 80031fe:	d050      	beq.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	2380      	movs	r3, #128	; 0x80
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	401a      	ands	r2, r3
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	429a      	cmp	r2, r3
 8003212:	d146      	bne.n	80032a2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2280      	movs	r2, #128	; 0x80
 800321a:	0112      	lsls	r2, r2, #4
 800321c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321e:	f3ef 8310 	mrs	r3, PRIMASK
 8003222:	613b      	str	r3, [r7, #16]
  return(result);
 8003224:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003228:	2301      	movs	r3, #1
 800322a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4923      	ldr	r1, [pc, #140]	; (80032cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003240:	400a      	ands	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003246:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003250:	f3ef 8310 	mrs	r3, PRIMASK
 8003254:	61fb      	str	r3, [r7, #28]
  return(result);
 8003256:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003258:	64bb      	str	r3, [r7, #72]	; 0x48
 800325a:	2301      	movs	r3, #1
 800325c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	438a      	bics	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2280      	movs	r2, #128	; 0x80
 8003292:	2120      	movs	r1, #32
 8003294:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2274      	movs	r2, #116	; 0x74
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e010      	b.n	80032c4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69db      	ldr	r3, [r3, #28]
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	4013      	ands	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	425a      	negs	r2, r3
 80032b2:	4153      	adcs	r3, r2
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	001a      	movs	r2, r3
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d100      	bne.n	80032c2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80032c0:	e74b      	b.n	800315a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	b014      	add	sp, #80	; 0x50
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	fffffe5f 	.word	0xfffffe5f

080032d0 <__libc_init_array>:
 80032d0:	b570      	push	{r4, r5, r6, lr}
 80032d2:	2600      	movs	r6, #0
 80032d4:	4d0c      	ldr	r5, [pc, #48]	; (8003308 <__libc_init_array+0x38>)
 80032d6:	4c0d      	ldr	r4, [pc, #52]	; (800330c <__libc_init_array+0x3c>)
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	42a6      	cmp	r6, r4
 80032de:	d109      	bne.n	80032f4 <__libc_init_array+0x24>
 80032e0:	2600      	movs	r6, #0
 80032e2:	f000 f821 	bl	8003328 <_init>
 80032e6:	4d0a      	ldr	r5, [pc, #40]	; (8003310 <__libc_init_array+0x40>)
 80032e8:	4c0a      	ldr	r4, [pc, #40]	; (8003314 <__libc_init_array+0x44>)
 80032ea:	1b64      	subs	r4, r4, r5
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	42a6      	cmp	r6, r4
 80032f0:	d105      	bne.n	80032fe <__libc_init_array+0x2e>
 80032f2:	bd70      	pop	{r4, r5, r6, pc}
 80032f4:	00b3      	lsls	r3, r6, #2
 80032f6:	58eb      	ldr	r3, [r5, r3]
 80032f8:	4798      	blx	r3
 80032fa:	3601      	adds	r6, #1
 80032fc:	e7ee      	b.n	80032dc <__libc_init_array+0xc>
 80032fe:	00b3      	lsls	r3, r6, #2
 8003300:	58eb      	ldr	r3, [r5, r3]
 8003302:	4798      	blx	r3
 8003304:	3601      	adds	r6, #1
 8003306:	e7f2      	b.n	80032ee <__libc_init_array+0x1e>
 8003308:	080033b4 	.word	0x080033b4
 800330c:	080033b4 	.word	0x080033b4
 8003310:	080033b4 	.word	0x080033b4
 8003314:	080033b8 	.word	0x080033b8

08003318 <memset>:
 8003318:	0003      	movs	r3, r0
 800331a:	1882      	adds	r2, r0, r2
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	7019      	strb	r1, [r3, #0]
 8003324:	3301      	adds	r3, #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <_init>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr

08003334 <_fini>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr
