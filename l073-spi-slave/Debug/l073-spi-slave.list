
l073-spi-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003214  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080032d4  080032d4  000132d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003340  08003340  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003340  08003340  00013340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003348  08003348  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003348  08003348  00013348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800334c  0800334c  0001334c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000084  080033d4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080033d4  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001974  00000000  00000000  0002b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c36  00000000  00000000  0002dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1ef  00000000  00000000  00041ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b255  00000000  00000000  0004ccc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7f1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000c7f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080032bc 	.word	0x080032bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	080032bc 	.word	0x080032bc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <Buffercmp>:
 * @param  BufferLength: buffer's length
 * @retval 0  : pBuffer1 identical to pBuffer2
 *         >0 : pBuffer1 differs from pBuffer2
 */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	1dbb      	adds	r3, r7, #6
 80004a8:	801a      	strh	r2, [r3, #0]
	while (BufferLength--)
 80004aa:	e00e      	b.n	80004ca <Buffercmp+0x2e>
	{
		if((*pBuffer1) != *pBuffer2)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d002      	beq.n	80004be <Buffercmp+0x22>
		{
			return BufferLength;
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	e00d      	b.n	80004da <Buffercmp+0x3e>
		}
		pBuffer1++;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3301      	adds	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
		pBuffer2++;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
	while (BufferLength--)
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	1dba      	adds	r2, r7, #6
 80004d0:	1e59      	subs	r1, r3, #1
 80004d2:	8011      	strh	r1, [r2, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d1e9      	bne.n	80004ac <Buffercmp+0x10>
	}

	return 0;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	0018      	movs	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e8:	f000 faa6 	bl	8000a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ec:	f000 f832 	bl	8000554 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f0:	f000 f906 	bl	8000700 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004f4:	f000 f8d4 	bl	80006a0 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 80004f8:	f000 f89e 	bl	8000638 <MX_SPI2_Init>
#endif /* MASTER_BOARD */

	/*##-2- Start the Full Duplex Communication process ########################*/
	/* While the SPI in TransmitReceive process, user can transmit data through
     "aTxBuffer" buffer & receive data through "aRxBuffer" */
	if(HAL_SPI_TransmitReceive_IT(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <main+0x60>)
 80004fe:	4912      	ldr	r1, [pc, #72]	; (8000548 <main+0x64>)
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <main+0x68>)
 8000502:	2375      	movs	r3, #117	; 0x75
 8000504:	f001 fe08 	bl	8002118 <HAL_SPI_TransmitReceive_IT>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <main+0x2c>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 800050c:	f000 f98a 	bl	8000824 <Error_Handler>
	/*  Before starting a new communication transfer, you must wait the callback call
      to get the transfer complete confirmation or an error detection.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
	while (wTransferState == TRANSFER_WAIT)
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <main+0x6c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0fb      	beq.n	8000512 <main+0x2e>
	{
	}

	switch(wTransferState)
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <main+0x6c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d10a      	bne.n	8000538 <main+0x54>
	{
	case TRANSFER_COMPLETE :
		/*##-4- Compare the sent and received buffers ##############################*/
		if(Buffercmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 8000522:	4908      	ldr	r1, [pc, #32]	; (8000544 <main+0x60>)
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <main+0x64>)
 8000526:	2275      	movs	r2, #117	; 0x75
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff ffb7 	bl	800049c <Buffercmp>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d005      	beq.n	800053e <main+0x5a>
		{
			/* Processing Error */
			Error_Handler();
 8000532:	f000 f977 	bl	8000824 <Error_Handler>
		}
		break;
 8000536:	e002      	b.n	800053e <main+0x5a>
	default :
		Error_Handler();
 8000538:	f000 f974 	bl	8000824 <Error_Handler>
		break;
 800053c:	e000      	b.n	8000540 <main+0x5c>
		break;
 800053e:	46c0      	nop			; (mov r8, r8)

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x5c>
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	200000fc 	.word	0x200000fc
 8000548:	20000000 	.word	0x20000000
 800054c:	200000a4 	.word	0x200000a4
 8000550:	200000a0 	.word	0x200000a0

08000554 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b09f      	sub	sp, #124	; 0x7c
 8000558:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	2440      	movs	r4, #64	; 0x40
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2338      	movs	r3, #56	; 0x38
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 fea1 	bl	80032ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	232c      	movs	r3, #44	; 0x2c
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	0018      	movs	r0, r3
 8000570:	2314      	movs	r3, #20
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f002 fe99 	bl	80032ac <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	2328      	movs	r3, #40	; 0x28
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f002 fe92 	bl	80032ac <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xdc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <SystemClock_Config+0xe0>)
 800058e:	401a      	ands	r2, r3
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xdc>)
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0109      	lsls	r1, r1, #4
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	0021      	movs	r1, r4
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2202      	movs	r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2210      	movs	r2, #16
 80005ac:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2202      	movs	r2, #2
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	02d2      	lsls	r2, r2, #11
 80005c0:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	03d2      	lsls	r2, r2, #15
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fda3 	bl	8001118 <HAL_RCC_OscConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x86>
	{
		Error_Handler();
 80005d6:	f000 f925 	bl	8000824 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	212c      	movs	r1, #44	; 0x2c
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	220f      	movs	r2, #15
 80005e0:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2203      	movs	r2, #3
 80005e6:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2101      	movs	r1, #1
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 f95e 	bl	80018c0 <HAL_RCC_ClockConfig>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8000608:	f000 f90c 	bl	8000824 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2202      	movs	r2, #2
 8000610:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	0018      	movs	r0, r3
 800061c:	f001 fb74 	bl	8001d08 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000624:	f000 f8fe 	bl	8000824 <Error_Handler>
	}
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b01f      	add	sp, #124	; 0x7c
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40007000 	.word	0x40007000
 8000634:	ffffe7ff 	.word	0xffffe7ff

08000638 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_SPI2_Init+0x60>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_SPI2_Init+0x64>)
 8000640:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_SPI2_Init+0x60>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_SPI2_Init+0x60>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_SPI2_Init+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_SPI2_Init+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_SPI2_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_SPI2_Init+0x60>)
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_SPI2_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_SPI2_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_SPI2_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_SPI2_Init+0x60>)
 800067c:	2207      	movs	r2, #7
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <MX_SPI2_Init+0x60>)
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fcb4 	bl	8001ff0 <HAL_SPI_Init>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_SPI2_Init+0x58>
	{
		Error_Handler();
 800068c:	f000 f8ca 	bl	8000824 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	200000a4 	.word	0x200000a4
 800069c:	40003800 	.word	0x40003800

080006a0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART2_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ac:	22e1      	movs	r2, #225	; 0xe1
 80006ae:	0252      	lsls	r2, r2, #9
 80006b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 f8eb 	bl	80028c0 <HAL_UART_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80006ee:	f000 f899 	bl	8000824 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000174 	.word	0x20000174
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	2414      	movs	r4, #20
 8000708:	193b      	adds	r3, r7, r4
 800070a:	0018      	movs	r0, r3
 800070c:	2314      	movs	r3, #20
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f002 fdcb 	bl	80032ac <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_GPIO_Init+0xd8>)
 800071c:	2104      	movs	r1, #4
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2204      	movs	r2, #4
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	430a      	orrs	r2, r1
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_GPIO_Init+0xd8>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	4013      	ands	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_GPIO_Init+0xd8>)
 800074c:	2101      	movs	r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	2201      	movs	r2, #1
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000764:	2102      	movs	r1, #2
 8000766:	430a      	orrs	r2, r1
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_GPIO_Init+0xd8>)
 800076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076e:	2202      	movs	r2, #2
 8000770:	4013      	ands	r3, r2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fc92 	bl	80010a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	0192      	lsls	r2, r2, #6
 800078a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2284      	movs	r2, #132	; 0x84
 8000790:	0392      	lsls	r2, r2, #14
 8000792:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	193b      	adds	r3, r7, r4
 800079c:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <MX_GPIO_Init+0xdc>)
 800079e:	0019      	movs	r1, r3
 80007a0:	0010      	movs	r0, r2
 80007a2:	f000 fb03 	bl	8000dac <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2220      	movs	r2, #32
 80007ac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2201      	movs	r2, #1
 80007b2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	187a      	adds	r2, r7, r1
 80007c2:	23a0      	movs	r3, #160	; 0xa0
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 faef 	bl	8000dac <HAL_GPIO_Init>

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b00b      	add	sp, #44	; 0x2c
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000
 80007dc:	50000800 	.word	0x50000800

080007e0 <HAL_SPI_TxRxCpltCallback>:
 * @note   This example shows a simple way to report end of Interrupt TxRx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	/* Turn LED on: Transfer in transmission/reception process is correct */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2201      	movs	r2, #1
 80007ee:	2120      	movs	r1, #32
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fc59 	bl	80010a8 <HAL_GPIO_WritePin>
	wTransferState = TRANSFER_COMPLETE;
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_SPI_TxRxCpltCallback+0x24>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000a0 	.word	0x200000a0

08000808 <HAL_SPI_ErrorCallback>:
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_SPI_ErrorCallback+0x18>)
 8000812:	2202      	movs	r2, #2
 8000814:	601a      	str	r2, [r3, #0]
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	200000a0 	.word	0x200000a0

08000824 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	46c0      	nop			; (mov r8, r8)
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
	{
		/* Toggle LED2 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2120      	movs	r1, #32
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fc55 	bl	80010e2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000838:	23fa      	movs	r3, #250	; 0xfa
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	0018      	movs	r0, r3
 800083e:	f000 f96b 	bl	8000b18 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000842:	e7f3      	b.n	800082c <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_MspInit+0x24>)
 800084a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x24>)
 800084e:	2101      	movs	r1, #1
 8000850:	430a      	orrs	r2, r1
 8000852:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <HAL_MspInit+0x24>)
 8000856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_MspInit+0x24>)
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	0549      	lsls	r1, r1, #21
 800085e:	430a      	orrs	r2, r1
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	240c      	movs	r4, #12
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	2314      	movs	r3, #20
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f002 fd14 	bl	80032ac <memset>
  if(hspi->Instance==SPI2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <HAL_SPI_MspInit+0x90>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d131      	bne.n	80008f2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_SPI_MspInit+0x94>)
 8000890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_SPI_MspInit+0x94>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	01c9      	lsls	r1, r1, #7
 8000898:	430a      	orrs	r2, r1
 800089a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_SPI_MspInit+0x94>)
 800089e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_SPI_MspInit+0x94>)
 80008a2:	2102      	movs	r1, #2
 80008a4:	430a      	orrs	r2, r1
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_SPI_MspInit+0x94>)
 80008aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ac:	2202      	movs	r2, #2
 80008ae:	4013      	ands	r3, r2
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	22e0      	movs	r2, #224	; 0xe0
 80008b8:	0212      	lsls	r2, r2, #8
 80008ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	0021      	movs	r1, r4
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2202      	movs	r2, #2
 80008c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2203      	movs	r2, #3
 80008ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_SPI_MspInit+0x98>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f000 fa65 	bl	8000dac <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	201a      	movs	r0, #26
 80008e8:	f000 f9e6 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008ec:	201a      	movs	r0, #26
 80008ee:	f000 f9f8 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b009      	add	sp, #36	; 0x24
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40003800 	.word	0x40003800
 8000900:	40021000 	.word	0x40021000
 8000904:	50000400 	.word	0x50000400

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	240c      	movs	r4, #12
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	2314      	movs	r3, #20
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f002 fcc6 	bl	80032ac <memset>
  if(huart->Instance==USART2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a18      	ldr	r2, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x80>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d129      	bne.n	800097e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_UART_MspInit+0x84>)
 800092c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_UART_MspInit+0x84>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	0289      	lsls	r1, r1, #10
 8000934:	430a      	orrs	r2, r1
 8000936:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_UART_MspInit+0x84>)
 800093a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_UART_MspInit+0x84>)
 800093e:	2101      	movs	r1, #1
 8000940:	430a      	orrs	r2, r1
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_UART_MspInit+0x84>)
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	2201      	movs	r2, #1
 800094a:	4013      	ands	r3, r2
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	220c      	movs	r2, #12
 8000956:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2202      	movs	r2, #2
 800095c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2203      	movs	r2, #3
 8000968:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2204      	movs	r2, #4
 800096e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	187a      	adds	r2, r7, r1
 8000972:	23a0      	movs	r3, #160	; 0xa0
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fa17 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b009      	add	sp, #36	; 0x24
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40004400 	.word	0x40004400
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f894 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <SPI2_IRQHandler+0x14>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fc4e 	bl	8002268 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	200000a4 	.word	0x200000a4

080009d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a0e:	f7ff ffe3 	bl	80009d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a12:	f002 fc27 	bl	8003264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd65 	bl	80004e4 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
   ldr   r0, =_estack
 8000a1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000a28:	08003350 	.word	0x08003350
  ldr r2, =_sbss
 8000a2c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000a30:	200001fc 	.word	0x200001fc

08000a34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_COMP_IRQHandler>
	...

08000a38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x3c>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Init+0x3c>)
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f811 	bl	8000a78 <HAL_InitTick>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e001      	b.n	8000a66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a62:	f7ff feef 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x60>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	23fa      	movs	r3, #250	; 0xfa
 8000a8c:	0098      	lsls	r0, r3, #2
 8000a8e:	f7ff fb3b 	bl	8000108 <__udivsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	0019      	movs	r1, r3
 8000a96:	0020      	movs	r0, r4
 8000a98:	f7ff fb36 	bl	8000108 <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f92f 	bl	8000d02 <HAL_SYSTICK_Config>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e00f      	b.n	8000acc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d80b      	bhi.n	8000aca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f8fc 	bl	8000cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_InitTick+0x64>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000078 	.word	0x20000078
 8000ad8:	20000080 	.word	0x20000080
 8000adc:	2000007c 	.word	0x2000007c

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000080 	.word	0x20000080
 8000b00:	200001f8 	.word	0x200001f8

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	200001f8 	.word	0x200001f8

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	0003      	movs	r3, r0
 8000b26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001a      	movs	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	0002      	movs	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b004      	add	sp, #16
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000080 	.word	0x20000080

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b7f      	cmp	r3, #127	; 0x7f
 8000b72:	d809      	bhi.n	8000b88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	231f      	movs	r3, #31
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_EnableIRQ+0x30>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	4091      	lsls	r1, r2
 8000b84:	000a      	movs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
  }
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba8:	d828      	bhi.n	8000bfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	33c0      	adds	r3, #192	; 0xc0
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	589b      	ldr	r3, [r3, r2]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	481f      	ldr	r0, [pc, #124]	; (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	33c0      	adds	r3, #192	; 0xc0
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bfa:	e031      	b.n	8000c60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0019      	movs	r1, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	400b      	ands	r3, r1
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3306      	adds	r3, #6
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	18d3      	adds	r3, r2, r3
 8000c12:	3304      	adds	r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	400a      	ands	r2, r1
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	21ff      	movs	r1, #255	; 0xff
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	401a      	ands	r2, r3
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	4003      	ands	r3, r0
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <__NVIC_SetPriority+0xd8>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	001c      	movs	r4, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4023      	ands	r3, r4
 8000c50:	3b08      	subs	r3, #8
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	430a      	orrs	r2, r1
 8000c56:	3306      	adds	r3, #6
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	18c3      	adds	r3, r0, r3
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b003      	add	sp, #12
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	045b      	lsls	r3, r3, #17
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d301      	bcc.n	8000c88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c84:	2301      	movs	r3, #1
 8000c86:	e010      	b.n	8000caa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SysTick_Config+0x44>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2103      	movs	r1, #3
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff ff7c 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x44>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	1c02      	adds	r2, r0, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	0002      	movs	r2, r0
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff33 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ffaf 	bl	8000c70 <SysTick_Config>
 8000d12:	0003      	movs	r3, r0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d24:	210f      	movs	r1, #15
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2225      	movs	r2, #37	; 0x25
 8000d30:	5c9b      	ldrb	r3, [r3, r2]
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d006      	beq.n	8000d46 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e02a      	b.n	8000d9c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	210e      	movs	r1, #14
 8000d52:	438a      	bics	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	438a      	bics	r2, r1
 8000d64:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6a:	221c      	movs	r2, #28
 8000d6c:	401a      	ands	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	2101      	movs	r1, #1
 8000d74:	4091      	lsls	r1, r2
 8000d76:	000a      	movs	r2, r1
 8000d78:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2225      	movs	r2, #37	; 0x25
 8000d7e:	2101      	movs	r1, #1
 8000d80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2224      	movs	r2, #36	; 0x24
 8000d86:	2100      	movs	r1, #0
 8000d88:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	0010      	movs	r0, r2
 8000d9a:	4798      	blx	r3
    }
  }
  return status;
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
}
 8000da2:	0018      	movs	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b004      	add	sp, #16
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000dc2:	e155      	b.n	8001070 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2101      	movs	r1, #1
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	000a      	movs	r2, r1
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d100      	bne.n	8000ddc <HAL_GPIO_Init+0x30>
 8000dda:	e146      	b.n	800106a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d005      	beq.n	8000df4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2203      	movs	r2, #3
 8000dee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000df0:	2b02      	cmp	r3, #2
 8000df2:	d130      	bne.n	8000e56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	2203      	movs	r2, #3
 8000e00:	409a      	lsls	r2, r3
 8000e02:	0013      	movs	r3, r2
 8000e04:	43da      	mvns	r2, r3
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	68da      	ldr	r2, [r3, #12]
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	409a      	lsls	r2, r3
 8000e16:	0013      	movs	r3, r2
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	2201      	movs	r2, #1
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d017      	beq.n	8000e92 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	0013      	movs	r3, r2
 8000e72:	43da      	mvns	r2, r3
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4013      	ands	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	409a      	lsls	r2, r3
 8000e84:	0013      	movs	r3, r2
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2203      	movs	r2, #3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d123      	bne.n	8000ee6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	58d3      	ldr	r3, [r2, r3]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	2207      	movs	r2, #7
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	220f      	movs	r2, #15
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	691a      	ldr	r2, [r3, #16]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	2107      	movs	r1, #7
 8000eca:	400b      	ands	r3, r1
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	08da      	lsrs	r2, r3, #3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3208      	adds	r2, #8
 8000ee0:	0092      	lsls	r2, r2, #2
 8000ee2:	6939      	ldr	r1, [r7, #16]
 8000ee4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2203      	movs	r2, #3
 8000f04:	401a      	ands	r2, r3
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	23c0      	movs	r3, #192	; 0xc0
 8000f20:	029b      	lsls	r3, r3, #10
 8000f22:	4013      	ands	r3, r2
 8000f24:	d100      	bne.n	8000f28 <HAL_GPIO_Init+0x17c>
 8000f26:	e0a0      	b.n	800106a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	4b57      	ldr	r3, [pc, #348]	; (8001088 <HAL_GPIO_Init+0x2dc>)
 8000f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2c:	4b56      	ldr	r3, [pc, #344]	; (8001088 <HAL_GPIO_Init+0x2dc>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f34:	4a55      	ldr	r2, [pc, #340]	; (800108c <HAL_GPIO_Init+0x2e0>)
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	089b      	lsrs	r3, r3, #2
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	589b      	ldr	r3, [r3, r2]
 8000f40:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2203      	movs	r2, #3
 8000f46:	4013      	ands	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x1f6>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4a      	ldr	r2, [pc, #296]	; (8001090 <HAL_GPIO_Init+0x2e4>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x1f2>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a49      	ldr	r2, [pc, #292]	; (8001094 <HAL_GPIO_Init+0x2e8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x1ee>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a48      	ldr	r2, [pc, #288]	; (8001098 <HAL_GPIO_Init+0x2ec>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x1ea>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a47      	ldr	r2, [pc, #284]	; (800109c <HAL_GPIO_Init+0x2f0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x1e6>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a46      	ldr	r2, [pc, #280]	; (80010a0 <HAL_GPIO_Init+0x2f4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x1e2>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f8e:	2306      	movs	r3, #6
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x1f8>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	2103      	movs	r1, #3
 8000fa8:	400a      	ands	r2, r1
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	; (800108c <HAL_GPIO_Init+0x2e0>)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	025b      	lsls	r3, r3, #9
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fec:	4b2d      	ldr	r3, [pc, #180]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	029b      	lsls	r3, r3, #10
 8001004:	4013      	ands	r3, r2
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	035b      	lsls	r3, r3, #13
 800102e:	4013      	ands	r3, r2
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43da      	mvns	r2, r3
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	039b      	lsls	r3, r3, #14
 8001058:	4013      	ands	r3, r2
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <HAL_GPIO_Init+0x2f8>)
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	3301      	adds	r3, #1
 800106e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	40da      	lsrs	r2, r3
 8001078:	1e13      	subs	r3, r2, #0
 800107a:	d000      	beq.n	800107e <HAL_GPIO_Init+0x2d2>
 800107c:	e6a2      	b.n	8000dc4 <HAL_GPIO_Init+0x18>
  }
}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b006      	add	sp, #24
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000
 8001090:	50000400 	.word	0x50000400
 8001094:	50000800 	.word	0x50000800
 8001098:	50000c00 	.word	0x50000c00
 800109c:	50001000 	.word	0x50001000
 80010a0:	50001c00 	.word	0x50001c00
 80010a4:	40010400 	.word	0x40010400

080010a8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	0008      	movs	r0, r1
 80010b2:	0011      	movs	r1, r2
 80010b4:	1cbb      	adds	r3, r7, #2
 80010b6:	1c02      	adds	r2, r0, #0
 80010b8:	801a      	strh	r2, [r3, #0]
 80010ba:	1c7b      	adds	r3, r7, #1
 80010bc:	1c0a      	adds	r2, r1, #0
 80010be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010c0:	1c7b      	adds	r3, r7, #1
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d004      	beq.n	80010d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010c8:	1cbb      	adds	r3, r7, #2
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80010d0:	e003      	b.n	80010da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80010d2:	1cbb      	adds	r3, r7, #2
 80010d4:	881a      	ldrh	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	000a      	movs	r2, r1
 80010ec:	1cbb      	adds	r3, r7, #2
 80010ee:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010f6:	1cbb      	adds	r3, r7, #2
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4013      	ands	r3, r2
 80010fe:	041a      	lsls	r2, r3, #16
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	1cb9      	adds	r1, r7, #2
 8001106:	8809      	ldrh	r1, [r1, #0]
 8001108:	400b      	ands	r3, r1
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	46c0      	nop			; (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b004      	add	sp, #16
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	f000 fbbf 	bl	80018aa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800112c:	4bc9      	ldr	r3, [pc, #804]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	220c      	movs	r2, #12
 8001132:	4013      	ands	r3, r2
 8001134:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001136:	4bc7      	ldr	r3, [pc, #796]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	025b      	lsls	r3, r3, #9
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2201      	movs	r2, #1
 8001148:	4013      	ands	r3, r2
 800114a:	d100      	bne.n	800114e <HAL_RCC_OscConfig+0x36>
 800114c:	e07e      	b.n	800124c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	2b08      	cmp	r3, #8
 8001152:	d007      	beq.n	8001164 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	2b0c      	cmp	r3, #12
 8001158:	d112      	bne.n	8001180 <HAL_RCC_OscConfig+0x68>
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	025b      	lsls	r3, r3, #9
 8001160:	429a      	cmp	r2, r3
 8001162:	d10d      	bne.n	8001180 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	4bbb      	ldr	r3, [pc, #748]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	029b      	lsls	r3, r3, #10
 800116c:	4013      	ands	r3, r2
 800116e:	d100      	bne.n	8001172 <HAL_RCC_OscConfig+0x5a>
 8001170:	e06b      	b.n	800124a <HAL_RCC_OscConfig+0x132>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d167      	bne.n	800124a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	f000 fb95 	bl	80018aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	025b      	lsls	r3, r3, #9
 8001188:	429a      	cmp	r2, r3
 800118a:	d107      	bne.n	800119c <HAL_RCC_OscConfig+0x84>
 800118c:	4bb1      	ldr	r3, [pc, #708]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4bb0      	ldr	r3, [pc, #704]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001192:	2180      	movs	r1, #128	; 0x80
 8001194:	0249      	lsls	r1, r1, #9
 8001196:	430a      	orrs	r2, r1
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e027      	b.n	80011ec <HAL_RCC_OscConfig+0xd4>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	23a0      	movs	r3, #160	; 0xa0
 80011a2:	02db      	lsls	r3, r3, #11
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d10e      	bne.n	80011c6 <HAL_RCC_OscConfig+0xae>
 80011a8:	4baa      	ldr	r3, [pc, #680]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4ba9      	ldr	r3, [pc, #676]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	02c9      	lsls	r1, r1, #11
 80011b2:	430a      	orrs	r2, r1
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	4ba7      	ldr	r3, [pc, #668]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4ba6      	ldr	r3, [pc, #664]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011bc:	2180      	movs	r1, #128	; 0x80
 80011be:	0249      	lsls	r1, r1, #9
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e012      	b.n	80011ec <HAL_RCC_OscConfig+0xd4>
 80011c6:	4ba3      	ldr	r3, [pc, #652]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4ba2      	ldr	r3, [pc, #648]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011cc:	49a2      	ldr	r1, [pc, #648]	; (8001458 <HAL_RCC_OscConfig+0x340>)
 80011ce:	400a      	ands	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	4ba0      	ldr	r3, [pc, #640]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	025b      	lsls	r3, r3, #9
 80011da:	4013      	ands	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	4b9c      	ldr	r3, [pc, #624]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b9b      	ldr	r3, [pc, #620]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011e6:	499d      	ldr	r1, [pc, #628]	; (800145c <HAL_RCC_OscConfig+0x344>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d015      	beq.n	8001220 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fc86 	bl	8000b04 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011fc:	e009      	b.n	8001212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011fe:	f7ff fc81 	bl	8000b04 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b64      	cmp	r3, #100	; 0x64
 800120a:	d902      	bls.n	8001212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	f000 fb4c 	bl	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001212:	4b90      	ldr	r3, [pc, #576]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	029b      	lsls	r3, r3, #10
 800121a:	4013      	ands	r3, r2
 800121c:	d0ef      	beq.n	80011fe <HAL_RCC_OscConfig+0xe6>
 800121e:	e015      	b.n	800124c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001220:	f7ff fc70 	bl	8000b04 <HAL_GetTick>
 8001224:	0003      	movs	r3, r0
 8001226:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122a:	f7ff fc6b 	bl	8000b04 <HAL_GetTick>
 800122e:	0002      	movs	r2, r0
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b64      	cmp	r3, #100	; 0x64
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e336      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800123c:	4b85      	ldr	r3, [pc, #532]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	2380      	movs	r3, #128	; 0x80
 8001242:	029b      	lsls	r3, r3, #10
 8001244:	4013      	ands	r3, r2
 8001246:	d1f0      	bne.n	800122a <HAL_RCC_OscConfig+0x112>
 8001248:	e000      	b.n	800124c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2202      	movs	r2, #2
 8001252:	4013      	ands	r3, r2
 8001254:	d100      	bne.n	8001258 <HAL_RCC_OscConfig+0x140>
 8001256:	e099      	b.n	800138c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001260:	2220      	movs	r2, #32
 8001262:	4013      	ands	r3, r2
 8001264:	d009      	beq.n	800127a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001266:	4b7b      	ldr	r3, [pc, #492]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	4b7a      	ldr	r3, [pc, #488]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800126c:	2120      	movs	r1, #32
 800126e:	430a      	orrs	r2, r1
 8001270:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	2220      	movs	r2, #32
 8001276:	4393      	bics	r3, r2
 8001278:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	2b04      	cmp	r3, #4
 800127e:	d005      	beq.n	800128c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	2b0c      	cmp	r3, #12
 8001284:	d13e      	bne.n	8001304 <HAL_RCC_OscConfig+0x1ec>
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d13b      	bne.n	8001304 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800128c:	4b71      	ldr	r3, [pc, #452]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2204      	movs	r2, #4
 8001292:	4013      	ands	r3, r2
 8001294:	d004      	beq.n	80012a0 <HAL_RCC_OscConfig+0x188>
 8001296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001298:	2b00      	cmp	r3, #0
 800129a:	d101      	bne.n	80012a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e304      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b6c      	ldr	r3, [pc, #432]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4a6e      	ldr	r2, [pc, #440]	; (8001460 <HAL_RCC_OscConfig+0x348>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	021a      	lsls	r2, r3, #8
 80012b0:	4b68      	ldr	r3, [pc, #416]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80012b2:	430a      	orrs	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012b6:	4b67      	ldr	r3, [pc, #412]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2209      	movs	r2, #9
 80012bc:	4393      	bics	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	4b64      	ldr	r3, [pc, #400]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80012c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012c8:	f000 fc42 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 80012cc:	0001      	movs	r1, r0
 80012ce:	4b61      	ldr	r3, [pc, #388]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	220f      	movs	r2, #15
 80012d6:	4013      	ands	r3, r2
 80012d8:	4a62      	ldr	r2, [pc, #392]	; (8001464 <HAL_RCC_OscConfig+0x34c>)
 80012da:	5cd3      	ldrb	r3, [r2, r3]
 80012dc:	000a      	movs	r2, r1
 80012de:	40da      	lsrs	r2, r3
 80012e0:	4b61      	ldr	r3, [pc, #388]	; (8001468 <HAL_RCC_OscConfig+0x350>)
 80012e2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80012e4:	4b61      	ldr	r3, [pc, #388]	; (800146c <HAL_RCC_OscConfig+0x354>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2513      	movs	r5, #19
 80012ea:	197c      	adds	r4, r7, r5
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff fbc3 	bl	8000a78 <HAL_InitTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80012f6:	197b      	adds	r3, r7, r5
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d046      	beq.n	800138c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80012fe:	197b      	adds	r3, r7, r5
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	e2d2      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	2b00      	cmp	r3, #0
 8001308:	d027      	beq.n	800135a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800130a:	4b52      	ldr	r3, [pc, #328]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2209      	movs	r2, #9
 8001310:	4393      	bics	r3, r2
 8001312:	0019      	movs	r1, r3
 8001314:	4b4f      	ldr	r3, [pc, #316]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fbf2 	bl	8000b04 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff fbed 	bl	8000b04 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e2b8      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001338:	4b46      	ldr	r3, [pc, #280]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2204      	movs	r2, #4
 800133e:	4013      	ands	r3, r2
 8001340:	d0f1      	beq.n	8001326 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001342:	4b44      	ldr	r3, [pc, #272]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4a46      	ldr	r2, [pc, #280]	; (8001460 <HAL_RCC_OscConfig+0x348>)
 8001348:	4013      	ands	r3, r2
 800134a:	0019      	movs	r1, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	021a      	lsls	r2, r3, #8
 8001352:	4b40      	ldr	r3, [pc, #256]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	e018      	b.n	800138c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800135a:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001360:	2101      	movs	r1, #1
 8001362:	438a      	bics	r2, r1
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff fbcd 	bl	8000b04 <HAL_GetTick>
 800136a:	0003      	movs	r3, r0
 800136c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001370:	f7ff fbc8 	bl	8000b04 <HAL_GetTick>
 8001374:	0002      	movs	r2, r0
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e293      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2204      	movs	r2, #4
 8001388:	4013      	ands	r3, r2
 800138a:	d1f1      	bne.n	8001370 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2210      	movs	r2, #16
 8001392:	4013      	ands	r3, r2
 8001394:	d100      	bne.n	8001398 <HAL_RCC_OscConfig+0x280>
 8001396:	e0a2      	b.n	80014de <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d140      	bne.n	8001420 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800139e:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	4013      	ands	r3, r2
 80013a8:	d005      	beq.n	80013b6 <HAL_RCC_OscConfig+0x29e>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e279      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <HAL_RCC_OscConfig+0x358>)
 80013bc:	4013      	ands	r3, r2
 80013be:	0019      	movs	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013c4:	4b23      	ldr	r3, [pc, #140]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80013c6:	430a      	orrs	r2, r1
 80013c8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	0a19      	lsrs	r1, r3, #8
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	061a      	lsls	r2, r3, #24
 80013d8:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e2:	0b5b      	lsrs	r3, r3, #13
 80013e4:	3301      	adds	r3, #1
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	0212      	lsls	r2, r2, #8
 80013ea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013ec:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	210f      	movs	r1, #15
 80013f4:	400b      	ands	r3, r1
 80013f6:	491b      	ldr	r1, [pc, #108]	; (8001464 <HAL_RCC_OscConfig+0x34c>)
 80013f8:	5ccb      	ldrb	r3, [r1, r3]
 80013fa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013fc:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_RCC_OscConfig+0x350>)
 80013fe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <HAL_RCC_OscConfig+0x354>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2513      	movs	r5, #19
 8001406:	197c      	adds	r4, r7, r5
 8001408:	0018      	movs	r0, r3
 800140a:	f7ff fb35 	bl	8000a78 <HAL_InitTick>
 800140e:	0003      	movs	r3, r0
 8001410:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001412:	197b      	adds	r3, r7, r5
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d061      	beq.n	80014de <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800141a:	197b      	adds	r3, r7, r5
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	e244      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d040      	beq.n	80014aa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0049      	lsls	r1, r1, #1
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001436:	f7ff fb65 	bl	8000b04 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800143e:	e019      	b.n	8001474 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001440:	f7ff fb60 	bl	8000b04 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d912      	bls.n	8001474 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e22b      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	40021000 	.word	0x40021000
 8001458:	fffeffff 	.word	0xfffeffff
 800145c:	fffbffff 	.word	0xfffbffff
 8001460:	ffffe0ff 	.word	0xffffe0ff
 8001464:	080032d4 	.word	0x080032d4
 8001468:	20000078 	.word	0x20000078
 800146c:	2000007c 	.word	0x2000007c
 8001470:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001474:	4bca      	ldr	r3, [pc, #808]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4013      	ands	r3, r2
 800147e:	d0df      	beq.n	8001440 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001480:	4bc7      	ldr	r3, [pc, #796]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4ac7      	ldr	r2, [pc, #796]	; (80017a4 <HAL_RCC_OscConfig+0x68c>)
 8001486:	4013      	ands	r3, r2
 8001488:	0019      	movs	r1, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800148e:	4bc4      	ldr	r3, [pc, #784]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001494:	4bc2      	ldr	r3, [pc, #776]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	0a19      	lsrs	r1, r3, #8
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a1b      	ldr	r3, [r3, #32]
 80014a0:	061a      	lsls	r2, r3, #24
 80014a2:	4bbf      	ldr	r3, [pc, #764]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80014a4:	430a      	orrs	r2, r1
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	e019      	b.n	80014de <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014aa:	4bbd      	ldr	r3, [pc, #756]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4bbc      	ldr	r3, [pc, #752]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80014b0:	49bd      	ldr	r1, [pc, #756]	; (80017a8 <HAL_RCC_OscConfig+0x690>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb25 	bl	8000b04 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014c0:	f7ff fb20 	bl	8000b04 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e1eb      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014d2:	4bb3      	ldr	r3, [pc, #716]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	4013      	ands	r3, r2
 80014dc:	d1f0      	bne.n	80014c0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2208      	movs	r2, #8
 80014e4:	4013      	ands	r3, r2
 80014e6:	d036      	beq.n	8001556 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d019      	beq.n	8001524 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f0:	4bab      	ldr	r3, [pc, #684]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80014f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f4:	4baa      	ldr	r3, [pc, #680]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	430a      	orrs	r2, r1
 80014fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7ff fb02 	bl	8000b04 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fafd 	bl	8000b04 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1c8      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001518:	4ba1      	ldr	r3, [pc, #644]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800151a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d0f1      	beq.n	8001506 <HAL_RCC_OscConfig+0x3ee>
 8001522:	e018      	b.n	8001556 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001524:	4b9e      	ldr	r3, [pc, #632]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001526:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001528:	4b9d      	ldr	r3, [pc, #628]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800152a:	2101      	movs	r1, #1
 800152c:	438a      	bics	r2, r1
 800152e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7ff fae8 	bl	8000b04 <HAL_GetTick>
 8001534:	0003      	movs	r3, r0
 8001536:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff fae3 	bl	8000b04 <HAL_GetTick>
 800153e:	0002      	movs	r2, r0
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1ae      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800154c:	4b94      	ldr	r3, [pc, #592]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800154e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001550:	2202      	movs	r2, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d1f1      	bne.n	800153a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2204      	movs	r2, #4
 800155c:	4013      	ands	r3, r2
 800155e:	d100      	bne.n	8001562 <HAL_RCC_OscConfig+0x44a>
 8001560:	e0ae      	b.n	80016c0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2023      	movs	r0, #35	; 0x23
 8001564:	183b      	adds	r3, r7, r0
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156a:	4b8d      	ldr	r3, [pc, #564]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800156c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	055b      	lsls	r3, r3, #21
 8001572:	4013      	ands	r3, r2
 8001574:	d109      	bne.n	800158a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	4b8a      	ldr	r3, [pc, #552]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001578:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800157a:	4b89      	ldr	r3, [pc, #548]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800157c:	2180      	movs	r1, #128	; 0x80
 800157e:	0549      	lsls	r1, r1, #21
 8001580:	430a      	orrs	r2, r1
 8001582:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001584:	183b      	adds	r3, r7, r0
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158a:	4b88      	ldr	r3, [pc, #544]	; (80017ac <HAL_RCC_OscConfig+0x694>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4013      	ands	r3, r2
 8001594:	d11a      	bne.n	80015cc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001596:	4b85      	ldr	r3, [pc, #532]	; (80017ac <HAL_RCC_OscConfig+0x694>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	4b84      	ldr	r3, [pc, #528]	; (80017ac <HAL_RCC_OscConfig+0x694>)
 800159c:	2180      	movs	r1, #128	; 0x80
 800159e:	0049      	lsls	r1, r1, #1
 80015a0:	430a      	orrs	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a4:	f7ff faae 	bl	8000b04 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff faa9 	bl	8000b04 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e174      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x694>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4013      	ands	r3, r2
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x4d0>
 80015d8:	4b71      	ldr	r3, [pc, #452]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80015da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015dc:	4b70      	ldr	r3, [pc, #448]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0049      	lsls	r1, r1, #1
 80015e2:	430a      	orrs	r2, r1
 80015e4:	651a      	str	r2, [r3, #80]	; 0x50
 80015e6:	e031      	b.n	800164c <HAL_RCC_OscConfig+0x534>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x4f2>
 80015f0:	4b6b      	ldr	r3, [pc, #428]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80015f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015f4:	4b6a      	ldr	r3, [pc, #424]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80015f6:	496c      	ldr	r1, [pc, #432]	; (80017a8 <HAL_RCC_OscConfig+0x690>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	651a      	str	r2, [r3, #80]	; 0x50
 80015fc:	4b68      	ldr	r3, [pc, #416]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80015fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001600:	4b67      	ldr	r3, [pc, #412]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001602:	496b      	ldr	r1, [pc, #428]	; (80017b0 <HAL_RCC_OscConfig+0x698>)
 8001604:	400a      	ands	r2, r1
 8001606:	651a      	str	r2, [r3, #80]	; 0x50
 8001608:	e020      	b.n	800164c <HAL_RCC_OscConfig+0x534>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	23a0      	movs	r3, #160	; 0xa0
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	429a      	cmp	r2, r3
 8001614:	d10e      	bne.n	8001634 <HAL_RCC_OscConfig+0x51c>
 8001616:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001618:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800161a:	4b61      	ldr	r3, [pc, #388]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	00c9      	lsls	r1, r1, #3
 8001620:	430a      	orrs	r2, r1
 8001622:	651a      	str	r2, [r3, #80]	; 0x50
 8001624:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001628:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	0049      	lsls	r1, r1, #1
 800162e:	430a      	orrs	r2, r1
 8001630:	651a      	str	r2, [r3, #80]	; 0x50
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0x534>
 8001634:	4b5a      	ldr	r3, [pc, #360]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001636:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001638:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800163a:	495b      	ldr	r1, [pc, #364]	; (80017a8 <HAL_RCC_OscConfig+0x690>)
 800163c:	400a      	ands	r2, r1
 800163e:	651a      	str	r2, [r3, #80]	; 0x50
 8001640:	4b57      	ldr	r3, [pc, #348]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001646:	495a      	ldr	r1, [pc, #360]	; (80017b0 <HAL_RCC_OscConfig+0x698>)
 8001648:	400a      	ands	r2, r1
 800164a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d015      	beq.n	8001680 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff fa56 	bl	8000b04 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800165c:	e009      	b.n	8001672 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff fa51 	bl	8000b04 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a52      	ldr	r2, [pc, #328]	; (80017b4 <HAL_RCC_OscConfig+0x69c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e11b      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001672:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d0ef      	beq.n	800165e <HAL_RCC_OscConfig+0x546>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff fa40 	bl	8000b04 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001688:	e009      	b.n	800169e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff fa3b 	bl	8000b04 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4a47      	ldr	r2, [pc, #284]	; (80017b4 <HAL_RCC_OscConfig+0x69c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e105      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800169e:	4b40      	ldr	r3, [pc, #256]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80016a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1ef      	bne.n	800168a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016aa:	2323      	movs	r3, #35	; 0x23
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d105      	bne.n	80016c0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b4:	4b3a      	ldr	r3, [pc, #232]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80016b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80016ba:	493f      	ldr	r1, [pc, #252]	; (80017b8 <HAL_RCC_OscConfig+0x6a0>)
 80016bc:	400a      	ands	r2, r1
 80016be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2220      	movs	r2, #32
 80016c6:	4013      	ands	r3, r2
 80016c8:	d049      	beq.n	800175e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d026      	beq.n	8001720 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80016d2:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80016d8:	2101      	movs	r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80016e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	430a      	orrs	r2, r1
 80016e8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ea:	4b34      	ldr	r3, [pc, #208]	; (80017bc <HAL_RCC_OscConfig+0x6a4>)
 80016ec:	6a1a      	ldr	r2, [r3, #32]
 80016ee:	4b33      	ldr	r3, [pc, #204]	; (80017bc <HAL_RCC_OscConfig+0x6a4>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0189      	lsls	r1, r1, #6
 80016f4:	430a      	orrs	r2, r1
 80016f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa04 	bl	8000b04 <HAL_GetTick>
 80016fc:	0003      	movs	r3, r0
 80016fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001702:	f7ff f9ff 	bl	8000b04 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0ca      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001714:	4b22      	ldr	r3, [pc, #136]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d0f1      	beq.n	8001702 <HAL_RCC_OscConfig+0x5ea>
 800171e:	e01e      	b.n	800175e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001720:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001726:	2101      	movs	r1, #1
 8001728:	438a      	bics	r2, r1
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	4b23      	ldr	r3, [pc, #140]	; (80017bc <HAL_RCC_OscConfig+0x6a4>)
 800172e:	6a1a      	ldr	r2, [r3, #32]
 8001730:	4b22      	ldr	r3, [pc, #136]	; (80017bc <HAL_RCC_OscConfig+0x6a4>)
 8001732:	4923      	ldr	r1, [pc, #140]	; (80017c0 <HAL_RCC_OscConfig+0x6a8>)
 8001734:	400a      	ands	r2, r1
 8001736:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001738:	f7ff f9e4 	bl	8000b04 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001742:	f7ff f9df 	bl	8000b04 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0aa      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2202      	movs	r2, #2
 800175a:	4013      	ands	r3, r2
 800175c:	d1f1      	bne.n	8001742 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	2b00      	cmp	r3, #0
 8001764:	d100      	bne.n	8001768 <HAL_RCC_OscConfig+0x650>
 8001766:	e09f      	b.n	80018a8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d100      	bne.n	8001770 <HAL_RCC_OscConfig+0x658>
 800176e:	e078      	b.n	8001862 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	2b02      	cmp	r3, #2
 8001776:	d159      	bne.n	800182c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 800177e:	4911      	ldr	r1, [pc, #68]	; (80017c4 <HAL_RCC_OscConfig+0x6ac>)
 8001780:	400a      	ands	r2, r1
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff f9be 	bl	8000b04 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800178c:	e01c      	b.n	80017c8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff f9b9 	bl	8000b04 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d915      	bls.n	80017c8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e084      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
 80017a0:	40021000 	.word	0x40021000
 80017a4:	ffff1fff 	.word	0xffff1fff
 80017a8:	fffffeff 	.word	0xfffffeff
 80017ac:	40007000 	.word	0x40007000
 80017b0:	fffffbff 	.word	0xfffffbff
 80017b4:	00001388 	.word	0x00001388
 80017b8:	efffffff 	.word	0xefffffff
 80017bc:	40010000 	.word	0x40010000
 80017c0:	ffffdfff 	.word	0xffffdfff
 80017c4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017c8:	4b3a      	ldr	r3, [pc, #232]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	049b      	lsls	r3, r3, #18
 80017d0:	4013      	ands	r3, r2
 80017d2:	d1dc      	bne.n	800178e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d4:	4b37      	ldr	r3, [pc, #220]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	4a37      	ldr	r2, [pc, #220]	; (80018b8 <HAL_RCC_OscConfig+0x7a0>)
 80017da:	4013      	ands	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	431a      	orrs	r2, r3
 80017ee:	4b31      	ldr	r3, [pc, #196]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 80017f0:	430a      	orrs	r2, r1
 80017f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017f4:	4b2f      	ldr	r3, [pc, #188]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 80017fa:	2180      	movs	r1, #128	; 0x80
 80017fc:	0449      	lsls	r1, r1, #17
 80017fe:	430a      	orrs	r2, r1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff f97f 	bl	8000b04 <HAL_GetTick>
 8001806:	0003      	movs	r3, r0
 8001808:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f97a 	bl	8000b04 <HAL_GetTick>
 8001810:	0002      	movs	r2, r0
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e045      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	049b      	lsls	r3, r3, #18
 8001826:	4013      	ands	r3, r2
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x6f4>
 800182a:	e03d      	b.n	80018a8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 8001832:	4922      	ldr	r1, [pc, #136]	; (80018bc <HAL_RCC_OscConfig+0x7a4>)
 8001834:	400a      	ands	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff f964 	bl	8000b04 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff f95f 	bl	8000b04 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e02a      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	049b      	lsls	r3, r3, #18
 800185c:	4013      	ands	r3, r2
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x72a>
 8001860:	e022      	b.n	80018a8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e01d      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_RCC_OscConfig+0x79c>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	025b      	lsls	r3, r3, #9
 800187a:	401a      	ands	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	429a      	cmp	r2, r3
 8001882:	d10f      	bne.n	80018a4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	23f0      	movs	r3, #240	; 0xf0
 8001888:	039b      	lsls	r3, r3, #14
 800188a:	401a      	ands	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	23c0      	movs	r3, #192	; 0xc0
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	401a      	ands	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	0018      	movs	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b00a      	add	sp, #40	; 0x28
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40021000 	.word	0x40021000
 80018b8:	ff02ffff 	.word	0xff02ffff
 80018bc:	feffffff 	.word	0xfeffffff

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e128      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b96      	ldr	r3, [pc, #600]	; (8001b30 <HAL_RCC_ClockConfig+0x270>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2201      	movs	r2, #1
 80018da:	4013      	ands	r3, r2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d91e      	bls.n	8001920 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b93      	ldr	r3, [pc, #588]	; (8001b30 <HAL_RCC_ClockConfig+0x270>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4393      	bics	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	4b90      	ldr	r3, [pc, #576]	; (8001b30 <HAL_RCC_ClockConfig+0x270>)
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f4:	f7ff f906 	bl	8000b04 <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fc:	e009      	b.n	8001912 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018fe:	f7ff f901 	bl	8000b04 <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	4a8a      	ldr	r2, [pc, #552]	; (8001b34 <HAL_RCC_ClockConfig+0x274>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e109      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b87      	ldr	r3, [pc, #540]	; (8001b30 <HAL_RCC_ClockConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2201      	movs	r2, #1
 8001918:	4013      	ands	r3, r2
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d1ee      	bne.n	80018fe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d009      	beq.n	800193e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192a:	4b83      	ldr	r3, [pc, #524]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	22f0      	movs	r2, #240	; 0xf0
 8001930:	4393      	bics	r3, r2
 8001932:	0019      	movs	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b7f      	ldr	r3, [pc, #508]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 800193a:	430a      	orrs	r2, r1
 800193c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2201      	movs	r2, #1
 8001944:	4013      	ands	r3, r2
 8001946:	d100      	bne.n	800194a <HAL_RCC_ClockConfig+0x8a>
 8001948:	e089      	b.n	8001a5e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001952:	4b79      	ldr	r3, [pc, #484]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	029b      	lsls	r3, r3, #10
 800195a:	4013      	ands	r3, r2
 800195c:	d120      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0e1      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b03      	cmp	r3, #3
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049b      	lsls	r3, r3, #18
 8001972:	4013      	ands	r3, r2
 8001974:	d114      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e0d5      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d106      	bne.n	8001990 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001982:	4b6d      	ldr	r3, [pc, #436]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2204      	movs	r2, #4
 8001988:	4013      	ands	r3, r2
 800198a:	d109      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e0ca      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001990:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e0c2      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a0:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	2203      	movs	r2, #3
 80019a6:	4393      	bics	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4b62      	ldr	r3, [pc, #392]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff f8a6 	bl	8000b04 <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d111      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c4:	e009      	b.n	80019da <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c6:	f7ff f89d 	bl	8000b04 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x274>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e0a5      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	220c      	movs	r2, #12
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d1ef      	bne.n	80019c6 <HAL_RCC_ClockConfig+0x106>
 80019e6:	e03a      	b.n	8001a5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	d111      	bne.n	8001a14 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f0:	e009      	b.n	8001a06 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f2:	f7ff f887 	bl	8000b04 <HAL_GetTick>
 80019f6:	0002      	movs	r2, r0
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	4a4d      	ldr	r2, [pc, #308]	; (8001b34 <HAL_RCC_ClockConfig+0x274>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e08f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d1ef      	bne.n	80019f2 <HAL_RCC_ClockConfig+0x132>
 8001a12:	e024      	b.n	8001a5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d11b      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1c:	e009      	b.n	8001a32 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1e:	f7ff f871 	bl	8000b04 <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4a42      	ldr	r2, [pc, #264]	; (8001b34 <HAL_RCC_ClockConfig+0x274>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e079      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a32:	4b41      	ldr	r3, [pc, #260]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	220c      	movs	r2, #12
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d1ef      	bne.n	8001a1e <HAL_RCC_ClockConfig+0x15e>
 8001a3e:	e00e      	b.n	8001a5e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7ff f860 	bl	8000b04 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	4a3a      	ldr	r2, [pc, #232]	; (8001b34 <HAL_RCC_ClockConfig+0x274>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e068      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a54:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	220c      	movs	r2, #12
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5e:	4b34      	ldr	r3, [pc, #208]	; (8001b30 <HAL_RCC_ClockConfig+0x270>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d21e      	bcs.n	8001aaa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6c:	4b30      	ldr	r3, [pc, #192]	; (8001b30 <HAL_RCC_ClockConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4393      	bics	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <HAL_RCC_ClockConfig+0x270>)
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a7e:	f7ff f841 	bl	8000b04 <HAL_GetTick>
 8001a82:	0003      	movs	r3, r0
 8001a84:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	e009      	b.n	8001a9c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f83c 	bl	8000b04 <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <HAL_RCC_ClockConfig+0x274>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e044      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_ClockConfig+0x270>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d1ee      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4a20      	ldr	r2, [pc, #128]	; (8001b3c <HAL_RCC_ClockConfig+0x27c>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2208      	movs	r2, #8
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d00a      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <HAL_RCC_ClockConfig+0x280>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	00da      	lsls	r2, r3, #3
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae8:	f000 f832 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001aec:	0001      	movs	r1, r0
 8001aee:	4b12      	ldr	r3, [pc, #72]	; (8001b38 <HAL_RCC_ClockConfig+0x278>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	220f      	movs	r2, #15
 8001af6:	4013      	ands	r3, r2
 8001af8:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <HAL_RCC_ClockConfig+0x284>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	000a      	movs	r2, r1
 8001afe:	40da      	lsrs	r2, r3
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_ClockConfig+0x288>)
 8001b02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <HAL_RCC_ClockConfig+0x28c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	250b      	movs	r5, #11
 8001b0a:	197c      	adds	r4, r7, r5
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7fe ffb3 	bl	8000a78 <HAL_InitTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b16:	197b      	adds	r3, r7, r5
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b1e:	197b      	adds	r3, r7, r5
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40022000 	.word	0x40022000
 8001b34:	00001388 	.word	0x00001388
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	fffff8ff 	.word	0xfffff8ff
 8001b40:	ffffc7ff 	.word	0xffffc7ff
 8001b44:	080032d4 	.word	0x080032d4
 8001b48:	20000078 	.word	0x20000078
 8001b4c:	2000007c 	.word	0x2000007c

08001b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b08e      	sub	sp, #56	; 0x38
 8001b54:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b56:	4b4c      	ldr	r3, [pc, #304]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b5e:	230c      	movs	r3, #12
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d014      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0x40>
 8001b66:	d900      	bls.n	8001b6a <HAL_RCC_GetSysClockFreq+0x1a>
 8001b68:	e07b      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x112>
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x24>
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d00b      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b72:	e076      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b74:	4b44      	ldr	r3, [pc, #272]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2210      	movs	r2, #16
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b7e:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b82:	e07c      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b84:	4b42      	ldr	r3, [pc, #264]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b88:	e079      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b8a:	4b42      	ldr	r3, [pc, #264]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b8e:	e076      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b92:	0c9a      	lsrs	r2, r3, #18
 8001b94:	230f      	movs	r3, #15
 8001b96:	401a      	ands	r2, r3
 8001b98:	4b3f      	ldr	r3, [pc, #252]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x148>)
 8001b9a:	5c9b      	ldrb	r3, [r3, r2]
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba0:	0d9a      	lsrs	r2, r3, #22
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	025b      	lsls	r3, r3, #9
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d01a      	beq.n	8001bec <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	4a35      	ldr	r2, [pc, #212]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	69b8      	ldr	r0, [r7, #24]
 8001bc4:	69f9      	ldr	r1, [r7, #28]
 8001bc6:	f7fe fb4b 	bl	8000260 <__aeabi_lmul>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	000b      	movs	r3, r1
 8001bce:	0010      	movs	r0, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	f7fe fb1f 	bl	8000220 <__aeabi_uldivmod>
 8001be2:	0002      	movs	r2, r0
 8001be4:	000b      	movs	r3, r1
 8001be6:	0013      	movs	r3, r2
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
 8001bea:	e037      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2210      	movs	r2, #16
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d01a      	beq.n	8001c2c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4a23      	ldr	r2, [pc, #140]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c00:	2300      	movs	r3, #0
 8001c02:	68b8      	ldr	r0, [r7, #8]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	f7fe fb2b 	bl	8000260 <__aeabi_lmul>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	000b      	movs	r3, r1
 8001c0e:	0010      	movs	r0, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	603b      	str	r3, [r7, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f7fe faff 	bl	8000220 <__aeabi_uldivmod>
 8001c22:	0002      	movs	r2, r0
 8001c24:	000b      	movs	r3, r1
 8001c26:	0013      	movs	r3, r2
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
 8001c2a:	e017      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c2e:	0018      	movs	r0, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	0019      	movs	r1, r3
 8001c34:	4a16      	ldr	r2, [pc, #88]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c36:	2300      	movs	r3, #0
 8001c38:	f7fe fb12 	bl	8000260 <__aeabi_lmul>
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	000b      	movs	r3, r1
 8001c40:	0010      	movs	r0, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	001c      	movs	r4, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	001d      	movs	r5, r3
 8001c4c:	0022      	movs	r2, r4
 8001c4e:	002b      	movs	r3, r5
 8001c50:	f7fe fae6 	bl	8000220 <__aeabi_uldivmod>
 8001c54:	0002      	movs	r2, r0
 8001c56:	000b      	movs	r3, r1
 8001c58:	0013      	movs	r3, r2
 8001c5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c60:	e00d      	b.n	8001c7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	0b5b      	lsrs	r3, r3, #13
 8001c68:	2207      	movs	r2, #7
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	3301      	adds	r3, #1
 8001c72:	2280      	movs	r2, #128	; 0x80
 8001c74:	0212      	lsls	r2, r2, #8
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c7c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b00e      	add	sp, #56	; 0x38
 8001c86:	bdb0      	pop	{r4, r5, r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	003d0900 	.word	0x003d0900
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200
 8001c98:	080032ec 	.word	0x080032ec

08001c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_RCC_GetHCLKFreq+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	20000078 	.word	0x20000078

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff2 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cb8:	0001      	movs	r1, r0
 8001cba:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	0a1b      	lsrs	r3, r3, #8
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	40d9      	lsrs	r1, r3
 8001cca:	000b      	movs	r3, r1
}
 8001ccc:	0018      	movs	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	080032e4 	.word	0x080032e4

08001cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ce0:	f7ff ffdc 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001ce4:	0001      	movs	r1, r0
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	0adb      	lsrs	r3, r3, #11
 8001cec:	2207      	movs	r2, #7
 8001cee:	4013      	ands	r3, r2
 8001cf0:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	40d9      	lsrs	r1, r3
 8001cf6:	000b      	movs	r3, r1
}
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	40021000 	.word	0x40021000
 8001d04:	080032e4 	.word	0x080032e4

08001d08 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d10:	2317      	movs	r3, #23
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d106      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d100      	bne.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001d2e:	e0d9      	b.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d30:	4ba4      	ldr	r3, [pc, #656]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	055b      	lsls	r3, r3, #21
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d10a      	bne.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3c:	4ba1      	ldr	r3, [pc, #644]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d40:	4ba0      	ldr	r3, [pc, #640]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	0549      	lsls	r1, r1, #21
 8001d46:	430a      	orrs	r2, r1
 8001d48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d4a:	2317      	movs	r3, #23
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2201      	movs	r2, #1
 8001d50:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d52:	4b9d      	ldr	r3, [pc, #628]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d11a      	bne.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d5e:	4b9a      	ldr	r3, [pc, #616]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	4b99      	ldr	r3, [pc, #612]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d64:	2180      	movs	r1, #128	; 0x80
 8001d66:	0049      	lsls	r1, r1, #1
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6c:	f7fe feca 	bl	8000b04 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7fe fec5 	bl	8000b04 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e118      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b8f      	ldr	r3, [pc, #572]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d94:	4b8b      	ldr	r3, [pc, #556]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	23c0      	movs	r3, #192	; 0xc0
 8001d9a:	039b      	lsls	r3, r3, #14
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	23c0      	movs	r3, #192	; 0xc0
 8001da6:	039b      	lsls	r3, r3, #14
 8001da8:	4013      	ands	r3, r2
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	23c0      	movs	r3, #192	; 0xc0
 8001db6:	039b      	lsls	r3, r3, #14
 8001db8:	4013      	ands	r3, r2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	029b      	lsls	r3, r3, #10
 8001dc8:	401a      	ands	r2, r3
 8001dca:	23c0      	movs	r3, #192	; 0xc0
 8001dcc:	029b      	lsls	r3, r3, #10
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d10a      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001dd2:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	401a      	ands	r2, r3
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	029b      	lsls	r3, r3, #10
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d101      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0e8      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001de8:	4b76      	ldr	r3, [pc, #472]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001dea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dec:	23c0      	movs	r3, #192	; 0xc0
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d049      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	23c0      	movs	r3, #192	; 0xc0
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	4013      	ands	r3, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d004      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	4013      	ands	r3, r2
 8001e12:	d10d      	bne.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	23c0      	movs	r3, #192	; 0xc0
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d034      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d02e      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e30:	4b64      	ldr	r3, [pc, #400]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e34:	4a65      	ldr	r2, [pc, #404]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e36:	4013      	ands	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3a:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e3e:	4b61      	ldr	r3, [pc, #388]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0309      	lsls	r1, r1, #12
 8001e44:	430a      	orrs	r2, r1
 8001e46:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e48:	4b5e      	ldr	r3, [pc, #376]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e4c:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e4e:	4960      	ldr	r1, [pc, #384]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e54:	4b5b      	ldr	r3, [pc, #364]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d014      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7fe fe4e 	bl	8000b04 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e6c:	e009      	b.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6e:	f7fe fe49 	bl	8000b04 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	4a56      	ldr	r2, [pc, #344]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d901      	bls.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e09b      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e82:	4b50      	ldr	r3, [pc, #320]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d0ef      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	23c0      	movs	r3, #192	; 0xc0
 8001e94:	029b      	lsls	r3, r3, #10
 8001e96:	401a      	ands	r2, r3
 8001e98:	23c0      	movs	r3, #192	; 0xc0
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001ea0:	4b48      	ldr	r3, [pc, #288]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a4c      	ldr	r2, [pc, #304]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	23c0      	movs	r3, #192	; 0xc0
 8001eb0:	039b      	lsls	r3, r3, #14
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ebc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	23c0      	movs	r3, #192	; 0xc0
 8001ec4:	029b      	lsls	r3, r3, #10
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ece:	2317      	movs	r3, #23
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d105      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed8:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001edc:	4b39      	ldr	r3, [pc, #228]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ede:	493f      	ldr	r1, [pc, #252]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	4013      	ands	r3, r2
 8001eec:	d009      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eee:	4b35      	ldr	r3, [pc, #212]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001efe:	430a      	orrs	r2, r1
 8001f00:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2202      	movs	r2, #2
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d009      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f10:	220c      	movs	r2, #12
 8001f12:	4393      	bics	r3, r2
 8001f14:	0019      	movs	r1, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2204      	movs	r2, #4
 8001f26:	4013      	ands	r3, r2
 8001f28:	d009      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2e:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	0019      	movs	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2208      	movs	r2, #8
 8001f44:	4013      	ands	r3, r2
 8001f46:	d009      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4c:	4a25      	ldr	r2, [pc, #148]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001f4e:	4013      	ands	r3, r2
 8001f50:	0019      	movs	r1, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699a      	ldr	r2, [r3, #24]
 8001f56:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4013      	ands	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f68:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	4a17      	ldr	r2, [pc, #92]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69da      	ldr	r2, [r3, #28]
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2240      	movs	r2, #64	; 0x40
 8001f82:	4013      	ands	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f86:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2280      	movs	r2, #128	; 0x80
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d009      	beq.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fa4:	4b07      	ldr	r3, [pc, #28]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001faa:	4013      	ands	r3, r2
 8001fac:	0019      	movs	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1a      	ldr	r2, [r3, #32]
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b006      	add	sp, #24
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40007000 	.word	0x40007000
 8001fcc:	fffcffff 	.word	0xfffcffff
 8001fd0:	fff7ffff 	.word	0xfff7ffff
 8001fd4:	00001388 	.word	0x00001388
 8001fd8:	ffcfffff 	.word	0xffcfffff
 8001fdc:	efffffff 	.word	0xefffffff
 8001fe0:	fffff3ff 	.word	0xfffff3ff
 8001fe4:	ffffcfff 	.word	0xffffcfff
 8001fe8:	fbffffff 	.word	0xfbffffff
 8001fec:	fff3ffff 	.word	0xfff3ffff

08001ff0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e083      	b.n	800210a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	2382      	movs	r3, #130	; 0x82
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	429a      	cmp	r2, r3
 8002014:	d009      	beq.n	800202a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
 800201c:	e005      	b.n	800202a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2251      	movs	r2, #81	; 0x51
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d107      	bne.n	800204c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2250      	movs	r2, #80	; 0x50
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f7fe fc10 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2251      	movs	r2, #81	; 0x51
 8002050:	2102      	movs	r1, #2
 8002052:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2140      	movs	r1, #64	; 0x40
 8002060:	438a      	bics	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	2382      	movs	r3, #130	; 0x82
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	401a      	ands	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6899      	ldr	r1, [r3, #8]
 8002072:	2384      	movs	r3, #132	; 0x84
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	400b      	ands	r3, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68d9      	ldr	r1, [r3, #12]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	400b      	ands	r3, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2102      	movs	r1, #2
 800208c:	400b      	ands	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	2101      	movs	r1, #1
 8002096:	400b      	ands	r3, r1
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6999      	ldr	r1, [r3, #24]
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	400b      	ands	r3, r1
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2138      	movs	r1, #56	; 0x38
 80020ac:	400b      	ands	r3, r1
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	400b      	ands	r3, r1
 80020b8:	431a      	orrs	r2, r3
 80020ba:	0011      	movs	r1, r2
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	019b      	lsls	r3, r3, #6
 80020c4:	401a      	ands	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	0c1b      	lsrs	r3, r3, #16
 80020d4:	2204      	movs	r2, #4
 80020d6:	4013      	ands	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020de:	2210      	movs	r2, #16
 80020e0:	401a      	ands	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <HAL_SPI_Init+0x124>)
 80020f6:	400a      	ands	r2, r1
 80020f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2251      	movs	r2, #81	; 0x51
 8002104:	2101      	movs	r1, #1
 8002106:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	fffff7ff 	.word	0xfffff7ff

08002118 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	001a      	movs	r2, r3
 8002126:	1cbb      	adds	r3, r7, #2
 8002128:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800212a:	2317      	movs	r3, #23
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2250      	movs	r2, #80	; 0x50
 8002136:	5c9b      	ldrb	r3, [r3, r2]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <HAL_SPI_TransmitReceive_IT+0x28>
 800213c:	2302      	movs	r3, #2
 800213e:	e086      	b.n	800224e <HAL_SPI_TransmitReceive_IT+0x136>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2250      	movs	r2, #80	; 0x50
 8002144:	2101      	movs	r1, #1
 8002146:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002148:	2016      	movs	r0, #22
 800214a:	183b      	adds	r3, r7, r0
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	2151      	movs	r1, #81	; 0x51
 8002150:	5c52      	ldrb	r2, [r2, r1]
 8002152:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800215a:	0001      	movs	r1, r0
 800215c:	187b      	adds	r3, r7, r1
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d011      	beq.n	8002188 <HAL_SPI_TransmitReceive_IT+0x70>
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	2382      	movs	r3, #130	; 0x82
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	429a      	cmp	r2, r3
 800216c:	d107      	bne.n	800217e <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d103      	bne.n	800217e <HAL_SPI_TransmitReceive_IT+0x66>
 8002176:	187b      	adds	r3, r7, r1
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b04      	cmp	r3, #4
 800217c:	d004      	beq.n	8002188 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800217e:	2317      	movs	r3, #23
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
    goto error;
 8002186:	e05b      	b.n	8002240 <HAL_SPI_TransmitReceive_IT+0x128>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_SPI_TransmitReceive_IT+0x84>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_SPI_TransmitReceive_IT+0x84>
 8002194:	1cbb      	adds	r3, r7, #2
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 800219c:	2317      	movs	r3, #23
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
    goto error;
 80021a4:	e04c      	b.n	8002240 <HAL_SPI_TransmitReceive_IT+0x128>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2251      	movs	r2, #81	; 0x51
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d003      	beq.n	80021ba <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2251      	movs	r2, #81	; 0x51
 80021b6:	2105      	movs	r1, #5
 80021b8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2200      	movs	r2, #0
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68ba      	ldr	r2, [r7, #8]
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1cba      	adds	r2, r7, #2
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1cba      	adds	r2, r7, #2
 80021d2:	8812      	ldrh	r2, [r2, #0]
 80021d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	1cba      	adds	r2, r7, #2
 80021e0:	8812      	ldrh	r2, [r2, #0]
 80021e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1cba      	adds	r2, r7, #2
 80021e8:	8812      	ldrh	r2, [r2, #0]
 80021ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d006      	beq.n	8002202 <HAL_SPI_TransmitReceive_IT+0xea>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a18      	ldr	r2, [pc, #96]	; (8002258 <HAL_SPI_TransmitReceive_IT+0x140>)
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a17      	ldr	r2, [pc, #92]	; (800225c <HAL_SPI_TransmitReceive_IT+0x144>)
 80021fe:	645a      	str	r2, [r3, #68]	; 0x44
 8002200:	e005      	b.n	800220e <HAL_SPI_TransmitReceive_IT+0xf6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a16      	ldr	r2, [pc, #88]	; (8002260 <HAL_SPI_TransmitReceive_IT+0x148>)
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a16      	ldr	r2, [pc, #88]	; (8002264 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	21e0      	movs	r1, #224	; 0xe0
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	4013      	ands	r3, r2
 8002228:	2b40      	cmp	r3, #64	; 0x40
 800222a:	d008      	beq.n	800223e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2140      	movs	r1, #64	; 0x40
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e000      	b.n	8002240 <HAL_SPI_TransmitReceive_IT+0x128>
  }

error :
 800223e:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2250      	movs	r2, #80	; 0x50
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002248:	2317      	movs	r3, #23
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	781b      	ldrb	r3, [r3, #0]
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b006      	add	sp, #24
 8002254:	bd80      	pop	{r7, pc}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	08002567 	.word	0x08002567
 800225c:	080025c9 	.word	0x080025c9
 8002260:	0800249f 	.word	0x0800249f
 8002264:	08002505 	.word	0x08002505

08002268 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	099b      	lsrs	r3, r3, #6
 8002284:	001a      	movs	r2, r3
 8002286:	2301      	movs	r3, #1
 8002288:	4013      	ands	r3, r2
 800228a:	d10f      	bne.n	80022ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	2201      	movs	r2, #1
 8002290:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002292:	d00b      	beq.n	80022ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	099b      	lsrs	r3, r3, #6
 8002298:	001a      	movs	r2, r3
 800229a:	2301      	movs	r3, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d005      	beq.n	80022ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	0010      	movs	r0, r2
 80022a8:	4798      	blx	r3
    return;
 80022aa:	e0d5      	b.n	8002458 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	001a      	movs	r2, r3
 80022b2:	2301      	movs	r3, #1
 80022b4:	4013      	ands	r3, r2
 80022b6:	d00b      	beq.n	80022d0 <HAL_SPI_IRQHandler+0x68>
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	09db      	lsrs	r3, r3, #7
 80022bc:	001a      	movs	r2, r3
 80022be:	2301      	movs	r3, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d005      	beq.n	80022d0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	0010      	movs	r0, r2
 80022cc:	4798      	blx	r3
    return;
 80022ce:	e0c3      	b.n	8002458 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	095b      	lsrs	r3, r3, #5
 80022d4:	001a      	movs	r2, r3
 80022d6:	2301      	movs	r3, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	d10c      	bne.n	80022f6 <HAL_SPI_IRQHandler+0x8e>
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	099b      	lsrs	r3, r3, #6
 80022e0:	001a      	movs	r2, r3
 80022e2:	2301      	movs	r3, #1
 80022e4:	4013      	ands	r3, r2
 80022e6:	d106      	bne.n	80022f6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	001a      	movs	r2, r3
 80022ee:	2301      	movs	r3, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	d100      	bne.n	80022f6 <HAL_SPI_IRQHandler+0x8e>
 80022f4:	e0b0      	b.n	8002458 <HAL_SPI_IRQHandler+0x1f0>
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	001a      	movs	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	4013      	ands	r3, r2
 8002300:	d100      	bne.n	8002304 <HAL_SPI_IRQHandler+0x9c>
 8002302:	e0a9      	b.n	8002458 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	099b      	lsrs	r3, r3, #6
 8002308:	001a      	movs	r2, r3
 800230a:	2301      	movs	r3, #1
 800230c:	4013      	ands	r3, r2
 800230e:	d023      	beq.n	8002358 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2251      	movs	r2, #81	; 0x51
 8002314:	5c9b      	ldrb	r3, [r3, r2]
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b03      	cmp	r3, #3
 800231a:	d011      	beq.n	8002340 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	2204      	movs	r2, #4
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	e00b      	b.n	8002358 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
        return;
 8002356:	e07f      	b.n	8002458 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	001a      	movs	r2, r3
 800235e:	2301      	movs	r3, #1
 8002360:	4013      	ands	r3, r2
 8002362:	d014      	beq.n	800238e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002368:	2201      	movs	r2, #1
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2140      	movs	r1, #64	; 0x40
 8002388:	438a      	bics	r2, r1
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	001a      	movs	r2, r3
 8002394:	2301      	movs	r3, #1
 8002396:	4013      	ands	r3, r2
 8002398:	d00c      	beq.n	80023b4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	2208      	movs	r2, #8
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d04c      	beq.n	8002456 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	21e0      	movs	r1, #224	; 0xe0
 80023c8:	438a      	bics	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2251      	movs	r2, #81	; 0x51
 80023d0:	2101      	movs	r1, #1
 80023d2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d103      	bne.n	80023e4 <HAL_SPI_IRQHandler+0x17c>
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	2201      	movs	r2, #1
 80023e0:	4013      	ands	r3, r2
 80023e2:	d032      	beq.n	800244a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2103      	movs	r1, #3
 80023f0:	438a      	bics	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d010      	beq.n	800241e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002400:	4a17      	ldr	r2, [pc, #92]	; (8002460 <HAL_SPI_IRQHandler+0x1f8>)
 8002402:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	0018      	movs	r0, r3
 800240a:	f7fe fc87 	bl	8000d1c <HAL_DMA_Abort_IT>
 800240e:	1e03      	subs	r3, r0, #0
 8002410:	d005      	beq.n	800241e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	2240      	movs	r2, #64	; 0x40
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	2b00      	cmp	r3, #0
 8002424:	d016      	beq.n	8002454 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242a:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <HAL_SPI_IRQHandler+0x1f8>)
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002432:	0018      	movs	r0, r3
 8002434:	f7fe fc72 	bl	8000d1c <HAL_DMA_Abort_IT>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d00b      	beq.n	8002454 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002448:	e004      	b.n	8002454 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f7fe f9db 	bl	8000808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002452:	e000      	b.n	8002456 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002454:	46c0      	nop			; (mov r8, r8)
    return;
 8002456:	46c0      	nop			; (mov r8, r8)
  }
}
 8002458:	46bd      	mov	sp, r7
 800245a:	b008      	add	sp, #32
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	08002475 	.word	0x08002475

08002464 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800246c:	46c0      	nop			; (mov r8, r8)
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	0018      	movs	r0, r3
 8002492:	f7fe f9b9 	bl	8000808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b004      	add	sp, #16
 800249c:	bd80      	pop	{r7, pc}

0800249e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	330c      	adds	r3, #12
 80024ac:	001a      	movs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	7812      	ldrb	r2, [r2, #0]
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d110      	bne.n	80024fc <SPI_2linesRxISR_8BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2160      	movs	r1, #96	; 0x60
 80024e6:	438a      	bics	r2, r1
 80024e8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d103      	bne.n	80024fc <SPI_2linesRxISR_8BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f96a 	bl	80027d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}

08002504 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	7812      	ldrb	r2, [r2, #0]
 8002518:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d110      	bne.n	800255e <SPI_2linesTxISR_8BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2180      	movs	r1, #128	; 0x80
 8002548:	438a      	bics	r2, r1
 800254a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d103      	bne.n	800255e <SPI_2linesTxISR_8BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f939 	bl	80027d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b002      	add	sp, #8
 8002564:	bd80      	pop	{r7, pc}

08002566 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68da      	ldr	r2, [r3, #12]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002578:	b292      	uxth	r2, r2
 800257a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002580:	1c9a      	adds	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800258a:	b29b      	uxth	r3, r3
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d110      	bne.n	80025c0 <SPI_2linesRxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2140      	movs	r1, #64	; 0x40
 80025aa:	438a      	bics	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d103      	bne.n	80025c0 <SPI_2linesRxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f000 f908 	bl	80027d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80025c0:	46c0      	nop			; (mov r8, r8)
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b002      	add	sp, #8
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	881a      	ldrh	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	1c9a      	adds	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d110      	bne.n	8002620 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	438a      	bics	r2, r1
 800260c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f000 f8d8 	bl	80027d0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b002      	add	sp, #8
 8002626:	bd80      	pop	{r7, pc}

08002628 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	1dfb      	adds	r3, r7, #7
 8002636:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002638:	f7fe fa64 	bl	8000b04 <HAL_GetTick>
 800263c:	0002      	movs	r2, r0
 800263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	18d3      	adds	r3, r2, r3
 8002646:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002648:	f7fe fa5c 	bl	8000b04 <HAL_GetTick>
 800264c:	0003      	movs	r3, r0
 800264e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	015b      	lsls	r3, r3, #5
 8002656:	0d1b      	lsrs	r3, r3, #20
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	4353      	muls	r3, r2
 800265c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800265e:	e058      	b.n	8002712 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	d055      	beq.n	8002712 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002666:	f7fe fa4d 	bl	8000b04 <HAL_GetTick>
 800266a:	0002      	movs	r2, r0
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	429a      	cmp	r2, r3
 8002674:	d902      	bls.n	800267c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d142      	bne.n	8002702 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	21e0      	movs	r1, #224	; 0xe0
 8002688:	438a      	bics	r2, r1
 800268a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	2382      	movs	r3, #130	; 0x82
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	429a      	cmp	r2, r3
 8002696:	d113      	bne.n	80026c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d005      	beq.n	80026b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d107      	bne.n	80026c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2140      	movs	r1, #64	; 0x40
 80026bc:	438a      	bics	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	019b      	lsls	r3, r3, #6
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d110      	bne.n	80026ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	491a      	ldr	r1, [pc, #104]	; (8002740 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0189      	lsls	r1, r1, #6
 80026ea:	430a      	orrs	r2, r1
 80026ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2251      	movs	r2, #81	; 0x51
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2250      	movs	r2, #80	; 0x50
 80026fa:	2100      	movs	r1, #0
 80026fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e017      	b.n	8002732 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3b01      	subs	r3, #1
 8002710:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	68ba      	ldr	r2, [r7, #8]
 800271a:	4013      	ands	r3, r2
 800271c:	68ba      	ldr	r2, [r7, #8]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	425a      	negs	r2, r3
 8002722:	4153      	adcs	r3, r2
 8002724:	b2db      	uxtb	r3, r3
 8002726:	001a      	movs	r2, r3
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d197      	bne.n	8002660 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b008      	add	sp, #32
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	20000078 	.word	0x20000078
 8002740:	ffffdfff 	.word	0xffffdfff

08002744 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002750:	4b1d      	ldr	r3, [pc, #116]	; (80027c8 <SPI_EndRxTxTransaction+0x84>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	491d      	ldr	r1, [pc, #116]	; (80027cc <SPI_EndRxTxTransaction+0x88>)
 8002756:	0018      	movs	r0, r3
 8002758:	f7fd fcd6 	bl	8000108 <__udivsi3>
 800275c:	0003      	movs	r3, r0
 800275e:	001a      	movs	r2, r3
 8002760:	0013      	movs	r3, r2
 8002762:	015b      	lsls	r3, r3, #5
 8002764:	1a9b      	subs	r3, r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	189b      	adds	r3, r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	2382      	movs	r3, #130	; 0x82
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	429a      	cmp	r2, r3
 8002778:	d112      	bne.n	80027a0 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	0013      	movs	r3, r2
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	f7ff ff4e 	bl	8002628 <SPI_WaitFlagStateUntilTimeout>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d016      	beq.n	80027be <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	2220      	movs	r2, #32
 8002796:	431a      	orrs	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e00f      	b.n	80027c0 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2280      	movs	r2, #128	; 0x80
 80027b4:	4013      	ands	r3, r2
 80027b6:	2b80      	cmp	r3, #128	; 0x80
 80027b8:	d0f2      	beq.n	80027a0 <SPI_EndRxTxTransaction+0x5c>
 80027ba:	e000      	b.n	80027be <SPI_EndRxTxTransaction+0x7a>
        break;
 80027bc:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b006      	add	sp, #24
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000078 	.word	0x20000078
 80027cc:	016e3600 	.word	0x016e3600

080027d0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80027d8:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <SPI_CloseRxTx_ISR+0xe8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4937      	ldr	r1, [pc, #220]	; (80028bc <SPI_CloseRxTx_ISR+0xec>)
 80027de:	0018      	movs	r0, r3
 80027e0:	f7fd fc92 	bl	8000108 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	001a      	movs	r2, r3
 80027e8:	2364      	movs	r3, #100	; 0x64
 80027ea:	4353      	muls	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80027ee:	f7fe f989 	bl	8000b04 <HAL_GetTick>
 80027f2:	0003      	movs	r3, r0
 80027f4:	617b      	str	r3, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2120      	movs	r1, #32
 8002802:	438a      	bics	r2, r1
 8002804:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <SPI_CloseRxTx_ISR+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002810:	2220      	movs	r2, #32
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002818:	e008      	b.n	800282c <SPI_CloseRxTx_ISR+0x5c>
    }
    count--;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	3b01      	subs	r3, #1
 800281e:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	d0ec      	beq.n	8002806 <SPI_CloseRxTx_ISR+0x36>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2164      	movs	r1, #100	; 0x64
 8002832:	0018      	movs	r0, r3
 8002834:	f7ff ff86 	bl	8002744 <SPI_EndRxTxTransaction>
 8002838:	1e03      	subs	r3, r0, #0
 800283a:	d005      	beq.n	8002848 <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	2220      	movs	r2, #32
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10a      	bne.n	8002866 <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002850:	2300      	movs	r3, #0
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800286a:	2b00      	cmp	r3, #0
 800286c:	d117      	bne.n	800289e <SPI_CloseRxTx_ISR+0xce>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2251      	movs	r2, #81	; 0x51
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b04      	cmp	r3, #4
 8002878:	d108      	bne.n	800288c <SPI_CloseRxTx_ISR+0xbc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2251      	movs	r2, #81	; 0x51
 800287e:	2101      	movs	r1, #1
 8002880:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f7ff fded 	bl	8002464 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800288a:	e010      	b.n	80028ae <SPI_CloseRxTx_ISR+0xde>
        hspi->State = HAL_SPI_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2251      	movs	r2, #81	; 0x51
 8002890:	2101      	movs	r1, #1
 8002892:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	0018      	movs	r0, r3
 8002898:	f7fd ffa2 	bl	80007e0 <HAL_SPI_TxRxCpltCallback>
}
 800289c:	e007      	b.n	80028ae <SPI_CloseRxTx_ISR+0xde>
      hspi->State = HAL_SPI_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2251      	movs	r2, #81	; 0x51
 80028a2:	2101      	movs	r1, #1
 80028a4:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fd ffad 	bl	8000808 <HAL_SPI_ErrorCallback>
}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b006      	add	sp, #24
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	20000078 	.word	0x20000078
 80028bc:	00005dc0 	.word	0x00005dc0

080028c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e044      	b.n	800295c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d107      	bne.n	80028ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2274      	movs	r2, #116	; 0x74
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe f80f 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2224      	movs	r2, #36	; 0x24
 80028ee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0018      	movs	r0, r3
 8002904:	f000 f830 	bl	8002968 <UART_SetConfig>
 8002908:	0003      	movs	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e024      	b.n	800295c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 fae1 	bl	8002ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	490d      	ldr	r1, [pc, #52]	; (8002964 <HAL_UART_Init+0xa4>)
 800292e:	400a      	ands	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	212a      	movs	r1, #42	; 0x2a
 800293e:	438a      	bics	r2, r1
 8002940:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2101      	movs	r1, #1
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	0018      	movs	r0, r3
 8002956:	f000 fb79 	bl	800304c <UART_CheckIdleState>
 800295a:	0003      	movs	r3, r0
}
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}
 8002964:	ffffb7ff 	.word	0xffffb7ff

08002968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b08e      	sub	sp, #56	; 0x38
 800296c:	af00      	add	r7, sp, #0
 800296e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002970:	231a      	movs	r3, #26
 8002972:	2218      	movs	r2, #24
 8002974:	4694      	mov	ip, r2
 8002976:	44bc      	add	ip, r7
 8002978:	4463      	add	r3, ip
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	431a      	orrs	r2, r3
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	431a      	orrs	r2, r3
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	4313      	orrs	r3, r2
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4ab0      	ldr	r2, [pc, #704]	; (8002c60 <UART_SetConfig+0x2f8>)
 800299e:	4013      	ands	r3, r2
 80029a0:	0019      	movs	r1, r3
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4aac      	ldr	r2, [pc, #688]	; (8002c64 <UART_SetConfig+0x2fc>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	0019      	movs	r1, r3
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	430a      	orrs	r2, r1
 80029c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4aa6      	ldr	r2, [pc, #664]	; (8002c68 <UART_SetConfig+0x300>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029da:	4313      	orrs	r3, r2
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4aa1      	ldr	r2, [pc, #644]	; (8002c6c <UART_SetConfig+0x304>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a9d      	ldr	r2, [pc, #628]	; (8002c70 <UART_SetConfig+0x308>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d136      	bne.n	8002a6c <UART_SetConfig+0x104>
 80029fe:	4b9d      	ldr	r3, [pc, #628]	; (8002c74 <UART_SetConfig+0x30c>)
 8002a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a02:	2203      	movs	r2, #3
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d020      	beq.n	8002a4c <UART_SetConfig+0xe4>
 8002a0a:	d827      	bhi.n	8002a5c <UART_SetConfig+0xf4>
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d00d      	beq.n	8002a2c <UART_SetConfig+0xc4>
 8002a10:	d824      	bhi.n	8002a5c <UART_SetConfig+0xf4>
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <UART_SetConfig+0xb4>
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d010      	beq.n	8002a3c <UART_SetConfig+0xd4>
 8002a1a:	e01f      	b.n	8002a5c <UART_SetConfig+0xf4>
 8002a1c:	231b      	movs	r3, #27
 8002a1e:	2218      	movs	r2, #24
 8002a20:	4694      	mov	ip, r2
 8002a22:	44bc      	add	ip, r7
 8002a24:	4463      	add	r3, ip
 8002a26:	2201      	movs	r2, #1
 8002a28:	701a      	strb	r2, [r3, #0]
 8002a2a:	e0c5      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002a2c:	231b      	movs	r3, #27
 8002a2e:	2218      	movs	r2, #24
 8002a30:	4694      	mov	ip, r2
 8002a32:	44bc      	add	ip, r7
 8002a34:	4463      	add	r3, ip
 8002a36:	2202      	movs	r2, #2
 8002a38:	701a      	strb	r2, [r3, #0]
 8002a3a:	e0bd      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002a3c:	231b      	movs	r3, #27
 8002a3e:	2218      	movs	r2, #24
 8002a40:	4694      	mov	ip, r2
 8002a42:	44bc      	add	ip, r7
 8002a44:	4463      	add	r3, ip
 8002a46:	2204      	movs	r2, #4
 8002a48:	701a      	strb	r2, [r3, #0]
 8002a4a:	e0b5      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002a4c:	231b      	movs	r3, #27
 8002a4e:	2218      	movs	r2, #24
 8002a50:	4694      	mov	ip, r2
 8002a52:	44bc      	add	ip, r7
 8002a54:	4463      	add	r3, ip
 8002a56:	2208      	movs	r2, #8
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e0ad      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002a5c:	231b      	movs	r3, #27
 8002a5e:	2218      	movs	r2, #24
 8002a60:	4694      	mov	ip, r2
 8002a62:	44bc      	add	ip, r7
 8002a64:	4463      	add	r3, ip
 8002a66:	2210      	movs	r2, #16
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e0a5      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a81      	ldr	r2, [pc, #516]	; (8002c78 <UART_SetConfig+0x310>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d136      	bne.n	8002ae4 <UART_SetConfig+0x17c>
 8002a76:	4b7f      	ldr	r3, [pc, #508]	; (8002c74 <UART_SetConfig+0x30c>)
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	220c      	movs	r2, #12
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d020      	beq.n	8002ac4 <UART_SetConfig+0x15c>
 8002a82:	d827      	bhi.n	8002ad4 <UART_SetConfig+0x16c>
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d00d      	beq.n	8002aa4 <UART_SetConfig+0x13c>
 8002a88:	d824      	bhi.n	8002ad4 <UART_SetConfig+0x16c>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <UART_SetConfig+0x12c>
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d010      	beq.n	8002ab4 <UART_SetConfig+0x14c>
 8002a92:	e01f      	b.n	8002ad4 <UART_SetConfig+0x16c>
 8002a94:	231b      	movs	r3, #27
 8002a96:	2218      	movs	r2, #24
 8002a98:	4694      	mov	ip, r2
 8002a9a:	44bc      	add	ip, r7
 8002a9c:	4463      	add	r3, ip
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e089      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002aa4:	231b      	movs	r3, #27
 8002aa6:	2218      	movs	r2, #24
 8002aa8:	4694      	mov	ip, r2
 8002aaa:	44bc      	add	ip, r7
 8002aac:	4463      	add	r3, ip
 8002aae:	2202      	movs	r2, #2
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	e081      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002ab4:	231b      	movs	r3, #27
 8002ab6:	2218      	movs	r2, #24
 8002ab8:	4694      	mov	ip, r2
 8002aba:	44bc      	add	ip, r7
 8002abc:	4463      	add	r3, ip
 8002abe:	2204      	movs	r2, #4
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e079      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002ac4:	231b      	movs	r3, #27
 8002ac6:	2218      	movs	r2, #24
 8002ac8:	4694      	mov	ip, r2
 8002aca:	44bc      	add	ip, r7
 8002acc:	4463      	add	r3, ip
 8002ace:	2208      	movs	r2, #8
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e071      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002ad4:	231b      	movs	r3, #27
 8002ad6:	2218      	movs	r2, #24
 8002ad8:	4694      	mov	ip, r2
 8002ada:	44bc      	add	ip, r7
 8002adc:	4463      	add	r3, ip
 8002ade:	2210      	movs	r2, #16
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e069      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <UART_SetConfig+0x314>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d107      	bne.n	8002afe <UART_SetConfig+0x196>
 8002aee:	231b      	movs	r3, #27
 8002af0:	2218      	movs	r2, #24
 8002af2:	4694      	mov	ip, r2
 8002af4:	44bc      	add	ip, r7
 8002af6:	4463      	add	r3, ip
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e05c      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5f      	ldr	r2, [pc, #380]	; (8002c80 <UART_SetConfig+0x318>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d107      	bne.n	8002b18 <UART_SetConfig+0x1b0>
 8002b08:	231b      	movs	r3, #27
 8002b0a:	2218      	movs	r2, #24
 8002b0c:	4694      	mov	ip, r2
 8002b0e:	44bc      	add	ip, r7
 8002b10:	4463      	add	r3, ip
 8002b12:	2200      	movs	r2, #0
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e04f      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <UART_SetConfig+0x300>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d143      	bne.n	8002baa <UART_SetConfig+0x242>
 8002b22:	4b54      	ldr	r3, [pc, #336]	; (8002c74 <UART_SetConfig+0x30c>)
 8002b24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b26:	23c0      	movs	r3, #192	; 0xc0
 8002b28:	011b      	lsls	r3, r3, #4
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	22c0      	movs	r2, #192	; 0xc0
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d02a      	beq.n	8002b8a <UART_SetConfig+0x222>
 8002b34:	22c0      	movs	r2, #192	; 0xc0
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d82e      	bhi.n	8002b9a <UART_SetConfig+0x232>
 8002b3c:	2280      	movs	r2, #128	; 0x80
 8002b3e:	0112      	lsls	r2, r2, #4
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d012      	beq.n	8002b6a <UART_SetConfig+0x202>
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d826      	bhi.n	8002b9a <UART_SetConfig+0x232>
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <UART_SetConfig+0x1f2>
 8002b50:	2280      	movs	r2, #128	; 0x80
 8002b52:	00d2      	lsls	r2, r2, #3
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d010      	beq.n	8002b7a <UART_SetConfig+0x212>
 8002b58:	e01f      	b.n	8002b9a <UART_SetConfig+0x232>
 8002b5a:	231b      	movs	r3, #27
 8002b5c:	2218      	movs	r2, #24
 8002b5e:	4694      	mov	ip, r2
 8002b60:	44bc      	add	ip, r7
 8002b62:	4463      	add	r3, ip
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e026      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002b6a:	231b      	movs	r3, #27
 8002b6c:	2218      	movs	r2, #24
 8002b6e:	4694      	mov	ip, r2
 8002b70:	44bc      	add	ip, r7
 8002b72:	4463      	add	r3, ip
 8002b74:	2202      	movs	r2, #2
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e01e      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002b7a:	231b      	movs	r3, #27
 8002b7c:	2218      	movs	r2, #24
 8002b7e:	4694      	mov	ip, r2
 8002b80:	44bc      	add	ip, r7
 8002b82:	4463      	add	r3, ip
 8002b84:	2204      	movs	r2, #4
 8002b86:	701a      	strb	r2, [r3, #0]
 8002b88:	e016      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002b8a:	231b      	movs	r3, #27
 8002b8c:	2218      	movs	r2, #24
 8002b8e:	4694      	mov	ip, r2
 8002b90:	44bc      	add	ip, r7
 8002b92:	4463      	add	r3, ip
 8002b94:	2208      	movs	r2, #8
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	e00e      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002b9a:	231b      	movs	r3, #27
 8002b9c:	2218      	movs	r2, #24
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	44bc      	add	ip, r7
 8002ba2:	4463      	add	r3, ip
 8002ba4:	2210      	movs	r2, #16
 8002ba6:	701a      	strb	r2, [r3, #0]
 8002ba8:	e006      	b.n	8002bb8 <UART_SetConfig+0x250>
 8002baa:	231b      	movs	r3, #27
 8002bac:	2218      	movs	r2, #24
 8002bae:	4694      	mov	ip, r2
 8002bb0:	44bc      	add	ip, r7
 8002bb2:	4463      	add	r3, ip
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a2a      	ldr	r2, [pc, #168]	; (8002c68 <UART_SetConfig+0x300>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d000      	beq.n	8002bc4 <UART_SetConfig+0x25c>
 8002bc2:	e09e      	b.n	8002d02 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bc4:	231b      	movs	r3, #27
 8002bc6:	2218      	movs	r2, #24
 8002bc8:	4694      	mov	ip, r2
 8002bca:	44bc      	add	ip, r7
 8002bcc:	4463      	add	r3, ip
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b08      	cmp	r3, #8
 8002bd2:	d01d      	beq.n	8002c10 <UART_SetConfig+0x2a8>
 8002bd4:	dc20      	bgt.n	8002c18 <UART_SetConfig+0x2b0>
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d015      	beq.n	8002c06 <UART_SetConfig+0x29e>
 8002bda:	dc1d      	bgt.n	8002c18 <UART_SetConfig+0x2b0>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <UART_SetConfig+0x27e>
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d005      	beq.n	8002bf0 <UART_SetConfig+0x288>
 8002be4:	e018      	b.n	8002c18 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002be6:	f7ff f863 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8002bea:	0003      	movs	r3, r0
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bee:	e01d      	b.n	8002c2c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf0:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <UART_SetConfig+0x30c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d002      	beq.n	8002c00 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <UART_SetConfig+0x31c>)
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bfe:	e015      	b.n	8002c2c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002c00:	4b21      	ldr	r3, [pc, #132]	; (8002c88 <UART_SetConfig+0x320>)
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c04:	e012      	b.n	8002c2c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c06:	f7fe ffa3 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0e:	e00d      	b.n	8002c2c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c16:	e009      	b.n	8002c2c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c1c:	231a      	movs	r3, #26
 8002c1e:	2218      	movs	r2, #24
 8002c20:	4694      	mov	ip, r2
 8002c22:	44bc      	add	ip, r7
 8002c24:	4463      	add	r3, ip
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
        break;
 8002c2a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d100      	bne.n	8002c34 <UART_SetConfig+0x2cc>
 8002c32:	e13c      	b.n	8002eae <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	0013      	movs	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	189b      	adds	r3, r3, r2
 8002c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d305      	bcc.n	8002c50 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d91d      	bls.n	8002c8c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002c50:	231a      	movs	r3, #26
 8002c52:	2218      	movs	r2, #24
 8002c54:	4694      	mov	ip, r2
 8002c56:	44bc      	add	ip, r7
 8002c58:	4463      	add	r3, ip
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
 8002c5e:	e126      	b.n	8002eae <UART_SetConfig+0x546>
 8002c60:	efff69f3 	.word	0xefff69f3
 8002c64:	ffffcfff 	.word	0xffffcfff
 8002c68:	40004800 	.word	0x40004800
 8002c6c:	fffff4ff 	.word	0xfffff4ff
 8002c70:	40013800 	.word	0x40013800
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40004400 	.word	0x40004400
 8002c7c:	40004c00 	.word	0x40004c00
 8002c80:	40005000 	.word	0x40005000
 8002c84:	003d0900 	.word	0x003d0900
 8002c88:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
 8002c94:	6939      	ldr	r1, [r7, #16]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	000b      	movs	r3, r1
 8002c9a:	0e1b      	lsrs	r3, r3, #24
 8002c9c:	0010      	movs	r0, r2
 8002c9e:	0205      	lsls	r5, r0, #8
 8002ca0:	431d      	orrs	r5, r3
 8002ca2:	000b      	movs	r3, r1
 8002ca4:	021c      	lsls	r4, r3, #8
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68b8      	ldr	r0, [r7, #8]
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	1900      	adds	r0, r0, r4
 8002cb8:	4169      	adcs	r1, r5
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	603b      	str	r3, [r7, #0]
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f7fd faaa 	bl	8000220 <__aeabi_uldivmod>
 8002ccc:	0002      	movs	r2, r0
 8002cce:	000b      	movs	r3, r1
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002cd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd6:	23c0      	movs	r3, #192	; 0xc0
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d309      	bcc.n	8002cf2 <UART_SetConfig+0x38a>
 8002cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	035b      	lsls	r3, r3, #13
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d204      	bcs.n	8002cf2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cee:	60da      	str	r2, [r3, #12]
 8002cf0:	e0dd      	b.n	8002eae <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002cf2:	231a      	movs	r3, #26
 8002cf4:	2218      	movs	r2, #24
 8002cf6:	4694      	mov	ip, r2
 8002cf8:	44bc      	add	ip, r7
 8002cfa:	4463      	add	r3, ip
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e0d5      	b.n	8002eae <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d000      	beq.n	8002d10 <UART_SetConfig+0x3a8>
 8002d0e:	e074      	b.n	8002dfa <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002d10:	231b      	movs	r3, #27
 8002d12:	2218      	movs	r2, #24
 8002d14:	4694      	mov	ip, r2
 8002d16:	44bc      	add	ip, r7
 8002d18:	4463      	add	r3, ip
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	d822      	bhi.n	8002d66 <UART_SetConfig+0x3fe>
 8002d20:	009a      	lsls	r2, r3, #2
 8002d22:	4b6b      	ldr	r3, [pc, #428]	; (8002ed0 <UART_SetConfig+0x568>)
 8002d24:	18d3      	adds	r3, r2, r3
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d2a:	f7fe ffc1 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d32:	e022      	b.n	8002d7a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d34:	f7fe ffd2 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3c:	e01d      	b.n	8002d7a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d3e:	4b65      	ldr	r3, [pc, #404]	; (8002ed4 <UART_SetConfig+0x56c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2210      	movs	r2, #16
 8002d44:	4013      	ands	r3, r2
 8002d46:	d002      	beq.n	8002d4e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d48:	4b63      	ldr	r3, [pc, #396]	; (8002ed8 <UART_SetConfig+0x570>)
 8002d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d4c:	e015      	b.n	8002d7a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002d4e:	4b63      	ldr	r3, [pc, #396]	; (8002edc <UART_SetConfig+0x574>)
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d52:	e012      	b.n	8002d7a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d54:	f7fe fefc 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d5c:	e00d      	b.n	8002d7a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d64:	e009      	b.n	8002d7a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d6a:	231a      	movs	r3, #26
 8002d6c:	2218      	movs	r2, #24
 8002d6e:	4694      	mov	ip, r2
 8002d70:	44bc      	add	ip, r7
 8002d72:	4463      	add	r3, ip
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
        break;
 8002d78:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d100      	bne.n	8002d82 <UART_SetConfig+0x41a>
 8002d80:	e095      	b.n	8002eae <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d84:	005a      	lsls	r2, r3, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	085b      	lsrs	r3, r3, #1
 8002d8c:	18d2      	adds	r2, r2, r3
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	0019      	movs	r1, r3
 8002d94:	0010      	movs	r0, r2
 8002d96:	f7fd f9b7 	bl	8000108 <__udivsi3>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da2:	2b0f      	cmp	r3, #15
 8002da4:	d921      	bls.n	8002dea <UART_SetConfig+0x482>
 8002da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d21c      	bcs.n	8002dea <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	200e      	movs	r0, #14
 8002db6:	2418      	movs	r4, #24
 8002db8:	193b      	adds	r3, r7, r4
 8002dba:	181b      	adds	r3, r3, r0
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	438a      	bics	r2, r1
 8002dc0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2207      	movs	r2, #7
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b299      	uxth	r1, r3
 8002dce:	193b      	adds	r3, r7, r4
 8002dd0:	181b      	adds	r3, r3, r0
 8002dd2:	193a      	adds	r2, r7, r4
 8002dd4:	1812      	adds	r2, r2, r0
 8002dd6:	8812      	ldrh	r2, [r2, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	193a      	adds	r2, r7, r4
 8002de2:	1812      	adds	r2, r2, r0
 8002de4:	8812      	ldrh	r2, [r2, #0]
 8002de6:	60da      	str	r2, [r3, #12]
 8002de8:	e061      	b.n	8002eae <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002dea:	231a      	movs	r3, #26
 8002dec:	2218      	movs	r2, #24
 8002dee:	4694      	mov	ip, r2
 8002df0:	44bc      	add	ip, r7
 8002df2:	4463      	add	r3, ip
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	e059      	b.n	8002eae <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dfa:	231b      	movs	r3, #27
 8002dfc:	2218      	movs	r2, #24
 8002dfe:	4694      	mov	ip, r2
 8002e00:	44bc      	add	ip, r7
 8002e02:	4463      	add	r3, ip
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d822      	bhi.n	8002e50 <UART_SetConfig+0x4e8>
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <UART_SetConfig+0x578>)
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e14:	f7fe ff4c 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e1c:	e022      	b.n	8002e64 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e1e:	f7fe ff5d 	bl	8001cdc <HAL_RCC_GetPCLK2Freq>
 8002e22:	0003      	movs	r3, r0
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e26:	e01d      	b.n	8002e64 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e28:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <UART_SetConfig+0x56c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d002      	beq.n	8002e38 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <UART_SetConfig+0x570>)
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e36:	e015      	b.n	8002e64 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8002e38:	4b28      	ldr	r3, [pc, #160]	; (8002edc <UART_SetConfig+0x574>)
 8002e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e3c:	e012      	b.n	8002e64 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e3e:	f7fe fe87 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8002e42:	0003      	movs	r3, r0
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e46:	e00d      	b.n	8002e64 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e4e:	e009      	b.n	8002e64 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e54:	231a      	movs	r3, #26
 8002e56:	2218      	movs	r2, #24
 8002e58:	4694      	mov	ip, r2
 8002e5a:	44bc      	add	ip, r7
 8002e5c:	4463      	add	r3, ip
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
        break;
 8002e62:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d021      	beq.n	8002eae <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	085a      	lsrs	r2, r3, #1
 8002e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e72:	18d2      	adds	r2, r2, r3
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	0019      	movs	r1, r3
 8002e7a:	0010      	movs	r0, r2
 8002e7c:	f7fd f944 	bl	8000108 <__udivsi3>
 8002e80:	0003      	movs	r3, r0
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	2b0f      	cmp	r3, #15
 8002e8a:	d909      	bls.n	8002ea0 <UART_SetConfig+0x538>
 8002e8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	025b      	lsls	r3, r3, #9
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d204      	bcs.n	8002ea0 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	e006      	b.n	8002eae <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002ea0:	231a      	movs	r3, #26
 8002ea2:	2218      	movs	r2, #24
 8002ea4:	4694      	mov	ip, r2
 8002ea6:	44bc      	add	ip, r7
 8002ea8:	4463      	add	r3, ip
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002eba:	231a      	movs	r3, #26
 8002ebc:	2218      	movs	r2, #24
 8002ebe:	4694      	mov	ip, r2
 8002ec0:	44bc      	add	ip, r7
 8002ec2:	4463      	add	r3, ip
 8002ec4:	781b      	ldrb	r3, [r3, #0]
}
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	b00e      	add	sp, #56	; 0x38
 8002ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	080032f8 	.word	0x080032f8
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	003d0900 	.word	0x003d0900
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	0800331c 	.word	0x0800331c

08002ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a4a      	ldr	r2, [pc, #296]	; (8003028 <UART_AdvFeatureConfig+0x144>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	0019      	movs	r1, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2202      	movs	r2, #2
 8002f14:	4013      	ands	r3, r2
 8002f16:	d00b      	beq.n	8002f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4a43      	ldr	r2, [pc, #268]	; (800302c <UART_AdvFeatureConfig+0x148>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	0019      	movs	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2204      	movs	r2, #4
 8002f36:	4013      	ands	r3, r2
 8002f38:	d00b      	beq.n	8002f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <UART_AdvFeatureConfig+0x14c>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	0019      	movs	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	2208      	movs	r2, #8
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d00b      	beq.n	8002f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	4a34      	ldr	r2, [pc, #208]	; (8003034 <UART_AdvFeatureConfig+0x150>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	0019      	movs	r1, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	2210      	movs	r2, #16
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4a2c      	ldr	r2, [pc, #176]	; (8003038 <UART_AdvFeatureConfig+0x154>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	0019      	movs	r1, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d00b      	beq.n	8002fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	4a25      	ldr	r2, [pc, #148]	; (800303c <UART_AdvFeatureConfig+0x158>)
 8002fa8:	4013      	ands	r3, r2
 8002faa:	0019      	movs	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	2240      	movs	r2, #64	; 0x40
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d01d      	beq.n	8002ffe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	4a1d      	ldr	r2, [pc, #116]	; (8003040 <UART_AdvFeatureConfig+0x15c>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	035b      	lsls	r3, r3, #13
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d10b      	bne.n	8002ffe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <UART_AdvFeatureConfig+0x160>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003002:	2280      	movs	r2, #128	; 0x80
 8003004:	4013      	ands	r3, r2
 8003006:	d00b      	beq.n	8003020 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4a0e      	ldr	r2, [pc, #56]	; (8003048 <UART_AdvFeatureConfig+0x164>)
 8003010:	4013      	ands	r3, r2
 8003012:	0019      	movs	r1, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	605a      	str	r2, [r3, #4]
  }
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}
 8003028:	fffdffff 	.word	0xfffdffff
 800302c:	fffeffff 	.word	0xfffeffff
 8003030:	fffbffff 	.word	0xfffbffff
 8003034:	ffff7fff 	.word	0xffff7fff
 8003038:	ffffefff 	.word	0xffffefff
 800303c:	ffffdfff 	.word	0xffffdfff
 8003040:	ffefffff 	.word	0xffefffff
 8003044:	ff9fffff 	.word	0xff9fffff
 8003048:	fff7ffff 	.word	0xfff7ffff

0800304c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2280      	movs	r2, #128	; 0x80
 8003058:	2100      	movs	r1, #0
 800305a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800305c:	f7fd fd52 	bl	8000b04 <HAL_GetTick>
 8003060:	0003      	movs	r3, r0
 8003062:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2208      	movs	r2, #8
 800306c:	4013      	ands	r3, r2
 800306e:	2b08      	cmp	r3, #8
 8003070:	d10c      	bne.n	800308c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2280      	movs	r2, #128	; 0x80
 8003076:	0391      	lsls	r1, r2, #14
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4a17      	ldr	r2, [pc, #92]	; (80030d8 <UART_CheckIdleState+0x8c>)
 800307c:	9200      	str	r2, [sp, #0]
 800307e:	2200      	movs	r2, #0
 8003080:	f000 f82c 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 8003084:	1e03      	subs	r3, r0, #0
 8003086:	d001      	beq.n	800308c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e021      	b.n	80030d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2204      	movs	r2, #4
 8003094:	4013      	ands	r3, r2
 8003096:	2b04      	cmp	r3, #4
 8003098:	d10c      	bne.n	80030b4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2280      	movs	r2, #128	; 0x80
 800309e:	03d1      	lsls	r1, r2, #15
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <UART_CheckIdleState+0x8c>)
 80030a4:	9200      	str	r2, [sp, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f000 f818 	bl	80030dc <UART_WaitOnFlagUntilTimeout>
 80030ac:	1e03      	subs	r3, r0, #0
 80030ae:	d001      	beq.n	80030b4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e00d      	b.n	80030d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2274      	movs	r2, #116	; 0x74
 80030ca:	2100      	movs	r1, #0
 80030cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b004      	add	sp, #16
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	01ffffff 	.word	0x01ffffff

080030dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b094      	sub	sp, #80	; 0x50
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	1dfb      	adds	r3, r7, #7
 80030ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ec:	e0a3      	b.n	8003236 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030f0:	3301      	adds	r3, #1
 80030f2:	d100      	bne.n	80030f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80030f4:	e09f      	b.n	8003236 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f6:	f7fd fd05 	bl	8000b04 <HAL_GetTick>
 80030fa:	0002      	movs	r2, r0
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003102:	429a      	cmp	r2, r3
 8003104:	d302      	bcc.n	800310c <UART_WaitOnFlagUntilTimeout+0x30>
 8003106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003108:	2b00      	cmp	r3, #0
 800310a:	d13d      	bne.n	8003188 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310c:	f3ef 8310 	mrs	r3, PRIMASK
 8003110:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003112:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003114:	647b      	str	r3, [r7, #68]	; 0x44
 8003116:	2301      	movs	r3, #1
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800311c:	f383 8810 	msr	PRIMASK, r3
}
 8003120:	46c0      	nop			; (mov r8, r8)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	494c      	ldr	r1, [pc, #304]	; (8003260 <UART_WaitOnFlagUntilTimeout+0x184>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]
 8003132:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003134:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	f383 8810 	msr	PRIMASK, r3
}
 800313c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003146:	643b      	str	r3, [r7, #64]	; 0x40
 8003148:	2301      	movs	r3, #1
 800314a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800314e:	f383 8810 	msr	PRIMASK, r3
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2101      	movs	r1, #1
 8003160:	438a      	bics	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003166:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316a:	f383 8810 	msr	PRIMASK, r3
}
 800316e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2274      	movs	r2, #116	; 0x74
 8003180:	2100      	movs	r1, #0
 8003182:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e067      	b.n	8003258 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2204      	movs	r2, #4
 8003190:	4013      	ands	r3, r2
 8003192:	d050      	beq.n	8003236 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	2380      	movs	r3, #128	; 0x80
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	401a      	ands	r2, r3
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d146      	bne.n	8003236 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b2:	f3ef 8310 	mrs	r3, PRIMASK
 80031b6:	613b      	str	r3, [r7, #16]
  return(result);
 80031b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031bc:	2301      	movs	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f383 8810 	msr	PRIMASK, r3
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4923      	ldr	r1, [pc, #140]	; (8003260 <UART_WaitOnFlagUntilTimeout+0x184>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f383 8810 	msr	PRIMASK, r3
}
 80031e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80031ea:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ee:	2301      	movs	r3, #1
 80031f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2101      	movs	r1, #1
 8003206:	438a      	bics	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2280      	movs	r2, #128	; 0x80
 8003226:	2120      	movs	r1, #32
 8003228:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2274      	movs	r2, #116	; 0x74
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e010      	b.n	8003258 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	4013      	ands	r3, r2
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	425a      	negs	r2, r3
 8003246:	4153      	adcs	r3, r2
 8003248:	b2db      	uxtb	r3, r3
 800324a:	001a      	movs	r2, r3
 800324c:	1dfb      	adds	r3, r7, #7
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d100      	bne.n	8003256 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003254:	e74b      	b.n	80030ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	0018      	movs	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	b014      	add	sp, #80	; 0x50
 800325e:	bd80      	pop	{r7, pc}
 8003260:	fffffe5f 	.word	0xfffffe5f

08003264 <__libc_init_array>:
 8003264:	b570      	push	{r4, r5, r6, lr}
 8003266:	2600      	movs	r6, #0
 8003268:	4d0c      	ldr	r5, [pc, #48]	; (800329c <__libc_init_array+0x38>)
 800326a:	4c0d      	ldr	r4, [pc, #52]	; (80032a0 <__libc_init_array+0x3c>)
 800326c:	1b64      	subs	r4, r4, r5
 800326e:	10a4      	asrs	r4, r4, #2
 8003270:	42a6      	cmp	r6, r4
 8003272:	d109      	bne.n	8003288 <__libc_init_array+0x24>
 8003274:	2600      	movs	r6, #0
 8003276:	f000 f821 	bl	80032bc <_init>
 800327a:	4d0a      	ldr	r5, [pc, #40]	; (80032a4 <__libc_init_array+0x40>)
 800327c:	4c0a      	ldr	r4, [pc, #40]	; (80032a8 <__libc_init_array+0x44>)
 800327e:	1b64      	subs	r4, r4, r5
 8003280:	10a4      	asrs	r4, r4, #2
 8003282:	42a6      	cmp	r6, r4
 8003284:	d105      	bne.n	8003292 <__libc_init_array+0x2e>
 8003286:	bd70      	pop	{r4, r5, r6, pc}
 8003288:	00b3      	lsls	r3, r6, #2
 800328a:	58eb      	ldr	r3, [r5, r3]
 800328c:	4798      	blx	r3
 800328e:	3601      	adds	r6, #1
 8003290:	e7ee      	b.n	8003270 <__libc_init_array+0xc>
 8003292:	00b3      	lsls	r3, r6, #2
 8003294:	58eb      	ldr	r3, [r5, r3]
 8003296:	4798      	blx	r3
 8003298:	3601      	adds	r6, #1
 800329a:	e7f2      	b.n	8003282 <__libc_init_array+0x1e>
 800329c:	08003348 	.word	0x08003348
 80032a0:	08003348 	.word	0x08003348
 80032a4:	08003348 	.word	0x08003348
 80032a8:	0800334c 	.word	0x0800334c

080032ac <memset>:
 80032ac:	0003      	movs	r3, r0
 80032ae:	1882      	adds	r2, r0, r2
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d100      	bne.n	80032b6 <memset+0xa>
 80032b4:	4770      	bx	lr
 80032b6:	7019      	strb	r1, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	e7f9      	b.n	80032b0 <memset+0x4>

080032bc <_init>:
 80032bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032be:	46c0      	nop			; (mov r8, r8)
 80032c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032c2:	bc08      	pop	{r3}
 80032c4:	469e      	mov	lr, r3
 80032c6:	4770      	bx	lr

080032c8 <_fini>:
 80032c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032ce:	bc08      	pop	{r3}
 80032d0:	469e      	mov	lr, r3
 80032d2:	4770      	bx	lr
