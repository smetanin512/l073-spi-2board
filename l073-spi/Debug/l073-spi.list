
l073-spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003a70  08003a70  00013a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003adc  08003adc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ae4  08003ae4  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ae4  08003ae4  00013ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000084  08003b70  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08003b70  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b47a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000197d  00000000  00000000  0002b526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002d7d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c36  00000000  00000000  0002e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b289  00000000  00000000  00041ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b2a8  00000000  00000000  0004cf2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c81d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002068  00000000  00000000  000c822c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a58 	.word	0x08003a58

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08003a58 	.word	0x08003a58

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <Buffercmp>:
 * @param  BufferLength: buffer's length
 * @retval 0  : pBuffer1 identical to pBuffer2
 *         >0 : pBuffer1 differs from pBuffer2
 */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	1dbb      	adds	r3, r7, #6
 80004a8:	801a      	strh	r2, [r3, #0]
	while (BufferLength--)
 80004aa:	e00e      	b.n	80004ca <Buffercmp+0x2e>
	{
		if((*pBuffer1) != *pBuffer2)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d002      	beq.n	80004be <Buffercmp+0x22>
		{
			return BufferLength;
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	e00d      	b.n	80004da <Buffercmp+0x3e>
		}
		pBuffer1++;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3301      	adds	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
		pBuffer2++;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
	while (BufferLength--)
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	1dba      	adds	r2, r7, #6
 80004d0:	1e59      	subs	r1, r3, #1
 80004d2:	8011      	strh	r1, [r2, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d1e9      	bne.n	80004ac <Buffercmp+0x10>
	}

	return 0;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	0018      	movs	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fb50 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f844 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f944 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004f4:	f000 f8f4 	bl	80006e0 <MX_USART2_UART_Init>
  MX_DMA_Init();
 80004f8:	f000 f922 	bl	8000740 <MX_DMA_Init>
  MX_SPI2_Init();
 80004fc:	f000 f8ae 	bl	800065c <MX_SPI2_Init>
		Error_Handler();
	}
	/*END MASTER_BOARD */
#else/* SLAVE_BOARD */

	if(HAL_SPI_Receive_DMA(&hspi2,(uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 8000500:	4918      	ldr	r1, [pc, #96]	; (8000564 <main+0x80>)
 8000502:	4b19      	ldr	r3, [pc, #100]	; (8000568 <main+0x84>)
 8000504:	2275      	movs	r2, #117	; 0x75
 8000506:	0018      	movs	r0, r3
 8000508:	f002 f86a 	bl	80025e0 <HAL_SPI_Receive_DMA>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d001      	beq.n	8000514 <main+0x30>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 8000510:	f000 f9c6 	bl	80008a0 <Error_Handler>
	}


	while (wTransferState == TRANSFER_WAIT)
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <main+0x88>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d0fb      	beq.n	8000516 <main+0x32>
	{
	}

	switch(wTransferState)
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0x88>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d10a      	bne.n	800053c <main+0x58>
	{
	case TRANSFER_COMPLETE :
		/*##-4- Compare the sent and received buffers ##############################*/
		if(Buffercmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 8000526:	490f      	ldr	r1, [pc, #60]	; (8000564 <main+0x80>)
 8000528:	4b11      	ldr	r3, [pc, #68]	; (8000570 <main+0x8c>)
 800052a:	2275      	movs	r2, #117	; 0x75
 800052c:	0018      	movs	r0, r3
 800052e:	f7ff ffb5 	bl	800049c <Buffercmp>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d005      	beq.n	8000542 <main+0x5e>
		{
			/* Processing Error */
			Error_Handler();
 8000536:	f000 f9b3 	bl	80008a0 <Error_Handler>
		}
		break;
 800053a:	e002      	b.n	8000542 <main+0x5e>
	default :
		Error_Handler();
 800053c:	f000 f9b0 	bl	80008a0 <Error_Handler>
		break;
 8000540:	e000      	b.n	8000544 <main+0x60>
		break;
 8000542:	46c0      	nop			; (mov r8, r8)
	}
	HAL_Delay(3000);
 8000544:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <main+0x90>)
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fb90 	bl	8000c6c <HAL_Delay>
	while (1)
	{
//#ifdef MASTER_BOARD
		//#endif

		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800054c:	23a0      	movs	r3, #160	; 0xa0
 800054e:	05db      	lsls	r3, r3, #23
 8000550:	2120      	movs	r1, #32
 8000552:	0018      	movs	r0, r3
 8000554:	f001 f829 	bl	80015aa <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000558:	23fa      	movs	r3, #250	; 0xfa
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fb85 	bl	8000c6c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000562:	e7f3      	b.n	800054c <main+0x68>
 8000564:	20000144 	.word	0x20000144
 8000568:	200000a4 	.word	0x200000a4
 800056c:	200000a0 	.word	0x200000a0
 8000570:	20000000 	.word	0x20000000
 8000574:	00000bb8 	.word	0x00000bb8

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b09f      	sub	sp, #124	; 0x7c
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	2440      	movs	r4, #64	; 0x40
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2338      	movs	r3, #56	; 0x38
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f003 fa5d 	bl	8003a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	232c      	movs	r3, #44	; 0x2c
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2314      	movs	r3, #20
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f003 fa55 	bl	8003a48 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	0018      	movs	r0, r3
 80005a2:	2328      	movs	r3, #40	; 0x28
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f003 fa4e 	bl	8003a48 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <SystemClock_Config+0xdc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <SystemClock_Config+0xe0>)
 80005b2:	401a      	ands	r2, r3
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xdc>)
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	0109      	lsls	r1, r1, #4
 80005ba:	430a      	orrs	r2, r1
 80005bc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2202      	movs	r2, #2
 80005c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2201      	movs	r2, #1
 80005ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2210      	movs	r2, #16
 80005d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2202      	movs	r2, #2
 80005d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	0312      	lsls	r2, r2, #12
 80005e4:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2280      	movs	r2, #128	; 0x80
 80005ea:	0412      	lsls	r2, r2, #16
 80005ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 fff5 	bl	80015e0 <HAL_RCC_OscConfig>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005fa:	f000 f951 	bl	80008a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	212c      	movs	r1, #44	; 0x2c
 8000600:	187b      	adds	r3, r7, r1
 8000602:	220f      	movs	r2, #15
 8000604:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2203      	movs	r2, #3
 800060a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2101      	movs	r1, #1
 8000622:	0018      	movs	r0, r3
 8000624:	f001 fbb0 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800062c:	f000 f938 	bl	80008a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2202      	movs	r2, #2
 8000634:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	0018      	movs	r0, r3
 8000640:	f001 fdc6 	bl	80021d0 <HAL_RCCEx_PeriphCLKConfig>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000648:	f000 f92a 	bl	80008a0 <Error_Handler>
  }
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b01f      	add	sp, #124	; 0x7c
 8000652:	bd90      	pop	{r4, r7, pc}
 8000654:	40007000 	.word	0x40007000
 8000658:	ffffe7ff 	.word	0xffffe7ff

0800065c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_SPI2_Init+0x7c>)
 8000662:	4a1e      	ldr	r2, [pc, #120]	; (80006dc <MX_SPI2_Init+0x80>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_SPI2_Init+0x7c>)
 8000668:	2282      	movs	r2, #130	; 0x82
 800066a:	0052      	lsls	r2, r2, #1
 800066c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_SPI2_Init+0x7c>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_SPI2_Init+0x7c>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_SPI2_Init+0x7c>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_SPI2_Init+0x7c>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_SPI2_Init+0x7c>)
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0092      	lsls	r2, r2, #2
 800068c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_SPI2_Init+0x7c>)
 8000690:	2228      	movs	r2, #40	; 0x28
 8000692:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_SPI2_Init+0x7c>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_SPI2_Init+0x7c>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_SPI2_Init+0x7c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_SPI2_Init+0x7c>)
 80006a8:	2207      	movs	r2, #7
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_SPI2_Init+0x7c>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 ff02 	bl	80024b8 <HAL_SPI_Init>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006b8:	f000 f8f2 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
#ifdef MASTER_BOARD
	hspi2.Init.Mode = SPI_MODE_MASTER;
#else
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_SPI2_Init+0x7c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
#endif /* MASTER_BOARD */

	if(HAL_SPI_Init(&hspi2) != HAL_OK)
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MX_SPI2_Init+0x7c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fef7 	bl	80024b8 <HAL_SPI_Init>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_SPI2_Init+0x76>
	{
		/* Initialization Error */
		Error_Handler();
 80006ce:	f000 f8e7 	bl	80008a0 <Error_Handler>
	}
  /* USER CODE END SPI2_Init 2 */

}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000a4 	.word	0x200000a4
 80006dc:	40003800 	.word	0x40003800

080006e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e4:	4b14      	ldr	r3, [pc, #80]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006e6:	4a15      	ldr	r2, [pc, #84]	; (800073c <MX_USART2_UART_Init+0x5c>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ea:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006ec:	22e1      	movs	r2, #225	; 0xe1
 80006ee:	0252      	lsls	r2, r2, #9
 80006f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MX_USART2_UART_Init+0x58>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <MX_USART2_UART_Init+0x58>)
 8000724:	0018      	movs	r0, r3
 8000726:	f002 fc99 	bl	800305c <HAL_UART_Init>
 800072a:	1e03      	subs	r3, r0, #0
 800072c:	d001      	beq.n	8000732 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800072e:	f000 f8b7 	bl	80008a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	200001bc 	.word	0x200001bc
 800073c:	40004400 	.word	0x40004400

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_DMA_Init+0x38>)
 8000748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_DMA_Init+0x38>)
 800074c:	2101      	movs	r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_DMA_Init+0x38>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	2201      	movs	r2, #1
 8000758:	4013      	ands	r3, r2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	200b      	movs	r0, #11
 8000764:	f000 fb52 	bl	8000e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000768:	200b      	movs	r0, #11
 800076a:	f000 fb64 	bl	8000e36 <HAL_NVIC_EnableIRQ>

}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	40021000 	.word	0x40021000

0800077c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b08b      	sub	sp, #44	; 0x2c
 8000780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	2414      	movs	r4, #20
 8000784:	193b      	adds	r3, r7, r4
 8000786:	0018      	movs	r0, r3
 8000788:	2314      	movs	r3, #20
 800078a:	001a      	movs	r2, r3
 800078c:	2100      	movs	r1, #0
 800078e:	f003 f95b 	bl	8003a48 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <MX_GPIO_Init+0xd8>)
 8000794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000796:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_GPIO_Init+0xd8>)
 8000798:	2104      	movs	r1, #4
 800079a:	430a      	orrs	r2, r1
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a2:	2204      	movs	r2, #4
 80007a4:	4013      	ands	r3, r2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	430a      	orrs	r2, r1
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ba:	2280      	movs	r2, #128	; 0x80
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007e0:	2102      	movs	r1, #2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <MX_GPIO_Init+0xd8>)
 80007e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ea:	2202      	movs	r2, #2
 80007ec:	4013      	ands	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007f2:	23a0      	movs	r3, #160	; 0xa0
 80007f4:	05db      	lsls	r3, r3, #23
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 feb8 	bl	8001570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	0192      	lsls	r2, r2, #6
 8000806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2284      	movs	r2, #132	; 0x84
 800080c:	0392      	lsls	r2, r2, #14
 800080e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000816:	193b      	adds	r3, r7, r4
 8000818:	4a0f      	ldr	r2, [pc, #60]	; (8000858 <MX_GPIO_Init+0xdc>)
 800081a:	0019      	movs	r1, r3
 800081c:	0010      	movs	r0, r2
 800081e:	f000 fd29 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000822:	0021      	movs	r1, r4
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2220      	movs	r2, #32
 8000828:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	187a      	adds	r2, r7, r1
 800083e:	23a0      	movs	r3, #160	; 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fd15 	bl	8001274 <HAL_GPIO_Init>

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b00b      	add	sp, #44	; 0x2c
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000
 8000858:	50000800 	.word	0x50000800

0800085c <HAL_SPI_RxCpltCallback>:
 * @note   This example shows a simple way to report end of Interrupt TxRx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	/* Turn LED on: Transfer in transmission/reception process is correct */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000864:	23a0      	movs	r3, #160	; 0xa0
 8000866:	05db      	lsls	r3, r3, #23
 8000868:	2201      	movs	r2, #1
 800086a:	2120      	movs	r1, #32
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fe7f 	bl	8001570 <HAL_GPIO_WritePin>
	wTransferState = TRANSFER_COMPLETE;
 8000872:	4b03      	ldr	r3, [pc, #12]	; (8000880 <HAL_SPI_RxCpltCallback+0x24>)
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b002      	add	sp, #8
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000a0 	.word	0x200000a0

08000884 <HAL_SPI_ErrorCallback>:
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_SPI_ErrorCallback+0x18>)
 800088e:	2202      	movs	r2, #2
 8000890:	601a      	str	r2, [r3, #0]
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200000a0 	.word	0x200000a0

080008a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a4:	b672      	cpsid	i
}
 80008a6:	46c0      	nop			; (mov r8, r8)
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
	{
		/* Toggle LED2 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008a8:	23a0      	movs	r3, #160	; 0xa0
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2120      	movs	r1, #32
 80008ae:	0018      	movs	r0, r3
 80008b0:	f000 fe7b 	bl	80015aa <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008b4:	23fa      	movs	r3, #250	; 0xfa
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 f9d7 	bl	8000c6c <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80008be:	e7f3      	b.n	80008a8 <Error_Handler+0x8>

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c4:	4b07      	ldr	r3, [pc, #28]	; (80008e4 <HAL_MspInit+0x24>)
 80008c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x24>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	430a      	orrs	r2, r1
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <HAL_MspInit+0x24>)
 80008d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008d4:	4b03      	ldr	r3, [pc, #12]	; (80008e4 <HAL_MspInit+0x24>)
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	0549      	lsls	r1, r1, #21
 80008da:	430a      	orrs	r2, r1
 80008dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40021000 	.word	0x40021000

080008e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	240c      	movs	r4, #12
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	2314      	movs	r3, #20
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f003 f8a4 	bl	8003a48 <memset>
  if(hspi->Instance==SPI2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a45      	ldr	r2, [pc, #276]	; (8000a1c <HAL_SPI_MspInit+0x134>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d000      	beq.n	800090c <HAL_SPI_MspInit+0x24>
 800090a:	e083      	b.n	8000a14 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800090c:	4b44      	ldr	r3, [pc, #272]	; (8000a20 <HAL_SPI_MspInit+0x138>)
 800090e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000910:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <HAL_SPI_MspInit+0x138>)
 8000912:	2180      	movs	r1, #128	; 0x80
 8000914:	01c9      	lsls	r1, r1, #7
 8000916:	430a      	orrs	r2, r1
 8000918:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b41      	ldr	r3, [pc, #260]	; (8000a20 <HAL_SPI_MspInit+0x138>)
 800091c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800091e:	4b40      	ldr	r3, [pc, #256]	; (8000a20 <HAL_SPI_MspInit+0x138>)
 8000920:	2102      	movs	r1, #2
 8000922:	430a      	orrs	r2, r1
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
 8000926:	4b3e      	ldr	r3, [pc, #248]	; (8000a20 <HAL_SPI_MspInit+0x138>)
 8000928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800092a:	2202      	movs	r2, #2
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000932:	193b      	adds	r3, r7, r4
 8000934:	22e0      	movs	r2, #224	; 0xe0
 8000936:	0212      	lsls	r2, r2, #8
 8000938:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	0021      	movs	r1, r4
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2202      	movs	r2, #2
 8000940:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2203      	movs	r2, #3
 800094c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	187b      	adds	r3, r7, r1
 8000956:	4a33      	ldr	r2, [pc, #204]	; (8000a24 <HAL_SPI_MspInit+0x13c>)
 8000958:	0019      	movs	r1, r3
 800095a:	0010      	movs	r0, r2
 800095c:	f000 fc8a 	bl	8001274 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000960:	4b31      	ldr	r3, [pc, #196]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 8000962:	4a32      	ldr	r2, [pc, #200]	; (8000a2c <HAL_SPI_MspInit+0x144>)
 8000964:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8000966:	4b30      	ldr	r3, [pc, #192]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 8000968:	2202      	movs	r2, #2
 800096a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800096c:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000972:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000978:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 800097a:	2280      	movs	r2, #128	; 0x80
 800097c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800097e:	4b2a      	ldr	r3, [pc, #168]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000984:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000996:	4b24      	ldr	r3, [pc, #144]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fa69 	bl	8000e70 <HAL_DMA_Init>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d001      	beq.n	80009a6 <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 80009a2:	f7ff ff7d 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a1f      	ldr	r2, [pc, #124]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 80009aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80009ac:	4b1e      	ldr	r3, [pc, #120]	; (8000a28 <HAL_SPI_MspInit+0x140>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009b4:	4a1f      	ldr	r2, [pc, #124]	; (8000a34 <HAL_SPI_MspInit+0x14c>)
 80009b6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009ba:	2202      	movs	r2, #2
 80009bc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009c0:	2210      	movs	r2, #16
 80009c2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009de:	2220      	movs	r2, #32
 80009e0:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 fa40 	bl	8000e70 <HAL_DMA_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80009f4:	f7ff ff54 	bl	80008a0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 80009fc:	649a      	str	r2, [r3, #72]	; 0x48
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_SPI_MspInit+0x148>)
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	201a      	movs	r0, #26
 8000a0a:	f000 f9ff 	bl	8000e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000a0e:	201a      	movs	r0, #26
 8000a10:	f000 fa11 	bl	8000e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000a14:	46c0      	nop			; (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b009      	add	sp, #36	; 0x24
 8000a1a:	bd90      	pop	{r4, r7, pc}
 8000a1c:	40003800 	.word	0x40003800
 8000a20:	40021000 	.word	0x40021000
 8000a24:	50000400 	.word	0x50000400
 8000a28:	200000fc 	.word	0x200000fc
 8000a2c:	40020044 	.word	0x40020044
 8000a30:	20000240 	.word	0x20000240
 8000a34:	40020058 	.word	0x40020058

08000a38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	240c      	movs	r4, #12
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	0018      	movs	r0, r3
 8000a46:	2314      	movs	r3, #20
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f002 fffc 	bl	8003a48 <memset>
  if(huart->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <HAL_UART_MspInit+0x80>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d129      	bne.n	8000aae <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a60:	2180      	movs	r1, #128	; 0x80
 8000a62:	0289      	lsls	r1, r1, #10
 8000a64:	430a      	orrs	r2, r1
 8000a66:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a6c:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_UART_MspInit+0x84>)
 8000a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a80:	0021      	movs	r1, r4
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	220c      	movs	r2, #12
 8000a86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2202      	movs	r2, #2
 8000a8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	2203      	movs	r2, #3
 8000a98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	187a      	adds	r2, r7, r1
 8000aa2:	23a0      	movs	r3, #160	; 0xa0
 8000aa4:	05db      	lsls	r3, r3, #23
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f000 fbe3 	bl	8001274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b009      	add	sp, #36	; 0x24
 8000ab4:	bd90      	pop	{r4, r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	40004400 	.word	0x40004400
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae4:	f000 f8a6 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 fadf 	bl	80010ba <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000afc:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f000 fadb 	bl	80010ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	200000fc 	.word	0x200000fc
 8000b10:	20000240 	.word	0x20000240

08000b14 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <SPI2_IRQHandler+0x14>)
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 ff54 	bl	80029c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	200000a4 	.word	0x200000a4

08000b2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <Reset_Handler>:
 8000b38:	480d      	ldr	r0, [pc, #52]	; (8000b70 <LoopForever+0x2>)
 8000b3a:	4685      	mov	sp, r0
 8000b3c:	480d      	ldr	r0, [pc, #52]	; (8000b74 <LoopForever+0x6>)
 8000b3e:	490e      	ldr	r1, [pc, #56]	; (8000b78 <LoopForever+0xa>)
 8000b40:	4a0e      	ldr	r2, [pc, #56]	; (8000b7c <LoopForever+0xe>)
 8000b42:	2300      	movs	r3, #0
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:
 8000b46:	58d4      	ldr	r4, [r2, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:
 8000b4c:	18c4      	adds	r4, r0, r3
 8000b4e:	428c      	cmp	r4, r1
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
 8000b52:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LoopForever+0x12>)
 8000b54:	4c0b      	ldr	r4, [pc, #44]	; (8000b84 <LoopForever+0x16>)
 8000b56:	2300      	movs	r3, #0
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:
 8000b5a:	6013      	str	r3, [r2, #0]
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:
 8000b5e:	42a2      	cmp	r2, r4
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>
 8000b62:	f7ff ffe3 	bl	8000b2c <SystemInit>
 8000b66:	f002 ff4b 	bl	8003a00 <__libc_init_array>
 8000b6a:	f7ff fcbb 	bl	80004e4 <main>

08000b6e <LoopForever>:
 8000b6e:	e7fe      	b.n	8000b6e <LoopForever>
 8000b70:	20005000 	.word	0x20005000
 8000b74:	20000000 	.word	0x20000000
 8000b78:	20000084 	.word	0x20000084
 8000b7c:	08003aec 	.word	0x08003aec
 8000b80:	20000084 	.word	0x20000084
 8000b84:	2000028c 	.word	0x2000028c

08000b88 <ADC1_COMP_IRQHandler>:
 8000b88:	e7fe      	b.n	8000b88 <ADC1_COMP_IRQHandler>
	...

08000b8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <HAL_Init+0x3c>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_Init+0x3c>)
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	430a      	orrs	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 f811 	bl	8000bcc <HAL_InitTick>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
 8000bb4:	e001      	b.n	8000bba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb6:	f7ff fe83 	bl	80008c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_InitTick+0x5c>)
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_InitTick+0x60>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	0019      	movs	r1, r3
 8000bde:	23fa      	movs	r3, #250	; 0xfa
 8000be0:	0098      	lsls	r0, r3, #2
 8000be2:	f7ff fa91 	bl	8000108 <__udivsi3>
 8000be6:	0003      	movs	r3, r0
 8000be8:	0019      	movs	r1, r3
 8000bea:	0020      	movs	r0, r4
 8000bec:	f7ff fa8c 	bl	8000108 <__udivsi3>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f92f 	bl	8000e56 <HAL_SYSTICK_Config>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d001      	beq.n	8000c00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e00f      	b.n	8000c20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b03      	cmp	r3, #3
 8000c04:	d80b      	bhi.n	8000c1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c06:	6879      	ldr	r1, [r7, #4]
 8000c08:	2301      	movs	r3, #1
 8000c0a:	425b      	negs	r3, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f8fc 	bl	8000e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_InitTick+0x64>)
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	0018      	movs	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b003      	add	sp, #12
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	20000078 	.word	0x20000078
 8000c2c:	20000080 	.word	0x20000080
 8000c30:	2000007c 	.word	0x2000007c

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	001a      	movs	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	18d2      	adds	r2, r2, r3
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	601a      	str	r2, [r3, #0]
}
 8000c48:	46c0      	nop			; (mov r8, r8)
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	20000080 	.word	0x20000080
 8000c54:	20000288 	.word	0x20000288

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000288 	.word	0x20000288

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff fff0 	bl	8000c58 <HAL_GetTick>
 8000c78:	0003      	movs	r3, r0
 8000c7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	189b      	adds	r3, r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	f7ff ffe0 	bl	8000c58 <HAL_GetTick>
 8000c98:	0002      	movs	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b004      	add	sp, #16
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	20000080 	.word	0x20000080

08000cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	0002      	movs	r2, r0
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8000cc6:	d809      	bhi.n	8000cdc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	001a      	movs	r2, r3
 8000cce:	231f      	movs	r3, #31
 8000cd0:	401a      	ands	r2, r3
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <__NVIC_EnableIRQ+0x30>)
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	000a      	movs	r2, r1
 8000cda:	601a      	str	r2, [r3, #0]
  }
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b002      	add	sp, #8
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	0002      	movs	r2, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	1dfb      	adds	r3, r7, #7
 8000cf4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8000cfc:	d828      	bhi.n	8000d50 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfe:	4a2f      	ldr	r2, [pc, #188]	; (8000dbc <__NVIC_SetPriority+0xd4>)
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b25b      	sxtb	r3, r3
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	33c0      	adds	r3, #192	; 0xc0
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	589b      	ldr	r3, [r3, r2]
 8000d0e:	1dfa      	adds	r2, r7, #7
 8000d10:	7812      	ldrb	r2, [r2, #0]
 8000d12:	0011      	movs	r1, r2
 8000d14:	2203      	movs	r2, #3
 8000d16:	400a      	ands	r2, r1
 8000d18:	00d2      	lsls	r2, r2, #3
 8000d1a:	21ff      	movs	r1, #255	; 0xff
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	000a      	movs	r2, r1
 8000d20:	43d2      	mvns	r2, r2
 8000d22:	401a      	ands	r2, r3
 8000d24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	019b      	lsls	r3, r3, #6
 8000d2a:	22ff      	movs	r2, #255	; 0xff
 8000d2c:	401a      	ands	r2, r3
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	0018      	movs	r0, r3
 8000d34:	2303      	movs	r3, #3
 8000d36:	4003      	ands	r3, r0
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d3c:	481f      	ldr	r0, [pc, #124]	; (8000dbc <__NVIC_SetPriority+0xd4>)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b25b      	sxtb	r3, r3
 8000d44:	089b      	lsrs	r3, r3, #2
 8000d46:	430a      	orrs	r2, r1
 8000d48:	33c0      	adds	r3, #192	; 0xc0
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d4e:	e031      	b.n	8000db4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d50:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <__NVIC_SetPriority+0xd8>)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	0019      	movs	r1, r3
 8000d58:	230f      	movs	r3, #15
 8000d5a:	400b      	ands	r3, r1
 8000d5c:	3b08      	subs	r3, #8
 8000d5e:	089b      	lsrs	r3, r3, #2
 8000d60:	3306      	adds	r3, #6
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	18d3      	adds	r3, r2, r3
 8000d66:	3304      	adds	r3, #4
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1dfa      	adds	r2, r7, #7
 8000d6c:	7812      	ldrb	r2, [r2, #0]
 8000d6e:	0011      	movs	r1, r2
 8000d70:	2203      	movs	r2, #3
 8000d72:	400a      	ands	r2, r1
 8000d74:	00d2      	lsls	r2, r2, #3
 8000d76:	21ff      	movs	r1, #255	; 0xff
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	43d2      	mvns	r2, r2
 8000d7e:	401a      	ands	r2, r3
 8000d80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	22ff      	movs	r2, #255	; 0xff
 8000d88:	401a      	ands	r2, r3
 8000d8a:	1dfb      	adds	r3, r7, #7
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	0018      	movs	r0, r3
 8000d90:	2303      	movs	r3, #3
 8000d92:	4003      	ands	r3, r0
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	4809      	ldr	r0, [pc, #36]	; (8000dc0 <__NVIC_SetPriority+0xd8>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	001c      	movs	r4, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	4023      	ands	r3, r4
 8000da4:	3b08      	subs	r3, #8
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	430a      	orrs	r2, r1
 8000daa:	3306      	adds	r3, #6
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	18c3      	adds	r3, r0, r3
 8000db0:	3304      	adds	r3, #4
 8000db2:	601a      	str	r2, [r3, #0]
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b003      	add	sp, #12
 8000dba:	bd90      	pop	{r4, r7, pc}
 8000dbc:	e000e100 	.word	0xe000e100
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1e5a      	subs	r2, r3, #1
 8000dd0:	2380      	movs	r3, #128	; 0x80
 8000dd2:	045b      	lsls	r3, r3, #17
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d301      	bcc.n	8000ddc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e010      	b.n	8000dfe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ddc:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <SysTick_Config+0x44>)
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	3a01      	subs	r2, #1
 8000de2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de4:	2301      	movs	r3, #1
 8000de6:	425b      	negs	r3, r3
 8000de8:	2103      	movs	r1, #3
 8000dea:	0018      	movs	r0, r3
 8000dec:	f7ff ff7c 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <SysTick_Config+0x44>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <SysTick_Config+0x44>)
 8000df8:	2207      	movs	r2, #7
 8000dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b002      	add	sp, #8
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	e000e010 	.word	0xe000e010

08000e0c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	210f      	movs	r1, #15
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	1c02      	adds	r2, r0, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b25b      	sxtb	r3, r3
 8000e26:	0011      	movs	r1, r2
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff ff5d 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b004      	add	sp, #16
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	0002      	movs	r2, r0
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b25b      	sxtb	r3, r3
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff ff33 	bl	8000cb4 <__NVIC_EnableIRQ>
}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff ffaf 	bl	8000dc4 <SysTick_Config>
 8000e66:	0003      	movs	r3, r0
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e061      	b.n	8000f46 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a32      	ldr	r2, [pc, #200]	; (8000f50 <HAL_DMA_Init+0xe0>)
 8000e88:	4694      	mov	ip, r2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	2114      	movs	r1, #20
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f7ff f93a 	bl	8000108 <__udivsi3>
 8000e94:	0003      	movs	r3, r0
 8000e96:	009a      	lsls	r2, r3, #2
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a2d      	ldr	r2, [pc, #180]	; (8000f54 <HAL_DMA_Init+0xe4>)
 8000ea0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2225      	movs	r2, #37	; 0x25
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	4a28      	ldr	r2, [pc, #160]	; (8000f58 <HAL_DMA_Init+0xe8>)
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68fa      	ldr	r2, [r7, #12]
 8000eee:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	01db      	lsls	r3, r3, #7
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d018      	beq.n	8000f2e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_DMA_Init+0xec>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	211c      	movs	r1, #28
 8000f06:	400b      	ands	r3, r1
 8000f08:	210f      	movs	r1, #15
 8000f0a:	4099      	lsls	r1, r3
 8000f0c:	000b      	movs	r3, r1
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_DMA_Init+0xec>)
 8000f12:	400a      	ands	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <HAL_DMA_Init+0xec>)
 8000f18:	6819      	ldr	r1, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	685a      	ldr	r2, [r3, #4]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	201c      	movs	r0, #28
 8000f24:	4003      	ands	r3, r0
 8000f26:	409a      	lsls	r2, r3
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <HAL_DMA_Init+0xec>)
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2225      	movs	r2, #37	; 0x25
 8000f38:	2101      	movs	r1, #1
 8000f3a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2224      	movs	r2, #36	; 0x24
 8000f40:	2100      	movs	r1, #0
 8000f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b004      	add	sp, #16
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	bffdfff8 	.word	0xbffdfff8
 8000f54:	40020000 	.word	0x40020000
 8000f58:	ffff800f 	.word	0xffff800f
 8000f5c:	400200a8 	.word	0x400200a8

08000f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f6e:	2317      	movs	r3, #23
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2224      	movs	r2, #36	; 0x24
 8000f7a:	5c9b      	ldrb	r3, [r3, r2]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_DMA_Start_IT+0x24>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e04f      	b.n	8001024 <HAL_DMA_Start_IT+0xc4>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2224      	movs	r2, #36	; 0x24
 8000f88:	2101      	movs	r1, #1
 8000f8a:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2225      	movs	r2, #37	; 0x25
 8000f90:	5c9b      	ldrb	r3, [r3, r2]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d13a      	bne.n	800100e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2225      	movs	r2, #37	; 0x25
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	438a      	bics	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	68b9      	ldr	r1, [r7, #8]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f000 f92a 	bl	8001216 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	210e      	movs	r1, #14
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e00f      	b.n	8000ffc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2104      	movs	r1, #4
 8000fe8:	438a      	bics	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	210a      	movs	r1, #10
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	e007      	b.n	800101e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2224      	movs	r2, #36	; 0x24
 8001012:	2100      	movs	r1, #0
 8001014:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001016:	2317      	movs	r3, #23
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	2202      	movs	r2, #2
 800101c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800101e:	2317      	movs	r3, #23
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	781b      	ldrb	r3, [r3, #0]
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b006      	add	sp, #24
 800102a:	bd80      	pop	{r7, pc}

0800102c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001034:	210f      	movs	r1, #15
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2200      	movs	r2, #0
 800103a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2225      	movs	r2, #37	; 0x25
 8001040:	5c9b      	ldrb	r3, [r3, r2]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d006      	beq.n	8001056 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
 8001054:	e02a      	b.n	80010ac <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	210e      	movs	r1, #14
 8001062:	438a      	bics	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	438a      	bics	r2, r1
 8001074:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	221c      	movs	r2, #28
 800107c:	401a      	ands	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	2101      	movs	r1, #1
 8001084:	4091      	lsls	r1, r2
 8001086:	000a      	movs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2225      	movs	r2, #37	; 0x25
 800108e:	2101      	movs	r1, #1
 8001090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2224      	movs	r2, #36	; 0x24
 8001096:	2100      	movs	r1, #0
 8001098:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d004      	beq.n	80010ac <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	0010      	movs	r0, r2
 80010aa:	4798      	blx	r3
    }
  }
  return status;
 80010ac:	230f      	movs	r3, #15
 80010ae:	18fb      	adds	r3, r7, r3
 80010b0:	781b      	ldrb	r3, [r3, #0]
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b084      	sub	sp, #16
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	221c      	movs	r2, #28
 80010d8:	4013      	ands	r3, r2
 80010da:	2204      	movs	r2, #4
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	d026      	beq.n	8001134 <HAL_DMA_IRQHandler+0x7a>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	2204      	movs	r2, #4
 80010ea:	4013      	ands	r3, r2
 80010ec:	d022      	beq.n	8001134 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2220      	movs	r2, #32
 80010f6:	4013      	ands	r3, r2
 80010f8:	d107      	bne.n	800110a <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2104      	movs	r1, #4
 8001106:	438a      	bics	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	221c      	movs	r2, #28
 8001110:	401a      	ands	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	2104      	movs	r1, #4
 8001118:	4091      	lsls	r1, r2
 800111a:	000a      	movs	r2, r1
 800111c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	2b00      	cmp	r3, #0
 8001124:	d100      	bne.n	8001128 <HAL_DMA_IRQHandler+0x6e>
 8001126:	e071      	b.n	800120c <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	0010      	movs	r0, r2
 8001130:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001132:	e06b      	b.n	800120c <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	221c      	movs	r2, #28
 800113a:	4013      	ands	r3, r2
 800113c:	2202      	movs	r2, #2
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	4013      	ands	r3, r2
 8001146:	d02d      	beq.n	80011a4 <HAL_DMA_IRQHandler+0xea>
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	d029      	beq.n	80011a4 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2220      	movs	r2, #32
 8001158:	4013      	ands	r3, r2
 800115a:	d10b      	bne.n	8001174 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	210a      	movs	r1, #10
 8001168:	438a      	bics	r2, r1
 800116a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2225      	movs	r2, #37	; 0x25
 8001170:	2101      	movs	r1, #1
 8001172:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	221c      	movs	r2, #28
 800117a:	401a      	ands	r2, r3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	2102      	movs	r1, #2
 8001182:	4091      	lsls	r1, r2
 8001184:	000a      	movs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2224      	movs	r2, #36	; 0x24
 800118c:	2100      	movs	r1, #0
 800118e:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001194:	2b00      	cmp	r3, #0
 8001196:	d039      	beq.n	800120c <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	0010      	movs	r0, r2
 80011a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011a2:	e033      	b.n	800120c <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a8:	221c      	movs	r2, #28
 80011aa:	4013      	ands	r3, r2
 80011ac:	2208      	movs	r2, #8
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	d02a      	beq.n	800120e <HAL_DMA_IRQHandler+0x154>
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2208      	movs	r2, #8
 80011bc:	4013      	ands	r3, r2
 80011be:	d026      	beq.n	800120e <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	210e      	movs	r1, #14
 80011cc:	438a      	bics	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d4:	221c      	movs	r2, #28
 80011d6:	401a      	ands	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	2101      	movs	r1, #1
 80011de:	4091      	lsls	r1, r2
 80011e0:	000a      	movs	r2, r1
 80011e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2201      	movs	r2, #1
 80011e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2225      	movs	r2, #37	; 0x25
 80011ee:	2101      	movs	r1, #1
 80011f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2224      	movs	r2, #36	; 0x24
 80011f6:	2100      	movs	r1, #0
 80011f8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	0010      	movs	r0, r2
 800120a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46c0      	nop			; (mov r8, r8)
}
 8001210:	46bd      	mov	sp, r7
 8001212:	b004      	add	sp, #16
 8001214:	bd80      	pop	{r7, pc}

08001216 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	60f8      	str	r0, [r7, #12]
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	221c      	movs	r2, #28
 800122a:	401a      	ands	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	2101      	movs	r1, #1
 8001232:	4091      	lsls	r1, r2
 8001234:	000a      	movs	r2, r1
 8001236:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b10      	cmp	r3, #16
 8001246:	d108      	bne.n	800125a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68ba      	ldr	r2, [r7, #8]
 8001256:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001258:	e007      	b.n	800126a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	60da      	str	r2, [r3, #12]
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b004      	add	sp, #16
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800128a:	e155      	b.n	8001538 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	697a      	ldr	r2, [r7, #20]
 8001294:	4091      	lsls	r1, r2
 8001296:	000a      	movs	r2, r1
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d100      	bne.n	80012a4 <HAL_GPIO_Init+0x30>
 80012a2:	e146      	b.n	8001532 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2203      	movs	r2, #3
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d005      	beq.n	80012bc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2203      	movs	r2, #3
 80012b6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d130      	bne.n	800131e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	409a      	lsls	r2, r3
 80012ca:	0013      	movs	r3, r2
 80012cc:	43da      	mvns	r2, r3
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	409a      	lsls	r2, r3
 80012de:	0013      	movs	r3, r2
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f2:	2201      	movs	r2, #1
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	091b      	lsrs	r3, r3, #4
 8001308:	2201      	movs	r2, #1
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2203      	movs	r2, #3
 8001324:	4013      	ands	r3, r2
 8001326:	2b03      	cmp	r3, #3
 8001328:	d017      	beq.n	800135a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	409a      	lsls	r2, r3
 8001338:	0013      	movs	r3, r2
 800133a:	43da      	mvns	r2, r3
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	409a      	lsls	r2, r3
 800134c:	0013      	movs	r3, r2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	2203      	movs	r2, #3
 8001360:	4013      	ands	r3, r2
 8001362:	2b02      	cmp	r3, #2
 8001364:	d123      	bne.n	80013ae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	08da      	lsrs	r2, r3, #3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3208      	adds	r2, #8
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	58d3      	ldr	r3, [r2, r3]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	2207      	movs	r2, #7
 8001378:	4013      	ands	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	2107      	movs	r1, #7
 8001392:	400b      	ands	r3, r1
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	6939      	ldr	r1, [r7, #16]
 80013ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	43da      	mvns	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	401a      	ands	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	23c0      	movs	r3, #192	; 0xc0
 80013e8:	029b      	lsls	r3, r3, #10
 80013ea:	4013      	ands	r3, r2
 80013ec:	d100      	bne.n	80013f0 <HAL_GPIO_Init+0x17c>
 80013ee:	e0a0      	b.n	8001532 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f0:	4b57      	ldr	r3, [pc, #348]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 80013f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f4:	4b56      	ldr	r3, [pc, #344]	; (8001550 <HAL_GPIO_Init+0x2dc>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fc:	4a55      	ldr	r2, [pc, #340]	; (8001554 <HAL_GPIO_Init+0x2e0>)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	3302      	adds	r3, #2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	589b      	ldr	r3, [r3, r2]
 8001408:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2203      	movs	r2, #3
 800140e:	4013      	ands	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	220f      	movs	r2, #15
 8001414:	409a      	lsls	r2, r3
 8001416:	0013      	movs	r3, r2
 8001418:	43da      	mvns	r2, r3
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	23a0      	movs	r3, #160	; 0xa0
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	429a      	cmp	r2, r3
 8001428:	d01f      	beq.n	800146a <HAL_GPIO_Init+0x1f6>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a4a      	ldr	r2, [pc, #296]	; (8001558 <HAL_GPIO_Init+0x2e4>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0x1f2>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a49      	ldr	r2, [pc, #292]	; (800155c <HAL_GPIO_Init+0x2e8>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_GPIO_Init+0x1ee>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a48      	ldr	r2, [pc, #288]	; (8001560 <HAL_GPIO_Init+0x2ec>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d00d      	beq.n	800145e <HAL_GPIO_Init+0x1ea>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a47      	ldr	r2, [pc, #284]	; (8001564 <HAL_GPIO_Init+0x2f0>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d007      	beq.n	800145a <HAL_GPIO_Init+0x1e6>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <HAL_GPIO_Init+0x2f4>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d101      	bne.n	8001456 <HAL_GPIO_Init+0x1e2>
 8001452:	2305      	movs	r3, #5
 8001454:	e00a      	b.n	800146c <HAL_GPIO_Init+0x1f8>
 8001456:	2306      	movs	r3, #6
 8001458:	e008      	b.n	800146c <HAL_GPIO_Init+0x1f8>
 800145a:	2304      	movs	r3, #4
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x1f8>
 800145e:	2303      	movs	r3, #3
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x1f8>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x1f8>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x1f8>
 800146a:	2300      	movs	r3, #0
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	2103      	movs	r1, #3
 8001470:	400a      	ands	r2, r1
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800147c:	4935      	ldr	r1, [pc, #212]	; (8001554 <HAL_GPIO_Init+0x2e0>)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <HAL_GPIO_Init+0x2f8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	025b      	lsls	r3, r3, #9
 80014a2:	4013      	ands	r3, r2
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_GPIO_Init+0x2f8>)
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014b4:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_GPIO_Init+0x2f8>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	43da      	mvns	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	029b      	lsls	r3, r3, #10
 80014cc:	4013      	ands	r3, r2
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014d8:	4b24      	ldr	r3, [pc, #144]	; (800156c <HAL_GPIO_Init+0x2f8>)
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014de:	4b23      	ldr	r3, [pc, #140]	; (800156c <HAL_GPIO_Init+0x2f8>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	035b      	lsls	r3, r3, #13
 80014f6:	4013      	ands	r3, r2
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <HAL_GPIO_Init+0x2f8>)
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001508:	4b18      	ldr	r3, [pc, #96]	; (800156c <HAL_GPIO_Init+0x2f8>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	43da      	mvns	r2, r3
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685a      	ldr	r2, [r3, #4]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	039b      	lsls	r3, r3, #14
 8001520:	4013      	ands	r3, r2
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_GPIO_Init+0x2f8>)
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	40da      	lsrs	r2, r3
 8001540:	1e13      	subs	r3, r2, #0
 8001542:	d000      	beq.n	8001546 <HAL_GPIO_Init+0x2d2>
 8001544:	e6a2      	b.n	800128c <HAL_GPIO_Init+0x18>
  }
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b006      	add	sp, #24
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000
 8001558:	50000400 	.word	0x50000400
 800155c:	50000800 	.word	0x50000800
 8001560:	50000c00 	.word	0x50000c00
 8001564:	50001000 	.word	0x50001000
 8001568:	50001c00 	.word	0x50001c00
 800156c:	40010400 	.word	0x40010400

08001570 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	0008      	movs	r0, r1
 800157a:	0011      	movs	r1, r2
 800157c:	1cbb      	adds	r3, r7, #2
 800157e:	1c02      	adds	r2, r0, #0
 8001580:	801a      	strh	r2, [r3, #0]
 8001582:	1c7b      	adds	r3, r7, #1
 8001584:	1c0a      	adds	r2, r1, #0
 8001586:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001588:	1c7b      	adds	r3, r7, #1
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001590:	1cbb      	adds	r3, r7, #2
 8001592:	881a      	ldrh	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001598:	e003      	b.n	80015a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800159a:	1cbb      	adds	r3, r7, #2
 800159c:	881a      	ldrh	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b084      	sub	sp, #16
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	000a      	movs	r2, r1
 80015b4:	1cbb      	adds	r3, r7, #2
 80015b6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015be:	1cbb      	adds	r3, r7, #2
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	68fa      	ldr	r2, [r7, #12]
 80015c4:	4013      	ands	r3, r2
 80015c6:	041a      	lsls	r2, r3, #16
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	1cb9      	adds	r1, r7, #2
 80015ce:	8809      	ldrh	r1, [r1, #0]
 80015d0:	400b      	ands	r3, r1
 80015d2:	431a      	orrs	r2, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	619a      	str	r2, [r3, #24]
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b004      	add	sp, #16
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f000 fbbf 	bl	8001d72 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015f4:	4bc9      	ldr	r3, [pc, #804]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	220c      	movs	r2, #12
 80015fa:	4013      	ands	r3, r2
 80015fc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015fe:	4bc7      	ldr	r3, [pc, #796]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	025b      	lsls	r3, r3, #9
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	4013      	ands	r3, r2
 8001612:	d100      	bne.n	8001616 <HAL_RCC_OscConfig+0x36>
 8001614:	e07e      	b.n	8001714 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	2b08      	cmp	r3, #8
 800161a:	d007      	beq.n	800162c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	2b0c      	cmp	r3, #12
 8001620:	d112      	bne.n	8001648 <HAL_RCC_OscConfig+0x68>
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	429a      	cmp	r2, r3
 800162a:	d10d      	bne.n	8001648 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	4bbb      	ldr	r3, [pc, #748]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	4013      	ands	r3, r2
 8001636:	d100      	bne.n	800163a <HAL_RCC_OscConfig+0x5a>
 8001638:	e06b      	b.n	8001712 <HAL_RCC_OscConfig+0x132>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d167      	bne.n	8001712 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f000 fb95 	bl	8001d72 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	429a      	cmp	r2, r3
 8001652:	d107      	bne.n	8001664 <HAL_RCC_OscConfig+0x84>
 8001654:	4bb1      	ldr	r3, [pc, #708]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4bb0      	ldr	r3, [pc, #704]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0249      	lsls	r1, r1, #9
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e027      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	02db      	lsls	r3, r3, #11
 800166c:	429a      	cmp	r2, r3
 800166e:	d10e      	bne.n	800168e <HAL_RCC_OscConfig+0xae>
 8001670:	4baa      	ldr	r3, [pc, #680]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4ba9      	ldr	r3, [pc, #676]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	02c9      	lsls	r1, r1, #11
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	4ba7      	ldr	r3, [pc, #668]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4ba6      	ldr	r3, [pc, #664]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0249      	lsls	r1, r1, #9
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e012      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 800168e:	4ba3      	ldr	r3, [pc, #652]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4ba2      	ldr	r3, [pc, #648]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001694:	49a2      	ldr	r1, [pc, #648]	; (8001920 <HAL_RCC_OscConfig+0x340>)
 8001696:	400a      	ands	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	4ba0      	ldr	r3, [pc, #640]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	025b      	lsls	r3, r3, #9
 80016a2:	4013      	ands	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4b9c      	ldr	r3, [pc, #624]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b9b      	ldr	r3, [pc, #620]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80016ae:	499d      	ldr	r1, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x344>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d015      	beq.n	80016e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff facc 	bl	8000c58 <HAL_GetTick>
 80016c0:	0003      	movs	r3, r0
 80016c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016c4:	e009      	b.n	80016da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016c6:	f7ff fac7 	bl	8000c58 <HAL_GetTick>
 80016ca:	0002      	movs	r2, r0
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b64      	cmp	r3, #100	; 0x64
 80016d2:	d902      	bls.n	80016da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	f000 fb4c 	bl	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016da:	4b90      	ldr	r3, [pc, #576]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	029b      	lsls	r3, r3, #10
 80016e2:	4013      	ands	r3, r2
 80016e4:	d0ef      	beq.n	80016c6 <HAL_RCC_OscConfig+0xe6>
 80016e6:	e015      	b.n	8001714 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fab6 	bl	8000c58 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f2:	f7ff fab1 	bl	8000c58 <HAL_GetTick>
 80016f6:	0002      	movs	r2, r0
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b64      	cmp	r3, #100	; 0x64
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e336      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001704:	4b85      	ldr	r3, [pc, #532]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	029b      	lsls	r3, r3, #10
 800170c:	4013      	ands	r3, r2
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x112>
 8001710:	e000      	b.n	8001714 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001712:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2202      	movs	r2, #2
 800171a:	4013      	ands	r3, r2
 800171c:	d100      	bne.n	8001720 <HAL_RCC_OscConfig+0x140>
 800171e:	e099      	b.n	8001854 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	2220      	movs	r2, #32
 800172a:	4013      	ands	r3, r2
 800172c:	d009      	beq.n	8001742 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800172e:	4b7b      	ldr	r3, [pc, #492]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	4b7a      	ldr	r3, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001734:	2120      	movs	r1, #32
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	2220      	movs	r2, #32
 800173e:	4393      	bics	r3, r2
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	2b04      	cmp	r3, #4
 8001746:	d005      	beq.n	8001754 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d13e      	bne.n	80017cc <HAL_RCC_OscConfig+0x1ec>
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d13b      	bne.n	80017cc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001754:	4b71      	ldr	r3, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2204      	movs	r2, #4
 800175a:	4013      	ands	r3, r2
 800175c:	d004      	beq.n	8001768 <HAL_RCC_OscConfig+0x188>
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	2b00      	cmp	r3, #0
 8001762:	d101      	bne.n	8001768 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e304      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001768:	4b6c      	ldr	r3, [pc, #432]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a6e      	ldr	r2, [pc, #440]	; (8001928 <HAL_RCC_OscConfig+0x348>)
 800176e:	4013      	ands	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	021a      	lsls	r2, r3, #8
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800177a:	430a      	orrs	r2, r1
 800177c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800177e:	4b67      	ldr	r3, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2209      	movs	r2, #9
 8001784:	4393      	bics	r3, r2
 8001786:	0019      	movs	r1, r3
 8001788:	4b64      	ldr	r3, [pc, #400]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800178a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001790:	f000 fc42 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001794:	0001      	movs	r1, r0
 8001796:	4b61      	ldr	r3, [pc, #388]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	220f      	movs	r2, #15
 800179e:	4013      	ands	r3, r2
 80017a0:	4a62      	ldr	r2, [pc, #392]	; (800192c <HAL_RCC_OscConfig+0x34c>)
 80017a2:	5cd3      	ldrb	r3, [r2, r3]
 80017a4:	000a      	movs	r2, r1
 80017a6:	40da      	lsrs	r2, r3
 80017a8:	4b61      	ldr	r3, [pc, #388]	; (8001930 <HAL_RCC_OscConfig+0x350>)
 80017aa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80017ac:	4b61      	ldr	r3, [pc, #388]	; (8001934 <HAL_RCC_OscConfig+0x354>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2513      	movs	r5, #19
 80017b2:	197c      	adds	r4, r7, r5
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fa09 	bl	8000bcc <HAL_InitTick>
 80017ba:	0003      	movs	r3, r0
 80017bc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80017be:	197b      	adds	r3, r7, r5
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d046      	beq.n	8001854 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80017c6:	197b      	adds	r3, r7, r5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	e2d2      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d027      	beq.n	8001822 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017d2:	4b52      	ldr	r3, [pc, #328]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2209      	movs	r2, #9
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	4b4f      	ldr	r3, [pc, #316]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80017de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa38 	bl	8000c58 <HAL_GetTick>
 80017e8:	0003      	movs	r3, r0
 80017ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff fa33 	bl	8000c58 <HAL_GetTick>
 80017f2:	0002      	movs	r2, r0
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e2b8      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001800:	4b46      	ldr	r3, [pc, #280]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2204      	movs	r2, #4
 8001806:	4013      	ands	r3, r2
 8001808:	d0f1      	beq.n	80017ee <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180a:	4b44      	ldr	r3, [pc, #272]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_RCC_OscConfig+0x348>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	021a      	lsls	r2, r3, #8
 800181a:	4b40      	ldr	r3, [pc, #256]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800181c:	430a      	orrs	r2, r1
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	e018      	b.n	8001854 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b3e      	ldr	r3, [pc, #248]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001828:	2101      	movs	r1, #1
 800182a:	438a      	bics	r2, r1
 800182c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182e:	f7ff fa13 	bl	8000c58 <HAL_GetTick>
 8001832:	0003      	movs	r3, r0
 8001834:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fa0e 	bl	8000c58 <HAL_GetTick>
 800183c:	0002      	movs	r2, r0
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e293      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800184a:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2204      	movs	r2, #4
 8001850:	4013      	ands	r3, r2
 8001852:	d1f1      	bne.n	8001838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2210      	movs	r2, #16
 800185a:	4013      	ands	r3, r2
 800185c:	d100      	bne.n	8001860 <HAL_RCC_OscConfig+0x280>
 800185e:	e0a2      	b.n	80019a6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d140      	bne.n	80018e8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001866:	4b2d      	ldr	r3, [pc, #180]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4013      	ands	r3, r2
 8001870:	d005      	beq.n	800187e <HAL_RCC_OscConfig+0x29e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e279      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800187e:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4a2d      	ldr	r2, [pc, #180]	; (8001938 <HAL_RCC_OscConfig+0x358>)
 8001884:	4013      	ands	r3, r2
 8001886:	0019      	movs	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 800188e:	430a      	orrs	r2, r1
 8001890:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	0a19      	lsrs	r1, r3, #8
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	061a      	lsls	r2, r3, #24
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	0b5b      	lsrs	r3, r3, #13
 80018ac:	3301      	adds	r3, #1
 80018ae:	2280      	movs	r2, #128	; 0x80
 80018b0:	0212      	lsls	r2, r2, #8
 80018b2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	210f      	movs	r1, #15
 80018bc:	400b      	ands	r3, r1
 80018be:	491b      	ldr	r1, [pc, #108]	; (800192c <HAL_RCC_OscConfig+0x34c>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018c4:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <HAL_RCC_OscConfig+0x350>)
 80018c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80018c8:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <HAL_RCC_OscConfig+0x354>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2513      	movs	r5, #19
 80018ce:	197c      	adds	r4, r7, r5
 80018d0:	0018      	movs	r0, r3
 80018d2:	f7ff f97b 	bl	8000bcc <HAL_InitTick>
 80018d6:	0003      	movs	r3, r0
 80018d8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80018da:	197b      	adds	r3, r7, r5
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d061      	beq.n	80019a6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80018e2:	197b      	adds	r3, r7, r5
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	e244      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69db      	ldr	r3, [r3, #28]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d040      	beq.n	8001972 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x33c>)
 80018f6:	2180      	movs	r1, #128	; 0x80
 80018f8:	0049      	lsls	r1, r1, #1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f9ab 	bl	8000c58 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001906:	e019      	b.n	800193c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001908:	f7ff f9a6 	bl	8000c58 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d912      	bls.n	800193c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e22b      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40021000 	.word	0x40021000
 8001920:	fffeffff 	.word	0xfffeffff
 8001924:	fffbffff 	.word	0xfffbffff
 8001928:	ffffe0ff 	.word	0xffffe0ff
 800192c:	08003a70 	.word	0x08003a70
 8001930:	20000078 	.word	0x20000078
 8001934:	2000007c 	.word	0x2000007c
 8001938:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800193c:	4bca      	ldr	r3, [pc, #808]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4013      	ands	r3, r2
 8001946:	d0df      	beq.n	8001908 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001948:	4bc7      	ldr	r3, [pc, #796]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4ac7      	ldr	r2, [pc, #796]	; (8001c6c <HAL_RCC_OscConfig+0x68c>)
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001956:	4bc4      	ldr	r3, [pc, #784]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800195c:	4bc2      	ldr	r3, [pc, #776]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	021b      	lsls	r3, r3, #8
 8001962:	0a19      	lsrs	r1, r3, #8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	061a      	lsls	r2, r3, #24
 800196a:	4bbf      	ldr	r3, [pc, #764]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 800196c:	430a      	orrs	r2, r1
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	e019      	b.n	80019a6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001972:	4bbd      	ldr	r3, [pc, #756]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	4bbc      	ldr	r3, [pc, #752]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001978:	49bd      	ldr	r1, [pc, #756]	; (8001c70 <HAL_RCC_OscConfig+0x690>)
 800197a:	400a      	ands	r2, r1
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff f96b 	bl	8000c58 <HAL_GetTick>
 8001982:	0003      	movs	r3, r0
 8001984:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001988:	f7ff f966 	bl	8000c58 <HAL_GetTick>
 800198c:	0002      	movs	r2, r0
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e1eb      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800199a:	4bb3      	ldr	r3, [pc, #716]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4013      	ands	r3, r2
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2208      	movs	r2, #8
 80019ac:	4013      	ands	r3, r2
 80019ae:	d036      	beq.n	8001a1e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d019      	beq.n	80019ec <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019b8:	4bab      	ldr	r3, [pc, #684]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 80019ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019bc:	4baa      	ldr	r3, [pc, #680]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 80019be:	2101      	movs	r1, #1
 80019c0:	430a      	orrs	r2, r1
 80019c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c4:	f7ff f948 	bl	8000c58 <HAL_GetTick>
 80019c8:	0003      	movs	r3, r0
 80019ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff f943 	bl	8000c58 <HAL_GetTick>
 80019d2:	0002      	movs	r2, r0
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1c8      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019e0:	4ba1      	ldr	r3, [pc, #644]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 80019e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d0f1      	beq.n	80019ce <HAL_RCC_OscConfig+0x3ee>
 80019ea:	e018      	b.n	8001a1e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ec:	4b9e      	ldr	r3, [pc, #632]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 80019ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019f0:	4b9d      	ldr	r3, [pc, #628]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 80019f2:	2101      	movs	r1, #1
 80019f4:	438a      	bics	r2, r1
 80019f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f8:	f7ff f92e 	bl	8000c58 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a02:	f7ff f929 	bl	8000c58 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e1ae      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a14:	4b94      	ldr	r3, [pc, #592]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a18:	2202      	movs	r2, #2
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d1f1      	bne.n	8001a02 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2204      	movs	r2, #4
 8001a24:	4013      	ands	r3, r2
 8001a26:	d100      	bne.n	8001a2a <HAL_RCC_OscConfig+0x44a>
 8001a28:	e0ae      	b.n	8001b88 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a2a:	2023      	movs	r0, #35	; 0x23
 8001a2c:	183b      	adds	r3, r7, r0
 8001a2e:	2200      	movs	r2, #0
 8001a30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a32:	4b8d      	ldr	r3, [pc, #564]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	055b      	lsls	r3, r3, #21
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	4b8a      	ldr	r3, [pc, #552]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a42:	4b89      	ldr	r3, [pc, #548]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	0549      	lsls	r1, r1, #21
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a4c:	183b      	adds	r3, r7, r0
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a52:	4b88      	ldr	r3, [pc, #544]	; (8001c74 <HAL_RCC_OscConfig+0x694>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d11a      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5e:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <HAL_RCC_OscConfig+0x694>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b84      	ldr	r3, [pc, #528]	; (8001c74 <HAL_RCC_OscConfig+0x694>)
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	0049      	lsls	r1, r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff f8f4 	bl	8000c58 <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a76:	f7ff f8ef 	bl	8000c58 <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e174      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b7a      	ldr	r3, [pc, #488]	; (8001c74 <HAL_RCC_OscConfig+0x694>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	4013      	ands	r3, r2
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4d0>
 8001aa0:	4b71      	ldr	r3, [pc, #452]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001aa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001aa4:	4b70      	ldr	r3, [pc, #448]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	0049      	lsls	r1, r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	651a      	str	r2, [r3, #80]	; 0x50
 8001aae:	e031      	b.n	8001b14 <HAL_RCC_OscConfig+0x534>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10c      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4f2>
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001abc:	4b6a      	ldr	r3, [pc, #424]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001abe:	496c      	ldr	r1, [pc, #432]	; (8001c70 <HAL_RCC_OscConfig+0x690>)
 8001ac0:	400a      	ands	r2, r1
 8001ac2:	651a      	str	r2, [r3, #80]	; 0x50
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001ac6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ac8:	4b67      	ldr	r3, [pc, #412]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001aca:	496b      	ldr	r1, [pc, #428]	; (8001c78 <HAL_RCC_OscConfig+0x698>)
 8001acc:	400a      	ands	r2, r1
 8001ace:	651a      	str	r2, [r3, #80]	; 0x50
 8001ad0:	e020      	b.n	8001b14 <HAL_RCC_OscConfig+0x534>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	23a0      	movs	r3, #160	; 0xa0
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d10e      	bne.n	8001afc <HAL_RCC_OscConfig+0x51c>
 8001ade:	4b62      	ldr	r3, [pc, #392]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae2:	4b61      	ldr	r3, [pc, #388]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	00c9      	lsls	r1, r1, #3
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	651a      	str	r2, [r3, #80]	; 0x50
 8001aec:	4b5e      	ldr	r3, [pc, #376]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af0:	4b5d      	ldr	r3, [pc, #372]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0049      	lsls	r1, r1, #1
 8001af6:	430a      	orrs	r2, r1
 8001af8:	651a      	str	r2, [r3, #80]	; 0x50
 8001afa:	e00b      	b.n	8001b14 <HAL_RCC_OscConfig+0x534>
 8001afc:	4b5a      	ldr	r3, [pc, #360]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001afe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001b02:	495b      	ldr	r1, [pc, #364]	; (8001c70 <HAL_RCC_OscConfig+0x690>)
 8001b04:	400a      	ands	r2, r1
 8001b06:	651a      	str	r2, [r3, #80]	; 0x50
 8001b08:	4b57      	ldr	r3, [pc, #348]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001b0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b0c:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001b0e:	495a      	ldr	r1, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x698>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d015      	beq.n	8001b48 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff f89c 	bl	8000c58 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f897 	bl	8000c58 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_RCC_OscConfig+0x69c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e11b      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b3a:	4b4b      	ldr	r3, [pc, #300]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4013      	ands	r3, r2
 8001b44:	d0ef      	beq.n	8001b26 <HAL_RCC_OscConfig+0x546>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b48:	f7ff f886 	bl	8000c58 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff f881 	bl	8000c58 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a47      	ldr	r2, [pc, #284]	; (8001c7c <HAL_RCC_OscConfig+0x69c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e105      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b66:	4b40      	ldr	r3, [pc, #256]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d1ef      	bne.n	8001b52 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b72:	2323      	movs	r3, #35	; 0x23
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	4b3a      	ldr	r3, [pc, #232]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b80:	4b39      	ldr	r3, [pc, #228]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001b82:	493f      	ldr	r1, [pc, #252]	; (8001c80 <HAL_RCC_OscConfig+0x6a0>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2220      	movs	r2, #32
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d049      	beq.n	8001c26 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d026      	beq.n	8001be8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001b9a:	4b33      	ldr	r3, [pc, #204]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	609a      	str	r2, [r3, #8]
 8001ba6:	4b30      	ldr	r3, [pc, #192]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001baa:	4b2f      	ldr	r3, [pc, #188]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb2:	4b34      	ldr	r3, [pc, #208]	; (8001c84 <HAL_RCC_OscConfig+0x6a4>)
 8001bb4:	6a1a      	ldr	r2, [r3, #32]
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_RCC_OscConfig+0x6a4>)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	0189      	lsls	r1, r1, #6
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f84a 	bl	8000c58 <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bca:	f7ff f845 	bl	8000c58 <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0ca      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f1      	beq.n	8001bca <HAL_RCC_OscConfig+0x5ea>
 8001be6:	e01e      	b.n	8001c26 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	438a      	bics	r2, r1
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	4b23      	ldr	r3, [pc, #140]	; (8001c84 <HAL_RCC_OscConfig+0x6a4>)
 8001bf6:	6a1a      	ldr	r2, [r3, #32]
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_RCC_OscConfig+0x6a4>)
 8001bfa:	4923      	ldr	r1, [pc, #140]	; (8001c88 <HAL_RCC_OscConfig+0x6a8>)
 8001bfc:	400a      	ands	r2, r1
 8001bfe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff f82a 	bl	8000c58 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c0a:	f7ff f825 	bl	8000c58 <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0aa      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2202      	movs	r2, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	d1f1      	bne.n	8001c0a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x650>
 8001c2e:	e09f      	b.n	8001d70 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b0c      	cmp	r3, #12
 8001c34:	d100      	bne.n	8001c38 <HAL_RCC_OscConfig+0x658>
 8001c36:	e078      	b.n	8001d2a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d159      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_RCC_OscConfig+0x688>)
 8001c46:	4911      	ldr	r1, [pc, #68]	; (8001c8c <HAL_RCC_OscConfig+0x6ac>)
 8001c48:	400a      	ands	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f804 	bl	8000c58 <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c54:	e01c      	b.n	8001c90 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c56:	f7fe ffff 	bl	8000c58 <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d915      	bls.n	8001c90 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e084      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	ffff1fff 	.word	0xffff1fff
 8001c70:	fffffeff 	.word	0xfffffeff
 8001c74:	40007000 	.word	0x40007000
 8001c78:	fffffbff 	.word	0xfffffbff
 8001c7c:	00001388 	.word	0x00001388
 8001c80:	efffffff 	.word	0xefffffff
 8001c84:	40010000 	.word	0x40010000
 8001c88:	ffffdfff 	.word	0xffffdfff
 8001c8c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	049b      	lsls	r3, r3, #18
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d1dc      	bne.n	8001c56 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4a37      	ldr	r2, [pc, #220]	; (8001d80 <HAL_RCC_OscConfig+0x7a0>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	0449      	lsls	r1, r1, #17
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cca:	f7fe ffc5 	bl	8000c58 <HAL_GetTick>
 8001cce:	0003      	movs	r3, r0
 8001cd0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cd4:	f7fe ffc0 	bl	8000c58 <HAL_GetTick>
 8001cd8:	0002      	movs	r2, r0
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e045      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ce6:	4b25      	ldr	r3, [pc, #148]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	049b      	lsls	r3, r3, #18
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x6f4>
 8001cf2:	e03d      	b.n	8001d70 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001cfa:	4922      	ldr	r1, [pc, #136]	; (8001d84 <HAL_RCC_OscConfig+0x7a4>)
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7fe ffaa 	bl	8000c58 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7fe ffa5 	bl	8000c58 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e02a      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d1c:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	2380      	movs	r3, #128	; 0x80
 8001d22:	049b      	lsls	r3, r3, #18
 8001d24:	4013      	ands	r3, r2
 8001d26:	d1f0      	bne.n	8001d0a <HAL_RCC_OscConfig+0x72a>
 8001d28:	e022      	b.n	8001d70 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e01d      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_RCC_OscConfig+0x79c>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	025b      	lsls	r3, r3, #9
 8001d42:	401a      	ands	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10f      	bne.n	8001d6c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	23f0      	movs	r3, #240	; 0xf0
 8001d50:	039b      	lsls	r3, r3, #14
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	23c0      	movs	r3, #192	; 0xc0
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	401a      	ands	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	0018      	movs	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	b00a      	add	sp, #40	; 0x28
 8001d78:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	ff02ffff 	.word	0xff02ffff
 8001d84:	feffffff 	.word	0xfeffffff

08001d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e128      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b96      	ldr	r3, [pc, #600]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d91e      	bls.n	8001de8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b93      	ldr	r3, [pc, #588]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2201      	movs	r2, #1
 8001db0:	4393      	bics	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	4b90      	ldr	r3, [pc, #576]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001dbc:	f7fe ff4c 	bl	8000c58 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc4:	e009      	b.n	8001dda <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc6:	f7fe ff47 	bl	8000c58 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a8a      	ldr	r2, [pc, #552]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e109      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dda:	4b87      	ldr	r3, [pc, #540]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1ee      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2202      	movs	r2, #2
 8001dee:	4013      	ands	r3, r2
 8001df0:	d009      	beq.n	8001e06 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df2:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	22f0      	movs	r2, #240	; 0xf0
 8001df8:	4393      	bics	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689a      	ldr	r2, [r3, #8]
 8001e00:	4b7f      	ldr	r3, [pc, #508]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d100      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x8a>
 8001e10:	e089      	b.n	8001f26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d107      	bne.n	8001e2a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e1a:	4b79      	ldr	r3, [pc, #484]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	029b      	lsls	r3, r3, #10
 8001e22:	4013      	ands	r3, r2
 8001e24:	d120      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e0e1      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e32:	4b73      	ldr	r3, [pc, #460]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	2380      	movs	r3, #128	; 0x80
 8001e38:	049b      	lsls	r3, r3, #18
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d114      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0d5      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d106      	bne.n	8001e58 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4a:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2204      	movs	r2, #4
 8001e50:	4013      	ands	r3, r2
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0ca      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e58:	4b69      	ldr	r3, [pc, #420]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4013      	ands	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0c2      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e68:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4393      	bics	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4b62      	ldr	r3, [pc, #392]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e7c:	f7fe feec 	bl	8000c58 <HAL_GetTick>
 8001e80:	0003      	movs	r3, r0
 8001e82:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e8c:	e009      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8e:	f7fe fee3 	bl	8000c58 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	4a58      	ldr	r2, [pc, #352]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e0a5      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ea2:	4b57      	ldr	r3, [pc, #348]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d1ef      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x106>
 8001eae:	e03a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d111      	bne.n	8001edc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eb8:	e009      	b.n	8001ece <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eba:	f7fe fecd 	bl	8000c58 <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e08f      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ece:	4b4c      	ldr	r3, [pc, #304]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d1ef      	bne.n	8001eba <HAL_RCC_ClockConfig+0x132>
 8001eda:	e024      	b.n	8001f26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d11b      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ee4:	e009      	b.n	8001efa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee6:	f7fe feb7 	bl	8000c58 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	4a42      	ldr	r2, [pc, #264]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e079      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001efa:	4b41      	ldr	r3, [pc, #260]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	220c      	movs	r2, #12
 8001f00:	4013      	ands	r3, r2
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d1ef      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x15e>
 8001f06:	e00e      	b.n	8001f26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7fe fea6 	bl	8000c58 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	4a3a      	ldr	r2, [pc, #232]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e068      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f1c:	4b38      	ldr	r3, [pc, #224]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	220c      	movs	r2, #12
 8001f22:	4013      	ands	r3, r2
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f26:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d21e      	bcs.n	8001f72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f34:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4393      	bics	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f46:	f7fe fe87 	bl	8000c58 <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	e009      	b.n	8001f64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7fe fe82 	bl	8000c58 <HAL_GetTick>
 8001f54:	0002      	movs	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_RCC_ClockConfig+0x274>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e044      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f64:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_RCC_ClockConfig+0x270>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d1ee      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7c:	4b20      	ldr	r3, [pc, #128]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a20      	ldr	r2, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x27c>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	4013      	ands	r3, r2
 8001f98:	d00a      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	4a1a      	ldr	r2, [pc, #104]	; (8002008 <HAL_RCC_ClockConfig+0x280>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	00da      	lsls	r2, r3, #3
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fb0:	f000 f832 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fb4:	0001      	movs	r1, r0
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_ClockConfig+0x278>)
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	220f      	movs	r2, #15
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	4a12      	ldr	r2, [pc, #72]	; (800200c <HAL_RCC_ClockConfig+0x284>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	000a      	movs	r2, r1
 8001fc6:	40da      	lsrs	r2, r3
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_ClockConfig+0x288>)
 8001fca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_RCC_ClockConfig+0x28c>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	250b      	movs	r5, #11
 8001fd2:	197c      	adds	r4, r7, r5
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f7fe fdf9 	bl	8000bcc <HAL_InitTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001fde:	197b      	adds	r3, r7, r5
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001fe6:	197b      	adds	r3, r7, r5
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	e000      	b.n	8001fee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b004      	add	sp, #16
 8001ff4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40022000 	.word	0x40022000
 8001ffc:	00001388 	.word	0x00001388
 8002000:	40021000 	.word	0x40021000
 8002004:	fffff8ff 	.word	0xfffff8ff
 8002008:	ffffc7ff 	.word	0xffffc7ff
 800200c:	08003a70 	.word	0x08003a70
 8002010:	20000078 	.word	0x20000078
 8002014:	2000007c 	.word	0x2000007c

08002018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800201e:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_GetSysClockFreq+0x138>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002026:	230c      	movs	r3, #12
 8002028:	4013      	ands	r3, r2
 800202a:	2b0c      	cmp	r3, #12
 800202c:	d014      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x40>
 800202e:	d900      	bls.n	8002032 <HAL_RCC_GetSysClockFreq+0x1a>
 8002030:	e07b      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x112>
 8002032:	2b04      	cmp	r3, #4
 8002034:	d002      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x24>
 8002036:	2b08      	cmp	r3, #8
 8002038:	d00b      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0x3a>
 800203a:	e076      	b.n	800212a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800203c:	4b44      	ldr	r3, [pc, #272]	; (8002150 <HAL_RCC_GetSysClockFreq+0x138>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2210      	movs	r2, #16
 8002042:	4013      	ands	r3, r2
 8002044:	d002      	beq.n	800204c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002046:	4b43      	ldr	r3, [pc, #268]	; (8002154 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002048:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800204a:	e07c      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800204c:	4b42      	ldr	r3, [pc, #264]	; (8002158 <HAL_RCC_GetSysClockFreq+0x140>)
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002050:	e079      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002052:	4b42      	ldr	r3, [pc, #264]	; (800215c <HAL_RCC_GetSysClockFreq+0x144>)
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002056:	e076      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	0c9a      	lsrs	r2, r3, #18
 800205c:	230f      	movs	r3, #15
 800205e:	401a      	ands	r2, r3
 8002060:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <HAL_RCC_GetSysClockFreq+0x148>)
 8002062:	5c9b      	ldrb	r3, [r3, r2]
 8002064:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002068:	0d9a      	lsrs	r2, r3, #22
 800206a:	2303      	movs	r3, #3
 800206c:	4013      	ands	r3, r2
 800206e:	3301      	adds	r3, #1
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <HAL_RCC_GetSysClockFreq+0x138>)
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	025b      	lsls	r3, r3, #9
 800207a:	4013      	ands	r3, r2
 800207c:	d01a      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	4a35      	ldr	r2, [pc, #212]	; (800215c <HAL_RCC_GetSysClockFreq+0x144>)
 8002088:	2300      	movs	r3, #0
 800208a:	69b8      	ldr	r0, [r7, #24]
 800208c:	69f9      	ldr	r1, [r7, #28]
 800208e:	f7fe f8e7 	bl	8000260 <__aeabi_lmul>
 8002092:	0002      	movs	r2, r0
 8002094:	000b      	movs	r3, r1
 8002096:	0010      	movs	r0, r2
 8002098:	0019      	movs	r1, r3
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f7fe f8bb 	bl	8000220 <__aeabi_uldivmod>
 80020aa:	0002      	movs	r2, r0
 80020ac:	000b      	movs	r3, r1
 80020ae:	0013      	movs	r3, r2
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
 80020b2:	e037      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80020b4:	4b26      	ldr	r3, [pc, #152]	; (8002150 <HAL_RCC_GetSysClockFreq+0x138>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2210      	movs	r2, #16
 80020ba:	4013      	ands	r3, r2
 80020bc:	d01a      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4a23      	ldr	r2, [pc, #140]	; (8002154 <HAL_RCC_GetSysClockFreq+0x13c>)
 80020c8:	2300      	movs	r3, #0
 80020ca:	68b8      	ldr	r0, [r7, #8]
 80020cc:	68f9      	ldr	r1, [r7, #12]
 80020ce:	f7fe f8c7 	bl	8000260 <__aeabi_lmul>
 80020d2:	0002      	movs	r2, r0
 80020d4:	000b      	movs	r3, r1
 80020d6:	0010      	movs	r0, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f7fe f89b 	bl	8000220 <__aeabi_uldivmod>
 80020ea:	0002      	movs	r2, r0
 80020ec:	000b      	movs	r3, r1
 80020ee:	0013      	movs	r3, r2
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
 80020f2:	e017      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	0018      	movs	r0, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	0019      	movs	r1, r3
 80020fc:	4a16      	ldr	r2, [pc, #88]	; (8002158 <HAL_RCC_GetSysClockFreq+0x140>)
 80020fe:	2300      	movs	r3, #0
 8002100:	f7fe f8ae 	bl	8000260 <__aeabi_lmul>
 8002104:	0002      	movs	r2, r0
 8002106:	000b      	movs	r3, r1
 8002108:	0010      	movs	r0, r2
 800210a:	0019      	movs	r1, r3
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	001c      	movs	r4, r3
 8002110:	2300      	movs	r3, #0
 8002112:	001d      	movs	r5, r3
 8002114:	0022      	movs	r2, r4
 8002116:	002b      	movs	r3, r5
 8002118:	f7fe f882 	bl	8000220 <__aeabi_uldivmod>
 800211c:	0002      	movs	r2, r0
 800211e:	000b      	movs	r3, r1
 8002120:	0013      	movs	r3, r2
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002128:	e00d      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_GetSysClockFreq+0x138>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	0b5b      	lsrs	r3, r3, #13
 8002130:	2207      	movs	r2, #7
 8002132:	4013      	ands	r3, r2
 8002134:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	3301      	adds	r3, #1
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	0212      	lsls	r2, r2, #8
 800213e:	409a      	lsls	r2, r3
 8002140:	0013      	movs	r3, r2
 8002142:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002144:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b00e      	add	sp, #56	; 0x38
 800214e:	bdb0      	pop	{r4, r5, r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	003d0900 	.word	0x003d0900
 8002158:	00f42400 	.word	0x00f42400
 800215c:	007a1200 	.word	0x007a1200
 8002160:	08003a88 	.word	0x08003a88

08002164 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b02      	ldr	r3, [pc, #8]	; (8002174 <HAL_RCC_GetHCLKFreq+0x10>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	20000078 	.word	0x20000078

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800217c:	f7ff fff2 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002180:	0001      	movs	r1, r0
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	2207      	movs	r2, #7
 800218a:	4013      	ands	r3, r2
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800218e:	5cd3      	ldrb	r3, [r2, r3]
 8002190:	40d9      	lsrs	r1, r3
 8002192:	000b      	movs	r3, r1
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	40021000 	.word	0x40021000
 80021a0:	08003a80 	.word	0x08003a80

080021a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a8:	f7ff ffdc 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021ac:	0001      	movs	r1, r0
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	0adb      	lsrs	r3, r3, #11
 80021b4:	2207      	movs	r2, #7
 80021b6:	4013      	ands	r3, r2
 80021b8:	4a04      	ldr	r2, [pc, #16]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80021ba:	5cd3      	ldrb	r3, [r2, r3]
 80021bc:	40d9      	lsrs	r1, r3
 80021be:	000b      	movs	r3, r1
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	40021000 	.word	0x40021000
 80021cc:	08003a80 	.word	0x08003a80

080021d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80021d8:	2317      	movs	r3, #23
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	2200      	movs	r2, #0
 80021de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2220      	movs	r2, #32
 80021e6:	4013      	ands	r3, r2
 80021e8:	d106      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	4013      	ands	r3, r2
 80021f4:	d100      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80021f6:	e0d9      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f8:	4ba4      	ldr	r3, [pc, #656]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	055b      	lsls	r3, r3, #21
 8002200:	4013      	ands	r3, r2
 8002202:	d10a      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	4ba1      	ldr	r3, [pc, #644]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002208:	4ba0      	ldr	r3, [pc, #640]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	0549      	lsls	r1, r1, #21
 800220e:	430a      	orrs	r2, r1
 8002210:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002212:	2317      	movs	r3, #23
 8002214:	18fb      	adds	r3, r7, r3
 8002216:	2201      	movs	r2, #1
 8002218:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b9d      	ldr	r3, [pc, #628]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4013      	ands	r3, r2
 8002224:	d11a      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4b9a      	ldr	r3, [pc, #616]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b99      	ldr	r3, [pc, #612]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800222c:	2180      	movs	r1, #128	; 0x80
 800222e:	0049      	lsls	r1, r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002234:	f7fe fd10 	bl	8000c58 <HAL_GetTick>
 8002238:	0003      	movs	r3, r0
 800223a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	e008      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7fe fd0b 	bl	8000c58 <HAL_GetTick>
 8002242:	0002      	movs	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b64      	cmp	r3, #100	; 0x64
 800224a:	d901      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e118      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	4b8f      	ldr	r3, [pc, #572]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4013      	ands	r3, r2
 800225a:	d0f0      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800225c:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	23c0      	movs	r3, #192	; 0xc0
 8002262:	039b      	lsls	r3, r3, #14
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	23c0      	movs	r3, #192	; 0xc0
 800226e:	039b      	lsls	r3, r3, #14
 8002270:	4013      	ands	r3, r2
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	429a      	cmp	r2, r3
 8002276:	d107      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	23c0      	movs	r3, #192	; 0xc0
 800227e:	039b      	lsls	r3, r3, #14
 8002280:	4013      	ands	r3, r2
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	429a      	cmp	r2, r3
 8002286:	d013      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	23c0      	movs	r3, #192	; 0xc0
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	401a      	ands	r2, r3
 8002292:	23c0      	movs	r3, #192	; 0xc0
 8002294:	029b      	lsls	r3, r3, #10
 8002296:	429a      	cmp	r2, r3
 8002298:	d10a      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800229a:	4b7c      	ldr	r3, [pc, #496]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	029b      	lsls	r3, r3, #10
 80022a2:	401a      	ands	r2, r3
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	029b      	lsls	r3, r3, #10
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d101      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0e8      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80022b0:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022b4:	23c0      	movs	r3, #192	; 0xc0
 80022b6:	029b      	lsls	r3, r3, #10
 80022b8:	4013      	ands	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d049      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	23c0      	movs	r3, #192	; 0xc0
 80022c8:	029b      	lsls	r3, r3, #10
 80022ca:	4013      	ands	r3, r2
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d004      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2220      	movs	r2, #32
 80022d8:	4013      	ands	r3, r2
 80022da:	d10d      	bne.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	029b      	lsls	r3, r3, #10
 80022e4:	4013      	ands	r3, r2
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d034      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	4013      	ands	r3, r2
 80022f6:	d02e      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80022f8:	4b64      	ldr	r3, [pc, #400]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fc:	4a65      	ldr	r2, [pc, #404]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80022fe:	4013      	ands	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002302:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002306:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002308:	2180      	movs	r1, #128	; 0x80
 800230a:	0309      	lsls	r1, r1, #12
 800230c:	430a      	orrs	r2, r1
 800230e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002310:	4b5e      	ldr	r3, [pc, #376]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002312:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002314:	4b5d      	ldr	r3, [pc, #372]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002316:	4960      	ldr	r1, [pc, #384]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002318:	400a      	ands	r2, r1
 800231a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800231c:	4b5b      	ldr	r3, [pc, #364]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4013      	ands	r3, r2
 800232a:	d014      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe fc94 	bl	8000c58 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002334:	e009      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002336:	f7fe fc8f 	bl	8000c58 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	4a56      	ldr	r2, [pc, #344]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e09b      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800234c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4013      	ands	r3, r2
 8002354:	d0ef      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	23c0      	movs	r3, #192	; 0xc0
 800235c:	029b      	lsls	r3, r3, #10
 800235e:	401a      	ands	r2, r3
 8002360:	23c0      	movs	r3, #192	; 0xc0
 8002362:	029b      	lsls	r3, r3, #10
 8002364:	429a      	cmp	r2, r3
 8002366:	d10c      	bne.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a4c      	ldr	r2, [pc, #304]	; (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800236e:	4013      	ands	r3, r2
 8002370:	0019      	movs	r1, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	23c0      	movs	r3, #192	; 0xc0
 8002378:	039b      	lsls	r3, r3, #14
 800237a:	401a      	ands	r2, r3
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	4b42      	ldr	r3, [pc, #264]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002384:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	23c0      	movs	r3, #192	; 0xc0
 800238c:	029b      	lsls	r3, r3, #10
 800238e:	401a      	ands	r2, r3
 8002390:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002392:	430a      	orrs	r2, r1
 8002394:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002396:	2317      	movs	r3, #23
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023a0:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023a6:	493f      	ldr	r1, [pc, #252]	; (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80023a8:	400a      	ands	r2, r1
 80023aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2201      	movs	r2, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d009      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023b6:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	2203      	movs	r2, #3
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023c6:	430a      	orrs	r2, r1
 80023c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2202      	movs	r2, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d8:	220c      	movs	r2, #12
 80023da:	4393      	bics	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	4b2a      	ldr	r3, [pc, #168]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2204      	movs	r2, #4
 80023ee:	4013      	ands	r3, r2
 80023f0:	d009      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80023f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f6:	4a2c      	ldr	r2, [pc, #176]	; (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	0019      	movs	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695a      	ldr	r2, [r3, #20]
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002402:	430a      	orrs	r2, r1
 8002404:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2208      	movs	r2, #8
 800240c:	4013      	ands	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002410:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002414:	4a25      	ldr	r2, [pc, #148]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002416:	4013      	ands	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002420:	430a      	orrs	r2, r1
 8002422:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4013      	ands	r3, r2
 800242e:	d009      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002430:	4b16      	ldr	r3, [pc, #88]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002434:	4a17      	ldr	r2, [pc, #92]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002436:	4013      	ands	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69da      	ldr	r2, [r3, #28]
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002440:	430a      	orrs	r2, r1
 8002442:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2240      	movs	r2, #64	; 0x40
 800244a:	4013      	ands	r3, r2
 800244c:	d009      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	4a17      	ldr	r2, [pc, #92]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002454:	4013      	ands	r3, r2
 8002456:	0019      	movs	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800245e:	430a      	orrs	r2, r1
 8002460:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2280      	movs	r2, #128	; 0x80
 8002468:	4013      	ands	r3, r2
 800246a:	d009      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800246c:	4b07      	ldr	r3, [pc, #28]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	4a10      	ldr	r2, [pc, #64]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002472:	4013      	ands	r3, r2
 8002474:	0019      	movs	r1, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	4b04      	ldr	r3, [pc, #16]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800247c:	430a      	orrs	r2, r1
 800247e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b006      	add	sp, #24
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	fffcffff 	.word	0xfffcffff
 8002498:	fff7ffff 	.word	0xfff7ffff
 800249c:	00001388 	.word	0x00001388
 80024a0:	ffcfffff 	.word	0xffcfffff
 80024a4:	efffffff 	.word	0xefffffff
 80024a8:	fffff3ff 	.word	0xfffff3ff
 80024ac:	ffffcfff 	.word	0xffffcfff
 80024b0:	fbffffff 	.word	0xfbffffff
 80024b4:	fff3ffff 	.word	0xfff3ffff

080024b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e083      	b.n	80025d2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d109      	bne.n	80024e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2382      	movs	r3, #130	; 0x82
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	429a      	cmp	r2, r3
 80024dc:	d009      	beq.n	80024f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	61da      	str	r2, [r3, #28]
 80024e4:	e005      	b.n	80024f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2251      	movs	r2, #81	; 0x51
 80024fc:	5c9b      	ldrb	r3, [r3, r2]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2250      	movs	r2, #80	; 0x50
 8002508:	2100      	movs	r1, #0
 800250a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f7fe f9ea 	bl	80008e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2251      	movs	r2, #81	; 0x51
 8002518:	2102      	movs	r1, #2
 800251a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	438a      	bics	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	2382      	movs	r3, #130	; 0x82
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	401a      	ands	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	2384      	movs	r3, #132	; 0x84
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	400b      	ands	r3, r1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68d9      	ldr	r1, [r3, #12]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	400b      	ands	r3, r1
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2102      	movs	r1, #2
 8002554:	400b      	ands	r3, r1
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	2101      	movs	r1, #1
 800255e:	400b      	ands	r3, r1
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6999      	ldr	r1, [r3, #24]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	400b      	ands	r3, r1
 800256c:	431a      	orrs	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2138      	movs	r1, #56	; 0x38
 8002574:	400b      	ands	r3, r1
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	2180      	movs	r1, #128	; 0x80
 800257e:	400b      	ands	r3, r1
 8002580:	431a      	orrs	r2, r3
 8002582:	0011      	movs	r1, r2
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002588:	2380      	movs	r3, #128	; 0x80
 800258a:	019b      	lsls	r3, r3, #6
 800258c:	401a      	ands	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	0c1b      	lsrs	r3, r3, #16
 800259c:	2204      	movs	r2, #4
 800259e:	4013      	ands	r3, r2
 80025a0:	0019      	movs	r1, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	2210      	movs	r2, #16
 80025a8:	401a      	ands	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4907      	ldr	r1, [pc, #28]	; (80025dc <HAL_SPI_Init+0x124>)
 80025be:	400a      	ands	r2, r1
 80025c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2251      	movs	r2, #81	; 0x51
 80025cc:	2101      	movs	r1, #1
 80025ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	0018      	movs	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	b002      	add	sp, #8
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	fffff7ff 	.word	0xfffff7ff

080025e0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	1dbb      	adds	r3, r7, #6
 80025ec:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ee:	2317      	movs	r3, #23
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d112      	bne.n	8002624 <HAL_SPI_Receive_DMA+0x44>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	2382      	movs	r3, #130	; 0x82
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	429a      	cmp	r2, r3
 8002608:	d10c      	bne.n	8002624 <HAL_SPI_Receive_DMA+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2251      	movs	r2, #81	; 0x51
 800260e:	2104      	movs	r1, #4
 8002610:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8002612:	1dbb      	adds	r3, r7, #6
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f8ba 	bl	8002794 <HAL_SPI_TransmitReceive_DMA>
 8002620:	0003      	movs	r3, r0
 8002622:	e0aa      	b.n	800277a <HAL_SPI_Receive_DMA+0x19a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2250      	movs	r2, #80	; 0x50
 8002628:	5c9b      	ldrb	r3, [r3, r2]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_SPI_Receive_DMA+0x52>
 800262e:	2302      	movs	r3, #2
 8002630:	e0a3      	b.n	800277a <HAL_SPI_Receive_DMA+0x19a>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2250      	movs	r2, #80	; 0x50
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2251      	movs	r2, #81	; 0x51
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d004      	beq.n	8002650 <HAL_SPI_Receive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8002646:	2317      	movs	r3, #23
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2202      	movs	r2, #2
 800264c:	701a      	strb	r2, [r3, #0]
    goto error;
 800264e:	e08d      	b.n	800276c <HAL_SPI_Receive_DMA+0x18c>
  }

  if ((pData == NULL) || (Size == 0U))
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_SPI_Receive_DMA+0x7e>
 8002656:	1dbb      	adds	r3, r7, #6
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d104      	bne.n	8002668 <HAL_SPI_Receive_DMA+0x88>
  {
    errorcode = HAL_ERROR;
 800265e:	2317      	movs	r3, #23
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
    goto error;
 8002666:	e081      	b.n	800276c <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2251      	movs	r2, #81	; 0x51
 800266c:	2104      	movs	r1, #4
 800266e:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1dba      	adds	r2, r7, #6
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1dba      	adds	r2, r7, #6
 8002688:	8812      	ldrh	r2, [r2, #0]
 800268a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d10f      	bne.n	80026d0 <HAL_SPI_Receive_DMA+0xf0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2140      	movs	r1, #64	; 0x40
 80026bc:	438a      	bics	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	492e      	ldr	r1, [pc, #184]	; (8002784 <HAL_SPI_Receive_DMA+0x1a4>)
 80026cc:	400a      	ands	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	4a2c      	ldr	r2, [pc, #176]	; (8002788 <HAL_SPI_Receive_DMA+0x1a8>)
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	4a2b      	ldr	r2, [pc, #172]	; (800278c <HAL_SPI_Receive_DMA+0x1ac>)
 80026de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	4a2a      	ldr	r2, [pc, #168]	; (8002790 <HAL_SPI_Receive_DMA+0x1b0>)
 80026e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ec:	2200      	movs	r2, #0
 80026ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	330c      	adds	r3, #12
 80026fa:	0019      	movs	r1, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002700:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002706:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002708:	f7fe fc2a 	bl	8000f60 <HAL_DMA_Start_IT>
 800270c:	1e03      	subs	r3, r0, #0
 800270e:	d00e      	beq.n	800272e <HAL_SPI_Receive_DMA+0x14e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002714:	2210      	movs	r2, #16
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800271c:	2317      	movs	r3, #23
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2251      	movs	r2, #81	; 0x51
 8002728:	2101      	movs	r1, #1
 800272a:	5499      	strb	r1, [r3, r2]
    goto error;
 800272c:	e01e      	b.n	800276c <HAL_SPI_Receive_DMA+0x18c>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	4013      	ands	r3, r2
 8002738:	2b40      	cmp	r3, #64	; 0x40
 800273a:	d007      	beq.n	800274c <HAL_SPI_Receive_DMA+0x16c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2140      	movs	r1, #64	; 0x40
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2120      	movs	r1, #32
 8002758:	430a      	orrs	r2, r1
 800275a:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2101      	movs	r1, #1
 8002768:	430a      	orrs	r2, r1
 800276a:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2250      	movs	r2, #80	; 0x50
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002774:	2317      	movs	r3, #23
 8002776:	18fb      	adds	r3, r7, r3
 8002778:	781b      	ldrb	r3, [r3, #0]
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b006      	add	sp, #24
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	ffffbfff 	.word	0xffffbfff
 8002788:	08002d37 	.word	0x08002d37
 800278c:	08002bf5 	.word	0x08002bf5
 8002790:	08002d73 	.word	0x08002d73

08002794 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	001a      	movs	r2, r3
 80027a2:	1cbb      	adds	r3, r7, #2
 80027a4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80027a6:	2317      	movs	r3, #23
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2200      	movs	r2, #0
 80027ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2250      	movs	r2, #80	; 0x50
 80027b2:	5c9b      	ldrb	r3, [r3, r2]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_SPI_TransmitReceive_DMA+0x28>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e0f6      	b.n	80029aa <HAL_SPI_TransmitReceive_DMA+0x216>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2250      	movs	r2, #80	; 0x50
 80027c0:	2101      	movs	r1, #1
 80027c2:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027c4:	2016      	movs	r0, #22
 80027c6:	183b      	adds	r3, r7, r0
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	2151      	movs	r1, #81	; 0x51
 80027cc:	5c52      	ldrb	r2, [r2, r1]
 80027ce:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80027d6:	0001      	movs	r1, r0
 80027d8:	187b      	adds	r3, r7, r1
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d011      	beq.n	8002804 <HAL_SPI_TransmitReceive_DMA+0x70>
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	2382      	movs	r3, #130	; 0x82
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d107      	bne.n	80027fa <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <HAL_SPI_TransmitReceive_DMA+0x66>
 80027f2:	187b      	adds	r3, r7, r1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d004      	beq.n	8002804 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80027fa:	2317      	movs	r3, #23
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	2202      	movs	r2, #2
 8002800:	701a      	strb	r2, [r3, #0]
    goto error;
 8002802:	e0cb      	b.n	800299c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <HAL_SPI_TransmitReceive_DMA+0x84>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_SPI_TransmitReceive_DMA+0x84>
 8002810:	1cbb      	adds	r3, r7, #2
 8002812:	881b      	ldrh	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d104      	bne.n	8002822 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8002818:	2317      	movs	r3, #23
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002820:	e0bc      	b.n	800299c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2251      	movs	r2, #81	; 0x51
 8002826:	5c9b      	ldrb	r3, [r3, r2]
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b04      	cmp	r3, #4
 800282c:	d003      	beq.n	8002836 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2251      	movs	r2, #81	; 0x51
 8002832:	2105      	movs	r1, #5
 8002834:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1cba      	adds	r2, r7, #2
 8002846:	8812      	ldrh	r2, [r2, #0]
 8002848:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	1cba      	adds	r2, r7, #2
 800284e:	8812      	ldrh	r2, [r2, #0]
 8002850:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1cba      	adds	r2, r7, #2
 800285c:	8812      	ldrh	r2, [r2, #0]
 800285e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1cba      	adds	r2, r7, #2
 8002864:	8812      	ldrh	r2, [r2, #0]
 8002866:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2251      	movs	r2, #81	; 0x51
 8002878:	5c9b      	ldrb	r3, [r3, r2]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b04      	cmp	r3, #4
 800287e:	d108      	bne.n	8002892 <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	4a4b      	ldr	r2, [pc, #300]	; (80029b4 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	4a4a      	ldr	r2, [pc, #296]	; (80029b8 <HAL_SPI_TransmitReceive_DMA+0x224>)
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002890:	e007      	b.n	80028a2 <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002896:	4a49      	ldr	r2, [pc, #292]	; (80029bc <HAL_SPI_TransmitReceive_DMA+0x228>)
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4a48      	ldr	r2, [pc, #288]	; (80029c0 <HAL_SPI_TransmitReceive_DMA+0x22c>)
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	4a47      	ldr	r2, [pc, #284]	; (80029c4 <HAL_SPI_TransmitReceive_DMA+0x230>)
 80028a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ae:	2200      	movs	r2, #0
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	330c      	adds	r3, #12
 80028bc:	0019      	movs	r1, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80028ca:	f7fe fb49 	bl	8000f60 <HAL_DMA_Start_IT>
 80028ce:	1e03      	subs	r3, r0, #0
 80028d0:	d00e      	beq.n	80028f0 <HAL_SPI_TransmitReceive_DMA+0x15c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d6:	2210      	movs	r2, #16
 80028d8:	431a      	orrs	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80028de:	2317      	movs	r3, #23
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	2201      	movs	r2, #1
 80028e4:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2251      	movs	r2, #81	; 0x51
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]
    goto error;
 80028ee:	e055      	b.n	800299c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2101      	movs	r1, #1
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002904:	2200      	movs	r2, #0
 8002906:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290c:	2200      	movs	r2, #0
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002914:	2200      	movs	r2, #0
 8002916:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291c:	2200      	movs	r2, #0
 800291e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	0019      	movs	r1, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	330c      	adds	r3, #12
 8002930:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002936:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002938:	f7fe fb12 	bl	8000f60 <HAL_DMA_Start_IT>
 800293c:	1e03      	subs	r3, r0, #0
 800293e:	d00e      	beq.n	800295e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	2210      	movs	r2, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800294c:	2317      	movs	r3, #23
 800294e:	18fb      	adds	r3, r7, r3
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2251      	movs	r2, #81	; 0x51
 8002958:	2101      	movs	r1, #1
 800295a:	5499      	strb	r1, [r3, r2]
    goto error;
 800295c:	e01e      	b.n	800299c <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2240      	movs	r2, #64	; 0x40
 8002966:	4013      	ands	r3, r2
 8002968:	2b40      	cmp	r3, #64	; 0x40
 800296a:	d007      	beq.n	800297c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2140      	movs	r1, #64	; 0x40
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2120      	movs	r1, #32
 8002988:	430a      	orrs	r2, r1
 800298a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2102      	movs	r1, #2
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2250      	movs	r2, #80	; 0x50
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029a4:	2317      	movs	r3, #23
 80029a6:	18fb      	adds	r3, r7, r3
 80029a8:	781b      	ldrb	r3, [r3, #0]
}
 80029aa:	0018      	movs	r0, r3
 80029ac:	46bd      	mov	sp, r7
 80029ae:	b006      	add	sp, #24
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			; (mov r8, r8)
 80029b4:	08002d37 	.word	0x08002d37
 80029b8:	08002bf5 	.word	0x08002bf5
 80029bc:	08002d55 	.word	0x08002d55
 80029c0:	08002ca3 	.word	0x08002ca3
 80029c4:	08002d73 	.word	0x08002d73

080029c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	099b      	lsrs	r3, r3, #6
 80029e4:	001a      	movs	r2, r3
 80029e6:	2301      	movs	r3, #1
 80029e8:	4013      	ands	r3, r2
 80029ea:	d10f      	bne.n	8002a0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	2201      	movs	r2, #1
 80029f0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80029f2:	d00b      	beq.n	8002a0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	099b      	lsrs	r3, r3, #6
 80029f8:	001a      	movs	r2, r3
 80029fa:	2301      	movs	r3, #1
 80029fc:	4013      	ands	r3, r2
 80029fe:	d005      	beq.n	8002a0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	0010      	movs	r0, r2
 8002a08:	4798      	blx	r3
    return;
 8002a0a:	e0d5      	b.n	8002bb8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	085b      	lsrs	r3, r3, #1
 8002a10:	001a      	movs	r2, r3
 8002a12:	2301      	movs	r3, #1
 8002a14:	4013      	ands	r3, r2
 8002a16:	d00b      	beq.n	8002a30 <HAL_SPI_IRQHandler+0x68>
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	09db      	lsrs	r3, r3, #7
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2301      	movs	r3, #1
 8002a20:	4013      	ands	r3, r2
 8002a22:	d005      	beq.n	8002a30 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	0010      	movs	r0, r2
 8002a2c:	4798      	blx	r3
    return;
 8002a2e:	e0c3      	b.n	8002bb8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	001a      	movs	r2, r3
 8002a36:	2301      	movs	r3, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d10c      	bne.n	8002a56 <HAL_SPI_IRQHandler+0x8e>
 8002a3c:	69bb      	ldr	r3, [r7, #24]
 8002a3e:	099b      	lsrs	r3, r3, #6
 8002a40:	001a      	movs	r2, r3
 8002a42:	2301      	movs	r3, #1
 8002a44:	4013      	ands	r3, r2
 8002a46:	d106      	bne.n	8002a56 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	0a1b      	lsrs	r3, r3, #8
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	2301      	movs	r3, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	d100      	bne.n	8002a56 <HAL_SPI_IRQHandler+0x8e>
 8002a54:	e0b0      	b.n	8002bb8 <HAL_SPI_IRQHandler+0x1f0>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	001a      	movs	r2, r3
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d100      	bne.n	8002a64 <HAL_SPI_IRQHandler+0x9c>
 8002a62:	e0a9      	b.n	8002bb8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	099b      	lsrs	r3, r3, #6
 8002a68:	001a      	movs	r2, r3
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	d023      	beq.n	8002ab8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2251      	movs	r2, #81	; 0x51
 8002a74:	5c9b      	ldrb	r3, [r3, r2]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d011      	beq.n	8002aa0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a80:	2204      	movs	r2, #4
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	e00b      	b.n	8002ab8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	613b      	str	r3, [r7, #16]
 8002ab4:	693b      	ldr	r3, [r7, #16]
        return;
 8002ab6:	e07f      	b.n	8002bb8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	001a      	movs	r2, r3
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d014      	beq.n	8002aee <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac8:	2201      	movs	r2, #1
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2140      	movs	r1, #64	; 0x40
 8002ae8:	438a      	bics	r2, r1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	001a      	movs	r2, r3
 8002af4:	2301      	movs	r3, #1
 8002af6:	4013      	ands	r3, r2
 8002af8:	d00c      	beq.n	8002b14 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	2208      	movs	r2, #8
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002b06:	2300      	movs	r3, #0
 8002b08:	60bb      	str	r3, [r7, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d04c      	beq.n	8002bb6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	21e0      	movs	r1, #224	; 0xe0
 8002b28:	438a      	bics	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2251      	movs	r2, #81	; 0x51
 8002b30:	2101      	movs	r1, #1
 8002b32:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2202      	movs	r2, #2
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d103      	bne.n	8002b44 <HAL_SPI_IRQHandler+0x17c>
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	4013      	ands	r3, r2
 8002b42:	d032      	beq.n	8002baa <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2103      	movs	r1, #3
 8002b50:	438a      	bics	r2, r1
 8002b52:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d010      	beq.n	8002b7e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <HAL_SPI_IRQHandler+0x1f8>)
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7fe fa5f 	bl	800102c <HAL_DMA_Abort_IT>
 8002b6e:	1e03      	subs	r3, r0, #0
 8002b70:	d005      	beq.n	8002b7e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_SPI_IRQHandler+0x1f8>)
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b92:	0018      	movs	r0, r3
 8002b94:	f7fe fa4a 	bl	800102c <HAL_DMA_Abort_IT>
 8002b98:	1e03      	subs	r3, r0, #0
 8002b9a:	d00b      	beq.n	8002bb4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	2240      	movs	r2, #64	; 0x40
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002ba8:	e004      	b.n	8002bb4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0018      	movs	r0, r3
 8002bae:	f7fd fe69 	bl	8000884 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002bb2:	e000      	b.n	8002bb6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002bb4:	46c0      	nop			; (mov r8, r8)
    return;
 8002bb6:	46c0      	nop			; (mov r8, r8)
  }
}
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b008      	add	sp, #32
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	08002db5 	.word	0x08002db5

08002bc4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b002      	add	sp, #8
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c02:	f7fe f829 	bl	8000c58 <HAL_GetTick>
 8002c06:	0003      	movs	r3, r0
 8002c08:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2220      	movs	r2, #32
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d03d      	beq.n	8002c94 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2120      	movs	r1, #32
 8002c24:	438a      	bics	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10e      	bne.n	8002c4e <SPI_DMAReceiveCplt+0x5a>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	2382      	movs	r3, #130	; 0x82
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d108      	bne.n	8002c4e <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2103      	movs	r1, #3
 8002c48:	438a      	bics	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	e007      	b.n	8002c5e <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685a      	ldr	r2, [r3, #4]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	438a      	bics	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002c5e:	68ba      	ldr	r2, [r7, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2164      	movs	r1, #100	; 0x64
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f949 	bl	8002efc <SPI_EndRxTransaction>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d002      	beq.n	8002c74 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2251      	movs	r2, #81	; 0x51
 8002c7e:	2101      	movs	r1, #1
 8002c80:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d004      	beq.n	8002c94 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fd fdf9 	bl	8000884 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002c92:	e003      	b.n	8002c9c <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7fd fde0 	bl	800085c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b004      	add	sp, #16
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b084      	sub	sp, #16
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb0:	f7fd ffd2 	bl	8000c58 <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d030      	beq.n	8002d28 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	438a      	bics	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2164      	movs	r1, #100	; 0x64
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f000 f977 	bl	8002fd0 <SPI_EndRxTxTransaction>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d005      	beq.n	8002cf2 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cea:	2220      	movs	r2, #32
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2103      	movs	r1, #3
 8002cfe:	438a      	bics	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2251      	movs	r2, #81	; 0x51
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7fd fdaf 	bl	8000884 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8002d26:	e003      	b.n	8002d30 <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7ff ff4a 	bl	8002bc4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b004      	add	sp, #16
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff ff44 	bl	8002bd4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b004      	add	sp, #16
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff ff3d 	bl	8002be4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d6a:	46c0      	nop			; (mov r8, r8)
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b004      	add	sp, #16
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b084      	sub	sp, #16
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2103      	movs	r1, #3
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	2210      	movs	r2, #16
 8002d96:	431a      	orrs	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2251      	movs	r2, #81	; 0x51
 8002da0:	2101      	movs	r1, #1
 8002da2:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	0018      	movs	r0, r3
 8002da8:	f7fd fd6c 	bl	8000884 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7fd fd57 	bl	8000884 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002dd6:	46c0      	nop			; (mov r8, r8)
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b004      	add	sp, #16
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	1dfb      	adds	r3, r7, #7
 8002dee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002df0:	f7fd ff32 	bl	8000c58 <HAL_GetTick>
 8002df4:	0002      	movs	r2, r0
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	18d3      	adds	r3, r2, r3
 8002dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e00:	f7fd ff2a 	bl	8000c58 <HAL_GetTick>
 8002e04:	0003      	movs	r3, r0
 8002e06:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	015b      	lsls	r3, r3, #5
 8002e0e:	0d1b      	lsrs	r3, r3, #20
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	4353      	muls	r3, r2
 8002e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e16:	e058      	b.n	8002eca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	d055      	beq.n	8002eca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e1e:	f7fd ff1b 	bl	8000c58 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d902      	bls.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d142      	bne.n	8002eba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	21e0      	movs	r1, #224	; 0xe0
 8002e40:	438a      	bics	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	2382      	movs	r3, #130	; 0x82
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d113      	bne.n	8002e78 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d005      	beq.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d107      	bne.n	8002e78 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2140      	movs	r1, #64	; 0x40
 8002e74:	438a      	bics	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e7c:	2380      	movs	r3, #128	; 0x80
 8002e7e:	019b      	lsls	r3, r3, #6
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d110      	bne.n	8002ea6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	491a      	ldr	r1, [pc, #104]	; (8002ef8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e90:	400a      	ands	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	0189      	lsls	r1, r1, #6
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2251      	movs	r2, #81	; 0x51
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2250      	movs	r2, #80	; 0x50
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e017      	b.n	8002eea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	425a      	negs	r2, r3
 8002eda:	4153      	adcs	r3, r2
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	001a      	movs	r2, r3
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d197      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	0018      	movs	r0, r3
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b008      	add	sp, #32
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	20000078 	.word	0x20000078
 8002ef8:	ffffdfff 	.word	0xffffdfff

08002efc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	2382      	movs	r3, #130	; 0x82
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d113      	bne.n	8002f3c <SPI_EndRxTransaction+0x40>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d005      	beq.n	8002f2c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d107      	bne.n	8002f3c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	438a      	bics	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	2382      	movs	r3, #130	; 0x82
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d12b      	bne.n	8002fa0 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d012      	beq.n	8002f7a <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	0013      	movs	r3, r2
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2180      	movs	r1, #128	; 0x80
 8002f62:	f7ff ff3d 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8002f66:	1e03      	subs	r3, r0, #0
 8002f68:	d02d      	beq.n	8002fc6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	2220      	movs	r2, #32
 8002f70:	431a      	orrs	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e026      	b.n	8002fc8 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	0013      	movs	r3, r2
 8002f84:	2200      	movs	r2, #0
 8002f86:	2101      	movs	r1, #1
 8002f88:	f7ff ff2a 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d01a      	beq.n	8002fc6 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	2220      	movs	r2, #32
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e013      	b.n	8002fc8 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	0013      	movs	r3, r2
 8002faa:	2200      	movs	r2, #0
 8002fac:	2101      	movs	r1, #1
 8002fae:	f7ff ff17 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d007      	beq.n	8002fc6 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fba:	2220      	movs	r2, #32
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e000      	b.n	8002fc8 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b004      	add	sp, #16
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	; (8003054 <SPI_EndRxTxTransaction+0x84>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	491d      	ldr	r1, [pc, #116]	; (8003058 <SPI_EndRxTxTransaction+0x88>)
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7fd f890 	bl	8000108 <__udivsi3>
 8002fe8:	0003      	movs	r3, r0
 8002fea:	001a      	movs	r2, r3
 8002fec:	0013      	movs	r3, r2
 8002fee:	015b      	lsls	r3, r3, #5
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	189b      	adds	r3, r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	2382      	movs	r3, #130	; 0x82
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	429a      	cmp	r2, r3
 8003004:	d112      	bne.n	800302c <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	0013      	movs	r3, r2
 8003010:	2200      	movs	r2, #0
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	f7ff fee4 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8003018:	1e03      	subs	r3, r0, #0
 800301a:	d016      	beq.n	800304a <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003020:	2220      	movs	r2, #32
 8003022:	431a      	orrs	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e00f      	b.n	800304c <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3b01      	subs	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2280      	movs	r2, #128	; 0x80
 8003040:	4013      	ands	r3, r2
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	d0f2      	beq.n	800302c <SPI_EndRxTxTransaction+0x5c>
 8003046:	e000      	b.n	800304a <SPI_EndRxTxTransaction+0x7a>
        break;
 8003048:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b006      	add	sp, #24
 8003052:	bd80      	pop	{r7, pc}
 8003054:	20000078 	.word	0x20000078
 8003058:	016e3600 	.word	0x016e3600

0800305c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e044      	b.n	80030f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003072:	2b00      	cmp	r3, #0
 8003074:	d107      	bne.n	8003086 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2274      	movs	r2, #116	; 0x74
 800307a:	2100      	movs	r1, #0
 800307c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	0018      	movs	r0, r3
 8003082:	f7fd fcd9 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2224      	movs	r2, #36	; 0x24
 800308a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2101      	movs	r1, #1
 8003098:	438a      	bics	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 f830 	bl	8003104 <UART_SetConfig>
 80030a4:	0003      	movs	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e024      	b.n	80030f8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 fae1 	bl	8003680 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	490d      	ldr	r1, [pc, #52]	; (8003100 <HAL_UART_Init+0xa4>)
 80030ca:	400a      	ands	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	212a      	movs	r1, #42	; 0x2a
 80030da:	438a      	bics	r2, r1
 80030dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2101      	movs	r1, #1
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 fb79 	bl	80037e8 <UART_CheckIdleState>
 80030f6:	0003      	movs	r3, r0
}
 80030f8:	0018      	movs	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b002      	add	sp, #8
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	ffffb7ff 	.word	0xffffb7ff

08003104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003104:	b5b0      	push	{r4, r5, r7, lr}
 8003106:	b08e      	sub	sp, #56	; 0x38
 8003108:	af00      	add	r7, sp, #0
 800310a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800310c:	231a      	movs	r3, #26
 800310e:	2218      	movs	r2, #24
 8003110:	4694      	mov	ip, r2
 8003112:	44bc      	add	ip, r7
 8003114:	4463      	add	r3, ip
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	431a      	orrs	r2, r3
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	431a      	orrs	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	4313      	orrs	r3, r2
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4ab0      	ldr	r2, [pc, #704]	; (80033fc <UART_SetConfig+0x2f8>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003144:	430a      	orrs	r2, r1
 8003146:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4aac      	ldr	r2, [pc, #688]	; (8003400 <UART_SetConfig+0x2fc>)
 8003150:	4013      	ands	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4aa6      	ldr	r2, [pc, #664]	; (8003404 <UART_SetConfig+0x300>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d004      	beq.n	800317a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003176:	4313      	orrs	r3, r2
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4aa1      	ldr	r2, [pc, #644]	; (8003408 <UART_SetConfig+0x304>)
 8003182:	4013      	ands	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a9d      	ldr	r2, [pc, #628]	; (800340c <UART_SetConfig+0x308>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d136      	bne.n	8003208 <UART_SetConfig+0x104>
 800319a:	4b9d      	ldr	r3, [pc, #628]	; (8003410 <UART_SetConfig+0x30c>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319e:	2203      	movs	r2, #3
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b03      	cmp	r3, #3
 80031a4:	d020      	beq.n	80031e8 <UART_SetConfig+0xe4>
 80031a6:	d827      	bhi.n	80031f8 <UART_SetConfig+0xf4>
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d00d      	beq.n	80031c8 <UART_SetConfig+0xc4>
 80031ac:	d824      	bhi.n	80031f8 <UART_SetConfig+0xf4>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <UART_SetConfig+0xb4>
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d010      	beq.n	80031d8 <UART_SetConfig+0xd4>
 80031b6:	e01f      	b.n	80031f8 <UART_SetConfig+0xf4>
 80031b8:	231b      	movs	r3, #27
 80031ba:	2218      	movs	r2, #24
 80031bc:	4694      	mov	ip, r2
 80031be:	44bc      	add	ip, r7
 80031c0:	4463      	add	r3, ip
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]
 80031c6:	e0c5      	b.n	8003354 <UART_SetConfig+0x250>
 80031c8:	231b      	movs	r3, #27
 80031ca:	2218      	movs	r2, #24
 80031cc:	4694      	mov	ip, r2
 80031ce:	44bc      	add	ip, r7
 80031d0:	4463      	add	r3, ip
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e0bd      	b.n	8003354 <UART_SetConfig+0x250>
 80031d8:	231b      	movs	r3, #27
 80031da:	2218      	movs	r2, #24
 80031dc:	4694      	mov	ip, r2
 80031de:	44bc      	add	ip, r7
 80031e0:	4463      	add	r3, ip
 80031e2:	2204      	movs	r2, #4
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e0b5      	b.n	8003354 <UART_SetConfig+0x250>
 80031e8:	231b      	movs	r3, #27
 80031ea:	2218      	movs	r2, #24
 80031ec:	4694      	mov	ip, r2
 80031ee:	44bc      	add	ip, r7
 80031f0:	4463      	add	r3, ip
 80031f2:	2208      	movs	r2, #8
 80031f4:	701a      	strb	r2, [r3, #0]
 80031f6:	e0ad      	b.n	8003354 <UART_SetConfig+0x250>
 80031f8:	231b      	movs	r3, #27
 80031fa:	2218      	movs	r2, #24
 80031fc:	4694      	mov	ip, r2
 80031fe:	44bc      	add	ip, r7
 8003200:	4463      	add	r3, ip
 8003202:	2210      	movs	r2, #16
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e0a5      	b.n	8003354 <UART_SetConfig+0x250>
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a81      	ldr	r2, [pc, #516]	; (8003414 <UART_SetConfig+0x310>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d136      	bne.n	8003280 <UART_SetConfig+0x17c>
 8003212:	4b7f      	ldr	r3, [pc, #508]	; (8003410 <UART_SetConfig+0x30c>)
 8003214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003216:	220c      	movs	r2, #12
 8003218:	4013      	ands	r3, r2
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d020      	beq.n	8003260 <UART_SetConfig+0x15c>
 800321e:	d827      	bhi.n	8003270 <UART_SetConfig+0x16c>
 8003220:	2b08      	cmp	r3, #8
 8003222:	d00d      	beq.n	8003240 <UART_SetConfig+0x13c>
 8003224:	d824      	bhi.n	8003270 <UART_SetConfig+0x16c>
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <UART_SetConfig+0x12c>
 800322a:	2b04      	cmp	r3, #4
 800322c:	d010      	beq.n	8003250 <UART_SetConfig+0x14c>
 800322e:	e01f      	b.n	8003270 <UART_SetConfig+0x16c>
 8003230:	231b      	movs	r3, #27
 8003232:	2218      	movs	r2, #24
 8003234:	4694      	mov	ip, r2
 8003236:	44bc      	add	ip, r7
 8003238:	4463      	add	r3, ip
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e089      	b.n	8003354 <UART_SetConfig+0x250>
 8003240:	231b      	movs	r3, #27
 8003242:	2218      	movs	r2, #24
 8003244:	4694      	mov	ip, r2
 8003246:	44bc      	add	ip, r7
 8003248:	4463      	add	r3, ip
 800324a:	2202      	movs	r2, #2
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	e081      	b.n	8003354 <UART_SetConfig+0x250>
 8003250:	231b      	movs	r3, #27
 8003252:	2218      	movs	r2, #24
 8003254:	4694      	mov	ip, r2
 8003256:	44bc      	add	ip, r7
 8003258:	4463      	add	r3, ip
 800325a:	2204      	movs	r2, #4
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	e079      	b.n	8003354 <UART_SetConfig+0x250>
 8003260:	231b      	movs	r3, #27
 8003262:	2218      	movs	r2, #24
 8003264:	4694      	mov	ip, r2
 8003266:	44bc      	add	ip, r7
 8003268:	4463      	add	r3, ip
 800326a:	2208      	movs	r2, #8
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e071      	b.n	8003354 <UART_SetConfig+0x250>
 8003270:	231b      	movs	r3, #27
 8003272:	2218      	movs	r2, #24
 8003274:	4694      	mov	ip, r2
 8003276:	44bc      	add	ip, r7
 8003278:	4463      	add	r3, ip
 800327a:	2210      	movs	r2, #16
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e069      	b.n	8003354 <UART_SetConfig+0x250>
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a64      	ldr	r2, [pc, #400]	; (8003418 <UART_SetConfig+0x314>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d107      	bne.n	800329a <UART_SetConfig+0x196>
 800328a:	231b      	movs	r3, #27
 800328c:	2218      	movs	r2, #24
 800328e:	4694      	mov	ip, r2
 8003290:	44bc      	add	ip, r7
 8003292:	4463      	add	r3, ip
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
 8003298:	e05c      	b.n	8003354 <UART_SetConfig+0x250>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a5f      	ldr	r2, [pc, #380]	; (800341c <UART_SetConfig+0x318>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d107      	bne.n	80032b4 <UART_SetConfig+0x1b0>
 80032a4:	231b      	movs	r3, #27
 80032a6:	2218      	movs	r2, #24
 80032a8:	4694      	mov	ip, r2
 80032aa:	44bc      	add	ip, r7
 80032ac:	4463      	add	r3, ip
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	e04f      	b.n	8003354 <UART_SetConfig+0x250>
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a52      	ldr	r2, [pc, #328]	; (8003404 <UART_SetConfig+0x300>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d143      	bne.n	8003346 <UART_SetConfig+0x242>
 80032be:	4b54      	ldr	r3, [pc, #336]	; (8003410 <UART_SetConfig+0x30c>)
 80032c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032c2:	23c0      	movs	r3, #192	; 0xc0
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4013      	ands	r3, r2
 80032c8:	22c0      	movs	r2, #192	; 0xc0
 80032ca:	0112      	lsls	r2, r2, #4
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d02a      	beq.n	8003326 <UART_SetConfig+0x222>
 80032d0:	22c0      	movs	r2, #192	; 0xc0
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d82e      	bhi.n	8003336 <UART_SetConfig+0x232>
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	0112      	lsls	r2, r2, #4
 80032dc:	4293      	cmp	r3, r2
 80032de:	d012      	beq.n	8003306 <UART_SetConfig+0x202>
 80032e0:	2280      	movs	r2, #128	; 0x80
 80032e2:	0112      	lsls	r2, r2, #4
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d826      	bhi.n	8003336 <UART_SetConfig+0x232>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d004      	beq.n	80032f6 <UART_SetConfig+0x1f2>
 80032ec:	2280      	movs	r2, #128	; 0x80
 80032ee:	00d2      	lsls	r2, r2, #3
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d010      	beq.n	8003316 <UART_SetConfig+0x212>
 80032f4:	e01f      	b.n	8003336 <UART_SetConfig+0x232>
 80032f6:	231b      	movs	r3, #27
 80032f8:	2218      	movs	r2, #24
 80032fa:	4694      	mov	ip, r2
 80032fc:	44bc      	add	ip, r7
 80032fe:	4463      	add	r3, ip
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e026      	b.n	8003354 <UART_SetConfig+0x250>
 8003306:	231b      	movs	r3, #27
 8003308:	2218      	movs	r2, #24
 800330a:	4694      	mov	ip, r2
 800330c:	44bc      	add	ip, r7
 800330e:	4463      	add	r3, ip
 8003310:	2202      	movs	r2, #2
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e01e      	b.n	8003354 <UART_SetConfig+0x250>
 8003316:	231b      	movs	r3, #27
 8003318:	2218      	movs	r2, #24
 800331a:	4694      	mov	ip, r2
 800331c:	44bc      	add	ip, r7
 800331e:	4463      	add	r3, ip
 8003320:	2204      	movs	r2, #4
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e016      	b.n	8003354 <UART_SetConfig+0x250>
 8003326:	231b      	movs	r3, #27
 8003328:	2218      	movs	r2, #24
 800332a:	4694      	mov	ip, r2
 800332c:	44bc      	add	ip, r7
 800332e:	4463      	add	r3, ip
 8003330:	2208      	movs	r2, #8
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	e00e      	b.n	8003354 <UART_SetConfig+0x250>
 8003336:	231b      	movs	r3, #27
 8003338:	2218      	movs	r2, #24
 800333a:	4694      	mov	ip, r2
 800333c:	44bc      	add	ip, r7
 800333e:	4463      	add	r3, ip
 8003340:	2210      	movs	r2, #16
 8003342:	701a      	strb	r2, [r3, #0]
 8003344:	e006      	b.n	8003354 <UART_SetConfig+0x250>
 8003346:	231b      	movs	r3, #27
 8003348:	2218      	movs	r2, #24
 800334a:	4694      	mov	ip, r2
 800334c:	44bc      	add	ip, r7
 800334e:	4463      	add	r3, ip
 8003350:	2210      	movs	r2, #16
 8003352:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a2a      	ldr	r2, [pc, #168]	; (8003404 <UART_SetConfig+0x300>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d000      	beq.n	8003360 <UART_SetConfig+0x25c>
 800335e:	e09e      	b.n	800349e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003360:	231b      	movs	r3, #27
 8003362:	2218      	movs	r2, #24
 8003364:	4694      	mov	ip, r2
 8003366:	44bc      	add	ip, r7
 8003368:	4463      	add	r3, ip
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d01d      	beq.n	80033ac <UART_SetConfig+0x2a8>
 8003370:	dc20      	bgt.n	80033b4 <UART_SetConfig+0x2b0>
 8003372:	2b04      	cmp	r3, #4
 8003374:	d015      	beq.n	80033a2 <UART_SetConfig+0x29e>
 8003376:	dc1d      	bgt.n	80033b4 <UART_SetConfig+0x2b0>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <UART_SetConfig+0x27e>
 800337c:	2b02      	cmp	r3, #2
 800337e:	d005      	beq.n	800338c <UART_SetConfig+0x288>
 8003380:	e018      	b.n	80033b4 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003382:	f7fe fef9 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8003386:	0003      	movs	r3, r0
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800338a:	e01d      	b.n	80033c8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <UART_SetConfig+0x30c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2210      	movs	r2, #16
 8003392:	4013      	ands	r3, r2
 8003394:	d002      	beq.n	800339c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003396:	4b22      	ldr	r3, [pc, #136]	; (8003420 <UART_SetConfig+0x31c>)
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800339a:	e015      	b.n	80033c8 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800339c:	4b21      	ldr	r3, [pc, #132]	; (8003424 <UART_SetConfig+0x320>)
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033a0:	e012      	b.n	80033c8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a2:	f7fe fe39 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80033a6:	0003      	movs	r3, r0
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033aa:	e00d      	b.n	80033c8 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033b2:	e009      	b.n	80033c8 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80033b8:	231a      	movs	r3, #26
 80033ba:	2218      	movs	r2, #24
 80033bc:	4694      	mov	ip, r2
 80033be:	44bc      	add	ip, r7
 80033c0:	4463      	add	r3, ip
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
        break;
 80033c6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d100      	bne.n	80033d0 <UART_SetConfig+0x2cc>
 80033ce:	e13c      	b.n	800364a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	0013      	movs	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	189b      	adds	r3, r3, r2
 80033da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033dc:	429a      	cmp	r2, r3
 80033de:	d305      	bcc.n	80033ec <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d91d      	bls.n	8003428 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80033ec:	231a      	movs	r3, #26
 80033ee:	2218      	movs	r2, #24
 80033f0:	4694      	mov	ip, r2
 80033f2:	44bc      	add	ip, r7
 80033f4:	4463      	add	r3, ip
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
 80033fa:	e126      	b.n	800364a <UART_SetConfig+0x546>
 80033fc:	efff69f3 	.word	0xefff69f3
 8003400:	ffffcfff 	.word	0xffffcfff
 8003404:	40004800 	.word	0x40004800
 8003408:	fffff4ff 	.word	0xfffff4ff
 800340c:	40013800 	.word	0x40013800
 8003410:	40021000 	.word	0x40021000
 8003414:	40004400 	.word	0x40004400
 8003418:	40004c00 	.word	0x40004c00
 800341c:	40005000 	.word	0x40005000
 8003420:	003d0900 	.word	0x003d0900
 8003424:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	2300      	movs	r3, #0
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	6939      	ldr	r1, [r7, #16]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	000b      	movs	r3, r1
 8003436:	0e1b      	lsrs	r3, r3, #24
 8003438:	0010      	movs	r0, r2
 800343a:	0205      	lsls	r5, r0, #8
 800343c:	431d      	orrs	r5, r3
 800343e:	000b      	movs	r3, r1
 8003440:	021c      	lsls	r4, r3, #8
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	60bb      	str	r3, [r7, #8]
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	68b8      	ldr	r0, [r7, #8]
 8003450:	68f9      	ldr	r1, [r7, #12]
 8003452:	1900      	adds	r0, r0, r4
 8003454:	4169      	adcs	r1, r5
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	603b      	str	r3, [r7, #0]
 800345c:	2300      	movs	r3, #0
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f7fc fedc 	bl	8000220 <__aeabi_uldivmod>
 8003468:	0002      	movs	r2, r0
 800346a:	000b      	movs	r3, r1
 800346c:	0013      	movs	r3, r2
 800346e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003472:	23c0      	movs	r3, #192	; 0xc0
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	429a      	cmp	r2, r3
 8003478:	d309      	bcc.n	800348e <UART_SetConfig+0x38a>
 800347a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	035b      	lsls	r3, r3, #13
 8003480:	429a      	cmp	r2, r3
 8003482:	d204      	bcs.n	800348e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800348a:	60da      	str	r2, [r3, #12]
 800348c:	e0dd      	b.n	800364a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800348e:	231a      	movs	r3, #26
 8003490:	2218      	movs	r2, #24
 8003492:	4694      	mov	ip, r2
 8003494:	44bc      	add	ip, r7
 8003496:	4463      	add	r3, ip
 8003498:	2201      	movs	r2, #1
 800349a:	701a      	strb	r2, [r3, #0]
 800349c:	e0d5      	b.n	800364a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	021b      	lsls	r3, r3, #8
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d000      	beq.n	80034ac <UART_SetConfig+0x3a8>
 80034aa:	e074      	b.n	8003596 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 80034ac:	231b      	movs	r3, #27
 80034ae:	2218      	movs	r2, #24
 80034b0:	4694      	mov	ip, r2
 80034b2:	44bc      	add	ip, r7
 80034b4:	4463      	add	r3, ip
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d822      	bhi.n	8003502 <UART_SetConfig+0x3fe>
 80034bc:	009a      	lsls	r2, r3, #2
 80034be:	4b6b      	ldr	r3, [pc, #428]	; (800366c <UART_SetConfig+0x568>)
 80034c0:	18d3      	adds	r3, r2, r3
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c6:	f7fe fe57 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 80034ca:	0003      	movs	r3, r0
 80034cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034ce:	e022      	b.n	8003516 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d0:	f7fe fe68 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80034d4:	0003      	movs	r3, r0
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034d8:	e01d      	b.n	8003516 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <UART_SetConfig+0x56c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2210      	movs	r2, #16
 80034e0:	4013      	ands	r3, r2
 80034e2:	d002      	beq.n	80034ea <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80034e4:	4b63      	ldr	r3, [pc, #396]	; (8003674 <UART_SetConfig+0x570>)
 80034e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034e8:	e015      	b.n	8003516 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80034ea:	4b63      	ldr	r3, [pc, #396]	; (8003678 <UART_SetConfig+0x574>)
 80034ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034ee:	e012      	b.n	8003516 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f0:	f7fe fd92 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80034f4:	0003      	movs	r3, r0
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80034f8:	e00d      	b.n	8003516 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	021b      	lsls	r3, r3, #8
 80034fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003500:	e009      	b.n	8003516 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003506:	231a      	movs	r3, #26
 8003508:	2218      	movs	r2, #24
 800350a:	4694      	mov	ip, r2
 800350c:	44bc      	add	ip, r7
 800350e:	4463      	add	r3, ip
 8003510:	2201      	movs	r2, #1
 8003512:	701a      	strb	r2, [r3, #0]
        break;
 8003514:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d100      	bne.n	800351e <UART_SetConfig+0x41a>
 800351c:	e095      	b.n	800364a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	005a      	lsls	r2, r3, #1
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	18d2      	adds	r2, r2, r3
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	0019      	movs	r1, r3
 8003530:	0010      	movs	r0, r2
 8003532:	f7fc fde9 	bl	8000108 <__udivsi3>
 8003536:	0003      	movs	r3, r0
 8003538:	b29b      	uxth	r3, r3
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	2b0f      	cmp	r3, #15
 8003540:	d921      	bls.n	8003586 <UART_SetConfig+0x482>
 8003542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	025b      	lsls	r3, r3, #9
 8003548:	429a      	cmp	r2, r3
 800354a:	d21c      	bcs.n	8003586 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	b29a      	uxth	r2, r3
 8003550:	200e      	movs	r0, #14
 8003552:	2418      	movs	r4, #24
 8003554:	193b      	adds	r3, r7, r4
 8003556:	181b      	adds	r3, r3, r0
 8003558:	210f      	movs	r1, #15
 800355a:	438a      	bics	r2, r1
 800355c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	085b      	lsrs	r3, r3, #1
 8003562:	b29b      	uxth	r3, r3
 8003564:	2207      	movs	r2, #7
 8003566:	4013      	ands	r3, r2
 8003568:	b299      	uxth	r1, r3
 800356a:	193b      	adds	r3, r7, r4
 800356c:	181b      	adds	r3, r3, r0
 800356e:	193a      	adds	r2, r7, r4
 8003570:	1812      	adds	r2, r2, r0
 8003572:	8812      	ldrh	r2, [r2, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	193a      	adds	r2, r7, r4
 800357e:	1812      	adds	r2, r2, r0
 8003580:	8812      	ldrh	r2, [r2, #0]
 8003582:	60da      	str	r2, [r3, #12]
 8003584:	e061      	b.n	800364a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003586:	231a      	movs	r3, #26
 8003588:	2218      	movs	r2, #24
 800358a:	4694      	mov	ip, r2
 800358c:	44bc      	add	ip, r7
 800358e:	4463      	add	r3, ip
 8003590:	2201      	movs	r2, #1
 8003592:	701a      	strb	r2, [r3, #0]
 8003594:	e059      	b.n	800364a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003596:	231b      	movs	r3, #27
 8003598:	2218      	movs	r2, #24
 800359a:	4694      	mov	ip, r2
 800359c:	44bc      	add	ip, r7
 800359e:	4463      	add	r3, ip
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d822      	bhi.n	80035ec <UART_SetConfig+0x4e8>
 80035a6:	009a      	lsls	r2, r3, #2
 80035a8:	4b34      	ldr	r3, [pc, #208]	; (800367c <UART_SetConfig+0x578>)
 80035aa:	18d3      	adds	r3, r2, r3
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fde2 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 80035b4:	0003      	movs	r3, r0
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035b8:	e022      	b.n	8003600 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ba:	f7fe fdf3 	bl	80021a4 <HAL_RCC_GetPCLK2Freq>
 80035be:	0003      	movs	r3, r0
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035c2:	e01d      	b.n	8003600 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035c4:	4b2a      	ldr	r3, [pc, #168]	; (8003670 <UART_SetConfig+0x56c>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2210      	movs	r2, #16
 80035ca:	4013      	ands	r3, r2
 80035cc:	d002      	beq.n	80035d4 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80035ce:	4b29      	ldr	r3, [pc, #164]	; (8003674 <UART_SetConfig+0x570>)
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80035d2:	e015      	b.n	8003600 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80035d4:	4b28      	ldr	r3, [pc, #160]	; (8003678 <UART_SetConfig+0x574>)
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035d8:	e012      	b.n	8003600 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035da:	f7fe fd1d 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 80035de:	0003      	movs	r3, r0
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035e2:	e00d      	b.n	8003600 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80035ea:	e009      	b.n	8003600 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80035f0:	231a      	movs	r3, #26
 80035f2:	2218      	movs	r2, #24
 80035f4:	4694      	mov	ip, r2
 80035f6:	44bc      	add	ip, r7
 80035f8:	4463      	add	r3, ip
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
        break;
 80035fe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	2b00      	cmp	r3, #0
 8003604:	d021      	beq.n	800364a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	085a      	lsrs	r2, r3, #1
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	18d2      	adds	r2, r2, r3
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	0019      	movs	r1, r3
 8003616:	0010      	movs	r0, r2
 8003618:	f7fc fd76 	bl	8000108 <__udivsi3>
 800361c:	0003      	movs	r3, r0
 800361e:	b29b      	uxth	r3, r3
 8003620:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003624:	2b0f      	cmp	r3, #15
 8003626:	d909      	bls.n	800363c <UART_SetConfig+0x538>
 8003628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	025b      	lsls	r3, r3, #9
 800362e:	429a      	cmp	r2, r3
 8003630:	d204      	bcs.n	800363c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003638:	60da      	str	r2, [r3, #12]
 800363a:	e006      	b.n	800364a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800363c:	231a      	movs	r3, #26
 800363e:	2218      	movs	r2, #24
 8003640:	4694      	mov	ip, r2
 8003642:	44bc      	add	ip, r7
 8003644:	4463      	add	r3, ip
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	2200      	movs	r2, #0
 800364e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	2200      	movs	r2, #0
 8003654:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003656:	231a      	movs	r3, #26
 8003658:	2218      	movs	r2, #24
 800365a:	4694      	mov	ip, r2
 800365c:	44bc      	add	ip, r7
 800365e:	4463      	add	r3, ip
 8003660:	781b      	ldrb	r3, [r3, #0]
}
 8003662:	0018      	movs	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	b00e      	add	sp, #56	; 0x38
 8003668:	bdb0      	pop	{r4, r5, r7, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	08003a94 	.word	0x08003a94
 8003670:	40021000 	.word	0x40021000
 8003674:	003d0900 	.word	0x003d0900
 8003678:	00f42400 	.word	0x00f42400
 800367c:	08003ab8 	.word	0x08003ab8

08003680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	2201      	movs	r2, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d00b      	beq.n	80036aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4a4a      	ldr	r2, [pc, #296]	; (80037c4 <UART_AdvFeatureConfig+0x144>)
 800369a:	4013      	ands	r3, r2
 800369c:	0019      	movs	r1, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	2202      	movs	r2, #2
 80036b0:	4013      	ands	r3, r2
 80036b2:	d00b      	beq.n	80036cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4a43      	ldr	r2, [pc, #268]	; (80037c8 <UART_AdvFeatureConfig+0x148>)
 80036bc:	4013      	ands	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d0:	2204      	movs	r2, #4
 80036d2:	4013      	ands	r3, r2
 80036d4:	d00b      	beq.n	80036ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a3b      	ldr	r2, [pc, #236]	; (80037cc <UART_AdvFeatureConfig+0x14c>)
 80036de:	4013      	ands	r3, r2
 80036e0:	0019      	movs	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f2:	2208      	movs	r2, #8
 80036f4:	4013      	ands	r3, r2
 80036f6:	d00b      	beq.n	8003710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a34      	ldr	r2, [pc, #208]	; (80037d0 <UART_AdvFeatureConfig+0x150>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	2210      	movs	r2, #16
 8003716:	4013      	ands	r3, r2
 8003718:	d00b      	beq.n	8003732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	4a2c      	ldr	r2, [pc, #176]	; (80037d4 <UART_AdvFeatureConfig+0x154>)
 8003722:	4013      	ands	r3, r2
 8003724:	0019      	movs	r1, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	2220      	movs	r2, #32
 8003738:	4013      	ands	r3, r2
 800373a:	d00b      	beq.n	8003754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4a25      	ldr	r2, [pc, #148]	; (80037d8 <UART_AdvFeatureConfig+0x158>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	2240      	movs	r2, #64	; 0x40
 800375a:	4013      	ands	r3, r2
 800375c:	d01d      	beq.n	800379a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4a1d      	ldr	r2, [pc, #116]	; (80037dc <UART_AdvFeatureConfig+0x15c>)
 8003766:	4013      	ands	r3, r2
 8003768:	0019      	movs	r1, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	035b      	lsls	r3, r3, #13
 800377e:	429a      	cmp	r2, r3
 8003780:	d10b      	bne.n	800379a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <UART_AdvFeatureConfig+0x160>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	2280      	movs	r2, #128	; 0x80
 80037a0:	4013      	ands	r3, r2
 80037a2:	d00b      	beq.n	80037bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4a0e      	ldr	r2, [pc, #56]	; (80037e4 <UART_AdvFeatureConfig+0x164>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	605a      	str	r2, [r3, #4]
  }
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b002      	add	sp, #8
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	fffdffff 	.word	0xfffdffff
 80037c8:	fffeffff 	.word	0xfffeffff
 80037cc:	fffbffff 	.word	0xfffbffff
 80037d0:	ffff7fff 	.word	0xffff7fff
 80037d4:	ffffefff 	.word	0xffffefff
 80037d8:	ffffdfff 	.word	0xffffdfff
 80037dc:	ffefffff 	.word	0xffefffff
 80037e0:	ff9fffff 	.word	0xff9fffff
 80037e4:	fff7ffff 	.word	0xfff7ffff

080037e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af02      	add	r7, sp, #8
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2280      	movs	r2, #128	; 0x80
 80037f4:	2100      	movs	r1, #0
 80037f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037f8:	f7fd fa2e 	bl	8000c58 <HAL_GetTick>
 80037fc:	0003      	movs	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2208      	movs	r2, #8
 8003808:	4013      	ands	r3, r2
 800380a:	2b08      	cmp	r3, #8
 800380c:	d10c      	bne.n	8003828 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2280      	movs	r2, #128	; 0x80
 8003812:	0391      	lsls	r1, r2, #14
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	4a17      	ldr	r2, [pc, #92]	; (8003874 <UART_CheckIdleState+0x8c>)
 8003818:	9200      	str	r2, [sp, #0]
 800381a:	2200      	movs	r2, #0
 800381c:	f000 f82c 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 8003820:	1e03      	subs	r3, r0, #0
 8003822:	d001      	beq.n	8003828 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e021      	b.n	800386c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2204      	movs	r2, #4
 8003830:	4013      	ands	r3, r2
 8003832:	2b04      	cmp	r3, #4
 8003834:	d10c      	bne.n	8003850 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	03d1      	lsls	r1, r2, #15
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	4a0d      	ldr	r2, [pc, #52]	; (8003874 <UART_CheckIdleState+0x8c>)
 8003840:	9200      	str	r2, [sp, #0]
 8003842:	2200      	movs	r2, #0
 8003844:	f000 f818 	bl	8003878 <UART_WaitOnFlagUntilTimeout>
 8003848:	1e03      	subs	r3, r0, #0
 800384a:	d001      	beq.n	8003850 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e00d      	b.n	800386c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2274      	movs	r2, #116	; 0x74
 8003866:	2100      	movs	r1, #0
 8003868:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	0018      	movs	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	b004      	add	sp, #16
 8003872:	bd80      	pop	{r7, pc}
 8003874:	01ffffff 	.word	0x01ffffff

08003878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b094      	sub	sp, #80	; 0x50
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	603b      	str	r3, [r7, #0]
 8003884:	1dfb      	adds	r3, r7, #7
 8003886:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003888:	e0a3      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800388a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800388c:	3301      	adds	r3, #1
 800388e:	d100      	bne.n	8003892 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003890:	e09f      	b.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003892:	f7fd f9e1 	bl	8000c58 <HAL_GetTick>
 8003896:	0002      	movs	r2, r0
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800389e:	429a      	cmp	r2, r3
 80038a0:	d302      	bcc.n	80038a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80038a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d13d      	bne.n	8003924 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038a8:	f3ef 8310 	mrs	r3, PRIMASK
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038b0:	647b      	str	r3, [r7, #68]	; 0x44
 80038b2:	2301      	movs	r3, #1
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	f383 8810 	msr	PRIMASK, r3
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	494c      	ldr	r1, [pc, #304]	; (80039fc <UART_WaitOnFlagUntilTimeout+0x184>)
 80038ca:	400a      	ands	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	f383 8810 	msr	PRIMASK, r3
}
 80038d8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038da:	f3ef 8310 	mrs	r3, PRIMASK
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	643b      	str	r3, [r7, #64]	; 0x40
 80038e4:	2301      	movs	r3, #1
 80038e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2101      	movs	r1, #1
 80038fc:	438a      	bics	r2, r1
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003902:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003906:	f383 8810 	msr	PRIMASK, r3
}
 800390a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2220      	movs	r2, #32
 8003916:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2274      	movs	r2, #116	; 0x74
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e067      	b.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2204      	movs	r2, #4
 800392c:	4013      	ands	r3, r2
 800392e:	d050      	beq.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69da      	ldr	r2, [r3, #28]
 8003936:	2380      	movs	r3, #128	; 0x80
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	401a      	ands	r2, r3
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	429a      	cmp	r2, r3
 8003942:	d146      	bne.n	80039d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	0112      	lsls	r2, r2, #4
 800394c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800394e:	f3ef 8310 	mrs	r3, PRIMASK
 8003952:	613b      	str	r3, [r7, #16]
  return(result);
 8003954:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003958:	2301      	movs	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	f383 8810 	msr	PRIMASK, r3
}
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4923      	ldr	r1, [pc, #140]	; (80039fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8003970:	400a      	ands	r2, r1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003976:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	f383 8810 	msr	PRIMASK, r3
}
 800397e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003980:	f3ef 8310 	mrs	r3, PRIMASK
 8003984:	61fb      	str	r3, [r7, #28]
  return(result);
 8003986:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003988:	64bb      	str	r3, [r7, #72]	; 0x48
 800398a:	2301      	movs	r3, #1
 800398c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2101      	movs	r1, #1
 80039a2:	438a      	bics	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	f383 8810 	msr	PRIMASK, r3
}
 80039b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2220      	movs	r2, #32
 80039b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	2120      	movs	r1, #32
 80039c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2274      	movs	r2, #116	; 0x74
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e010      	b.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	4013      	ands	r3, r2
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	425a      	negs	r2, r3
 80039e2:	4153      	adcs	r3, r2
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	001a      	movs	r2, r3
 80039e8:	1dfb      	adds	r3, r7, #7
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d100      	bne.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80039f0:	e74b      	b.n	800388a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	0018      	movs	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b014      	add	sp, #80	; 0x50
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	fffffe5f 	.word	0xfffffe5f

08003a00 <__libc_init_array>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	2600      	movs	r6, #0
 8003a04:	4d0c      	ldr	r5, [pc, #48]	; (8003a38 <__libc_init_array+0x38>)
 8003a06:	4c0d      	ldr	r4, [pc, #52]	; (8003a3c <__libc_init_array+0x3c>)
 8003a08:	1b64      	subs	r4, r4, r5
 8003a0a:	10a4      	asrs	r4, r4, #2
 8003a0c:	42a6      	cmp	r6, r4
 8003a0e:	d109      	bne.n	8003a24 <__libc_init_array+0x24>
 8003a10:	2600      	movs	r6, #0
 8003a12:	f000 f821 	bl	8003a58 <_init>
 8003a16:	4d0a      	ldr	r5, [pc, #40]	; (8003a40 <__libc_init_array+0x40>)
 8003a18:	4c0a      	ldr	r4, [pc, #40]	; (8003a44 <__libc_init_array+0x44>)
 8003a1a:	1b64      	subs	r4, r4, r5
 8003a1c:	10a4      	asrs	r4, r4, #2
 8003a1e:	42a6      	cmp	r6, r4
 8003a20:	d105      	bne.n	8003a2e <__libc_init_array+0x2e>
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	00b3      	lsls	r3, r6, #2
 8003a26:	58eb      	ldr	r3, [r5, r3]
 8003a28:	4798      	blx	r3
 8003a2a:	3601      	adds	r6, #1
 8003a2c:	e7ee      	b.n	8003a0c <__libc_init_array+0xc>
 8003a2e:	00b3      	lsls	r3, r6, #2
 8003a30:	58eb      	ldr	r3, [r5, r3]
 8003a32:	4798      	blx	r3
 8003a34:	3601      	adds	r6, #1
 8003a36:	e7f2      	b.n	8003a1e <__libc_init_array+0x1e>
 8003a38:	08003ae4 	.word	0x08003ae4
 8003a3c:	08003ae4 	.word	0x08003ae4
 8003a40:	08003ae4 	.word	0x08003ae4
 8003a44:	08003ae8 	.word	0x08003ae8

08003a48 <memset>:
 8003a48:	0003      	movs	r3, r0
 8003a4a:	1882      	adds	r2, r0, r2
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d100      	bne.n	8003a52 <memset+0xa>
 8003a50:	4770      	bx	lr
 8003a52:	7019      	strb	r1, [r3, #0]
 8003a54:	3301      	adds	r3, #1
 8003a56:	e7f9      	b.n	8003a4c <memset+0x4>

08003a58 <_init>:
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	46c0      	nop			; (mov r8, r8)
 8003a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a5e:	bc08      	pop	{r3}
 8003a60:	469e      	mov	lr, r3
 8003a62:	4770      	bx	lr

08003a64 <_fini>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6a:	bc08      	pop	{r3}
 8003a6c:	469e      	mov	lr, r3
 8003a6e:	4770      	bx	lr
