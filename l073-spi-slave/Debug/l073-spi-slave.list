
l073-spi-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000345c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003588  08003588  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003590  08003590  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08003598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000084  0800361c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  0800361c  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d4  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001974  00000000  00000000  0002b380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000920  00000000  00000000  0002ccf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002d618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c36  00000000  00000000  0002dea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1ef  00000000  00000000  00041ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b28e  00000000  00000000  0004ccc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c7f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000202c  00000000  00000000  000c7fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000084 	.word	0x20000084
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003504 	.word	0x08003504

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000088 	.word	0x20000088
 8000104:	08003504 	.word	0x08003504

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <Buffercmp>:
 * @param  BufferLength: buffer's length
 * @retval 0  : pBuffer1 identical to pBuffer2
 *         >0 : pBuffer1 differs from pBuffer2
 */
static uint16_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint16_t BufferLength)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	1dbb      	adds	r3, r7, #6
 80004a8:	801a      	strh	r2, [r3, #0]
	while (BufferLength--)
 80004aa:	e00e      	b.n	80004ca <Buffercmp+0x2e>
	{
		if((*pBuffer1) != *pBuffer2)
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	781a      	ldrb	r2, [r3, #0]
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d002      	beq.n	80004be <Buffercmp+0x22>
		{
			return BufferLength;
 80004b8:	1dbb      	adds	r3, r7, #6
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	e00d      	b.n	80004da <Buffercmp+0x3e>
		}
		pBuffer1++;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	3301      	adds	r3, #1
 80004c2:	60fb      	str	r3, [r7, #12]
		pBuffer2++;
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	3301      	adds	r3, #1
 80004c8:	60bb      	str	r3, [r7, #8]
	while (BufferLength--)
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	881b      	ldrh	r3, [r3, #0]
 80004ce:	1dba      	adds	r2, r7, #6
 80004d0:	1e59      	subs	r1, r3, #1
 80004d2:	8011      	strh	r1, [r2, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d1e9      	bne.n	80004ac <Buffercmp+0x10>
	}

	return 0;
 80004d8:	2300      	movs	r3, #0
}
 80004da:	0018      	movs	r0, r3
 80004dc:	46bd      	mov	sp, r7
 80004de:	b004      	add	sp, #16
 80004e0:	bd80      	pop	{r7, pc}
	...

080004e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004e8:	f000 faa6 	bl	8000a38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004ec:	f000 f832 	bl	8000554 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004f0:	f000 f906 	bl	8000700 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80004f4:	f000 f8d4 	bl	80006a0 <MX_USART2_UART_Init>
	MX_SPI2_Init();
 80004f8:	f000 f89e 	bl	8000638 <MX_SPI2_Init>
#endif /* MASTER_BOARD */

	/*##-2- Start the Full Duplex Communication process ########################*/
	/* While the SPI in TransmitReceive process, user can transmit data through
     "aTxBuffer" buffer & receive data through "aRxBuffer" */
	if(HAL_SPI_TransmitReceive_DMA(&hspi2, (uint8_t*)aTxBuffer, (uint8_t *)aRxBuffer, BUFFERSIZE) != HAL_OK)
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <main+0x60>)
 80004fe:	4912      	ldr	r1, [pc, #72]	; (8000548 <main+0x64>)
 8000500:	4812      	ldr	r0, [pc, #72]	; (800054c <main+0x68>)
 8000502:	2375      	movs	r3, #117	; 0x75
 8000504:	f001 fe9c 	bl	8002240 <HAL_SPI_TransmitReceive_DMA>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <main+0x2c>
	{
		/* Transfer error in transmission process */
		Error_Handler();
 800050c:	f000 f98a 	bl	8000824 <Error_Handler>
	/*  Before starting a new communication transfer, you must wait the callback call
      to get the transfer complete confirmation or an error detection.
      For simplicity reasons, this example is just waiting till the end of the
      transfer, but application may perform other tasks while transfer operation
      is ongoing. */
	while (wTransferState == TRANSFER_WAIT)
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <main+0x6c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0fb      	beq.n	8000512 <main+0x2e>
	{
	}

	switch(wTransferState)
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <main+0x6c>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d10a      	bne.n	8000538 <main+0x54>
	{
	case TRANSFER_COMPLETE :
		/*##-4- Compare the sent and received buffers ##############################*/
		if(Buffercmp((uint8_t*)aTxBuffer, (uint8_t*)aRxBuffer, BUFFERSIZE))
 8000522:	4908      	ldr	r1, [pc, #32]	; (8000544 <main+0x60>)
 8000524:	4b08      	ldr	r3, [pc, #32]	; (8000548 <main+0x64>)
 8000526:	2275      	movs	r2, #117	; 0x75
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff ffb7 	bl	800049c <Buffercmp>
 800052e:	1e03      	subs	r3, r0, #0
 8000530:	d005      	beq.n	800053e <main+0x5a>
		{
			/* Processing Error */
			Error_Handler();
 8000532:	f000 f977 	bl	8000824 <Error_Handler>
		}
		break;
 8000536:	e002      	b.n	800053e <main+0x5a>
	default :
		Error_Handler();
 8000538:	f000 f974 	bl	8000824 <Error_Handler>
		break;
 800053c:	e000      	b.n	8000540 <main+0x5c>
		break;
 800053e:	46c0      	nop			; (mov r8, r8)

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x5c>
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	200000fc 	.word	0x200000fc
 8000548:	20000000 	.word	0x20000000
 800054c:	200000a4 	.word	0x200000a4
 8000550:	200000a0 	.word	0x200000a0

08000554 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b09f      	sub	sp, #124	; 0x7c
 8000558:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	2440      	movs	r4, #64	; 0x40
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2338      	movs	r3, #56	; 0x38
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f002 ffc5 	bl	80034f4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056a:	232c      	movs	r3, #44	; 0x2c
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	0018      	movs	r0, r3
 8000570:	2314      	movs	r3, #20
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f002 ffbd 	bl	80034f4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	2328      	movs	r3, #40	; 0x28
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f002 ffb6 	bl	80034f4 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	4b29      	ldr	r3, [pc, #164]	; (8000630 <SystemClock_Config+0xdc>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a29      	ldr	r2, [pc, #164]	; (8000634 <SystemClock_Config+0xe0>)
 800058e:	401a      	ands	r2, r3
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <SystemClock_Config+0xdc>)
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	0109      	lsls	r1, r1, #4
 8000596:	430a      	orrs	r2, r1
 8000598:	601a      	str	r2, [r3, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059a:	0021      	movs	r1, r4
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2202      	movs	r2, #2
 80005a0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2210      	movs	r2, #16
 80005ac:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2202      	movs	r2, #2
 80005b2:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	02d2      	lsls	r2, r2, #11
 80005c0:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2280      	movs	r2, #128	; 0x80
 80005c6:	03d2      	lsls	r2, r2, #15
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	187b      	adds	r3, r7, r1
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fe37 	bl	8001240 <HAL_RCC_OscConfig>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0x86>
	{
		Error_Handler();
 80005d6:	f000 f925 	bl	8000824 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005da:	212c      	movs	r1, #44	; 0x2c
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	220f      	movs	r2, #15
 80005e0:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2203      	movs	r2, #3
 80005e6:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2101      	movs	r1, #1
 80005fe:	0018      	movs	r0, r3
 8000600:	f001 f9f2 	bl	80019e8 <HAL_RCC_ClockConfig>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xb8>
	{
		Error_Handler();
 8000608:	f000 f90c 	bl	8000824 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2202      	movs	r2, #2
 8000610:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	0018      	movs	r0, r3
 800061c:	f001 fc08 	bl	8001e30 <HAL_RCCEx_PeriphCLKConfig>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8000624:	f000 f8fe 	bl	8000824 <Error_Handler>
	}
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	b01f      	add	sp, #124	; 0x7c
 800062e:	bd90      	pop	{r4, r7, pc}
 8000630:	40007000 	.word	0x40007000
 8000634:	ffffe7ff 	.word	0xffffe7ff

08000638 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800063c:	4b16      	ldr	r3, [pc, #88]	; (8000698 <MX_SPI2_Init+0x60>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_SPI2_Init+0x64>)
 8000640:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000642:	4b15      	ldr	r3, [pc, #84]	; (8000698 <MX_SPI2_Init+0x60>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000648:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_SPI2_Init+0x60>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800064e:	4b12      	ldr	r3, [pc, #72]	; (8000698 <MX_SPI2_Init+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000654:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_SPI2_Init+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_SPI2_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_SPI2_Init+0x60>)
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_SPI2_Init+0x60>)
 800066a:	2200      	movs	r2, #0
 800066c:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_SPI2_Init+0x60>)
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_SPI2_Init+0x60>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_SPI2_Init+0x60>)
 800067c:	2207      	movs	r2, #7
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <MX_SPI2_Init+0x60>)
 8000682:	0018      	movs	r0, r3
 8000684:	f001 fd48 	bl	8002118 <HAL_SPI_Init>
 8000688:	1e03      	subs	r3, r0, #0
 800068a:	d001      	beq.n	8000690 <MX_SPI2_Init+0x58>
	{
		Error_Handler();
 800068c:	f000 f8ca 	bl	8000824 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	200000a4 	.word	0x200000a4
 800069c:	40003800 	.word	0x40003800

080006a0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART2_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ac:	22e1      	movs	r2, #225	; 0xe1
 80006ae:	0252      	lsls	r2, r2, #9
 80006b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <MX_USART2_UART_Init+0x58>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f002 fa0f 	bl	8002b08 <HAL_UART_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80006ee:	f000 f899 	bl	8000824 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000174 	.word	0x20000174
 80006fc:	40004400 	.word	0x40004400

08000700 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b08b      	sub	sp, #44	; 0x2c
 8000704:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	2414      	movs	r4, #20
 8000708:	193b      	adds	r3, r7, r4
 800070a:	0018      	movs	r0, r3
 800070c:	2314      	movs	r3, #20
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f002 feef 	bl	80034f4 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800071a:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <MX_GPIO_Init+0xd8>)
 800071c:	2104      	movs	r1, #4
 800071e:	430a      	orrs	r2, r1
 8000720:	62da      	str	r2, [r3, #44]	; 0x2c
 8000722:	4b2d      	ldr	r3, [pc, #180]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	2204      	movs	r2, #4
 8000728:	4013      	ands	r3, r2
 800072a:	613b      	str	r3, [r7, #16]
 800072c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800072e:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000732:	4b29      	ldr	r3, [pc, #164]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	430a      	orrs	r2, r1
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
 800073a:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <MX_GPIO_Init+0xd8>)
 800073c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	4013      	ands	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b24      	ldr	r3, [pc, #144]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800074a:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <MX_GPIO_Init+0xd8>)
 800074c:	2101      	movs	r1, #1
 800074e:	430a      	orrs	r2, r1
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	2201      	movs	r2, #1
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
 800075c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_GPIO_Init+0xd8>)
 8000764:	2102      	movs	r1, #2
 8000766:	430a      	orrs	r2, r1
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_GPIO_Init+0xd8>)
 800076c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800076e:	2202      	movs	r2, #2
 8000770:	4013      	ands	r3, r2
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000776:	23a0      	movs	r3, #160	; 0xa0
 8000778:	05db      	lsls	r3, r3, #23
 800077a:	2200      	movs	r2, #0
 800077c:	2120      	movs	r1, #32
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fd26 	bl	80011d0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	0192      	lsls	r2, r2, #6
 800078a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2284      	movs	r2, #132	; 0x84
 8000790:	0392      	lsls	r2, r2, #14
 8000792:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	193b      	adds	r3, r7, r4
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	193b      	adds	r3, r7, r4
 800079c:	4a0f      	ldr	r2, [pc, #60]	; (80007dc <MX_GPIO_Init+0xdc>)
 800079e:	0019      	movs	r1, r3
 80007a0:	0010      	movs	r0, r2
 80007a2:	f000 fb97 	bl	8000ed4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007a6:	0021      	movs	r1, r4
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2220      	movs	r2, #32
 80007ac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2201      	movs	r2, #1
 80007b2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	187a      	adds	r2, r7, r1
 80007c2:	23a0      	movs	r3, #160	; 0xa0
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	0011      	movs	r1, r2
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fb83 	bl	8000ed4 <HAL_GPIO_Init>

}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b00b      	add	sp, #44	; 0x2c
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000
 80007dc:	50000800 	.word	0x50000800

080007e0 <HAL_SPI_TxRxCpltCallback>:
 * @note   This example shows a simple way to report end of Interrupt TxRx transfer, and
 *         you can add your own implementation.
 * @retval None
 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	/* Turn LED on: Transfer in transmission/reception process is correct */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007e8:	23a0      	movs	r3, #160	; 0xa0
 80007ea:	05db      	lsls	r3, r3, #23
 80007ec:	2201      	movs	r2, #1
 80007ee:	2120      	movs	r1, #32
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fced 	bl	80011d0 <HAL_GPIO_WritePin>
	wTransferState = TRANSFER_COMPLETE;
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <HAL_SPI_TxRxCpltCallback+0x24>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	b002      	add	sp, #8
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200000a0 	.word	0x200000a0

08000808 <HAL_SPI_ErrorCallback>:
 * @note   This example shows a simple way to report transfer error, and you can
 *         add your own implementation.
 * @retval None
 */
void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	wTransferState = TRANSFER_ERROR;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_SPI_ErrorCallback+0x18>)
 8000812:	2202      	movs	r2, #2
 8000814:	601a      	str	r2, [r3, #0]
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	200000a0 	.word	0x200000a0

08000824 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	46c0      	nop			; (mov r8, r8)
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while(1)
	{
		/* Toggle LED2 */
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	05db      	lsls	r3, r3, #23
 8000830:	2120      	movs	r1, #32
 8000832:	0018      	movs	r0, r3
 8000834:	f000 fce9 	bl	800120a <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000838:	23fa      	movs	r3, #250	; 0xfa
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	0018      	movs	r0, r3
 800083e:	f000 f96b 	bl	8000b18 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000842:	e7f3      	b.n	800082c <Error_Handler+0x8>

08000844 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_MspInit+0x24>)
 800084a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <HAL_MspInit+0x24>)
 800084e:	2101      	movs	r1, #1
 8000850:	430a      	orrs	r2, r1
 8000852:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	4b04      	ldr	r3, [pc, #16]	; (8000868 <HAL_MspInit+0x24>)
 8000856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000858:	4b03      	ldr	r3, [pc, #12]	; (8000868 <HAL_MspInit+0x24>)
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	0549      	lsls	r1, r1, #21
 800085e:	430a      	orrs	r2, r1
 8000860:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000

0800086c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b089      	sub	sp, #36	; 0x24
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	240c      	movs	r4, #12
 8000876:	193b      	adds	r3, r7, r4
 8000878:	0018      	movs	r0, r3
 800087a:	2314      	movs	r3, #20
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f002 fe38 	bl	80034f4 <memset>
  if(hspi->Instance==SPI2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a1c      	ldr	r2, [pc, #112]	; (80008fc <HAL_SPI_MspInit+0x90>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d131      	bne.n	80008f2 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <HAL_SPI_MspInit+0x94>)
 8000890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000892:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <HAL_SPI_MspInit+0x94>)
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	01c9      	lsls	r1, r1, #7
 8000898:	430a      	orrs	r2, r1
 800089a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089c:	4b18      	ldr	r3, [pc, #96]	; (8000900 <HAL_SPI_MspInit+0x94>)
 800089e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <HAL_SPI_MspInit+0x94>)
 80008a2:	2102      	movs	r1, #2
 80008a4:	430a      	orrs	r2, r1
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <HAL_SPI_MspInit+0x94>)
 80008aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ac:	2202      	movs	r2, #2
 80008ae:	4013      	ands	r3, r2
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	22e0      	movs	r2, #224	; 0xe0
 80008b8:	0212      	lsls	r2, r2, #8
 80008ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	0021      	movs	r1, r4
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2202      	movs	r2, #2
 80008c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2203      	movs	r2, #3
 80008ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_SPI_MspInit+0x98>)
 80008da:	0019      	movs	r1, r3
 80008dc:	0010      	movs	r0, r2
 80008de:	f000 faf9 	bl	8000ed4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	201a      	movs	r0, #26
 80008e8:	f000 f9e6 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80008ec:	201a      	movs	r0, #26
 80008ee:	f000 f9f8 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	46bd      	mov	sp, r7
 80008f6:	b009      	add	sp, #36	; 0x24
 80008f8:	bd90      	pop	{r4, r7, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40003800 	.word	0x40003800
 8000900:	40021000 	.word	0x40021000
 8000904:	50000400 	.word	0x50000400

08000908 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b089      	sub	sp, #36	; 0x24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	240c      	movs	r4, #12
 8000912:	193b      	adds	r3, r7, r4
 8000914:	0018      	movs	r0, r3
 8000916:	2314      	movs	r3, #20
 8000918:	001a      	movs	r2, r3
 800091a:	2100      	movs	r1, #0
 800091c:	f002 fdea 	bl	80034f4 <memset>
  if(huart->Instance==USART2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a18      	ldr	r2, [pc, #96]	; (8000988 <HAL_UART_MspInit+0x80>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d129      	bne.n	800097e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_UART_MspInit+0x84>)
 800092c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_UART_MspInit+0x84>)
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	0289      	lsls	r1, r1, #10
 8000934:	430a      	orrs	r2, r1
 8000936:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_UART_MspInit+0x84>)
 800093a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_UART_MspInit+0x84>)
 800093e:	2101      	movs	r1, #1
 8000940:	430a      	orrs	r2, r1
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <HAL_UART_MspInit+0x84>)
 8000946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000948:	2201      	movs	r2, #1
 800094a:	4013      	ands	r3, r2
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000950:	0021      	movs	r1, r4
 8000952:	187b      	adds	r3, r7, r1
 8000954:	220c      	movs	r2, #12
 8000956:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	2202      	movs	r2, #2
 800095c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	187b      	adds	r3, r7, r1
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2203      	movs	r2, #3
 8000968:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2204      	movs	r2, #4
 800096e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	187a      	adds	r2, r7, r1
 8000972:	23a0      	movs	r3, #160	; 0xa0
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f000 faab 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b009      	add	sp, #36	; 0x24
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	40004400 	.word	0x40004400
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f894 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <SPI2_IRQHandler+0x14>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fd54 	bl	8002474 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	200000a4 	.word	0x200000a4

080009d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	46c0      	nop			; (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <Reset_Handler>:
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <LoopForever+0x2>)
 80009e6:	4685      	mov	sp, r0
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopForever+0x6>)
 80009ea:	490e      	ldr	r1, [pc, #56]	; (8000a24 <LoopForever+0xa>)
 80009ec:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <LoopForever+0xe>)
 80009ee:	2300      	movs	r3, #0
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:
 80009f2:	58d4      	ldr	r4, [r2, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:
 80009f8:	18c4      	adds	r4, r0, r3
 80009fa:	428c      	cmp	r4, r1
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LoopForever+0x12>)
 8000a00:	4c0b      	ldr	r4, [pc, #44]	; (8000a30 <LoopForever+0x16>)
 8000a02:	2300      	movs	r3, #0
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:
 8000a0a:	42a2      	cmp	r2, r4
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>
 8000a0e:	f7ff ffe3 	bl	80009d8 <SystemInit>
 8000a12:	f002 fd4b 	bl	80034ac <__libc_init_array>
 8000a16:	f7ff fd65 	bl	80004e4 <main>

08000a1a <LoopForever>:
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
 8000a1c:	20005000 	.word	0x20005000
 8000a20:	20000000 	.word	0x20000000
 8000a24:	20000084 	.word	0x20000084
 8000a28:	08003598 	.word	0x08003598
 8000a2c:	20000084 	.word	0x20000084
 8000a30:	200001fc 	.word	0x200001fc

08000a34 <ADC1_COMP_IRQHandler>:
 8000a34:	e7fe      	b.n	8000a34 <ADC1_COMP_IRQHandler>
	...

08000a38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_Init+0x3c>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Init+0x3c>)
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a50:	2000      	movs	r0, #0
 8000a52:	f000 f811 	bl	8000a78 <HAL_InitTick>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e001      	b.n	8000a66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a62:	f7ff feef 	bl	8000844 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x5c>)
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x60>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	23fa      	movs	r3, #250	; 0xfa
 8000a8c:	0098      	lsls	r0, r3, #2
 8000a8e:	f7ff fb3b 	bl	8000108 <__udivsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	0019      	movs	r1, r3
 8000a96:	0020      	movs	r0, r4
 8000a98:	f7ff fb36 	bl	8000108 <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f92f 	bl	8000d02 <HAL_SYSTICK_Config>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e00f      	b.n	8000acc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d80b      	bhi.n	8000aca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f8fc 	bl	8000cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_InitTick+0x64>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000078 	.word	0x20000078
 8000ad8:	20000080 	.word	0x20000080
 8000adc:	2000007c 	.word	0x2000007c

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000080 	.word	0x20000080
 8000b00:	200001f8 	.word	0x200001f8

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	200001f8 	.word	0x200001f8

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	0003      	movs	r3, r0
 8000b26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001a      	movs	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	0002      	movs	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b004      	add	sp, #16
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000080 	.word	0x20000080

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b7f      	cmp	r3, #127	; 0x7f
 8000b72:	d809      	bhi.n	8000b88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	231f      	movs	r3, #31
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	4b04      	ldr	r3, [pc, #16]	; (8000b90 <__NVIC_EnableIRQ+0x30>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	4091      	lsls	r1, r2
 8000b84:	000a      	movs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
  }
}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba8:	d828      	bhi.n	8000bfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000baa:	4a2f      	ldr	r2, [pc, #188]	; (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	33c0      	adds	r3, #192	; 0xc0
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	589b      	ldr	r3, [r3, r2]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	; 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	; 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	481f      	ldr	r0, [pc, #124]	; (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	33c0      	adds	r3, #192	; 0xc0
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bfa:	e031      	b.n	8000c60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	; (8000c6c <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0019      	movs	r1, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	400b      	ands	r3, r1
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3306      	adds	r3, #6
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	18d3      	adds	r3, r2, r3
 8000c12:	3304      	adds	r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	400a      	ands	r2, r1
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	21ff      	movs	r1, #255	; 0xff
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	22ff      	movs	r2, #255	; 0xff
 8000c34:	401a      	ands	r2, r3
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	4003      	ands	r3, r0
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <__NVIC_SetPriority+0xd8>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	001c      	movs	r4, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4023      	ands	r3, r4
 8000c50:	3b08      	subs	r3, #8
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	430a      	orrs	r2, r1
 8000c56:	3306      	adds	r3, #6
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	18c3      	adds	r3, r0, r3
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b003      	add	sp, #12
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	045b      	lsls	r3, r3, #17
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d301      	bcc.n	8000c88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c84:	2301      	movs	r3, #1
 8000c86:	e010      	b.n	8000caa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <SysTick_Config+0x44>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2103      	movs	r1, #3
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff ff7c 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <SysTick_Config+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SysTick_Config+0x44>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	1c02      	adds	r2, r0, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	0002      	movs	r2, r0
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff33 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ffaf 	bl	8000c70 <SysTick_Config>
 8000d12:	0003      	movs	r3, r0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
 8000d28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2a:	2317      	movs	r3, #23
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	2224      	movs	r2, #36	; 0x24
 8000d36:	5c9b      	ldrb	r3, [r3, r2]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d101      	bne.n	8000d40 <HAL_DMA_Start_IT+0x24>
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	e04f      	b.n	8000de0 <HAL_DMA_Start_IT+0xc4>
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2224      	movs	r2, #36	; 0x24
 8000d44:	2101      	movs	r1, #1
 8000d46:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2225      	movs	r2, #37	; 0x25
 8000d4c:	5c9b      	ldrb	r3, [r3, r2]
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d13a      	bne.n	8000dca <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2225      	movs	r2, #37	; 0x25
 8000d58:	2102      	movs	r1, #2
 8000d5a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	438a      	bics	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	68b9      	ldr	r1, [r7, #8]
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 f87c 	bl	8000e76 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d008      	beq.n	8000d98 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	210e      	movs	r1, #14
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e00f      	b.n	8000db8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2104      	movs	r1, #4
 8000da4:	438a      	bics	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	210a      	movs	r1, #10
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e007      	b.n	8000dda <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	2224      	movs	r2, #36	; 0x24
 8000dce:	2100      	movs	r1, #0
 8000dd0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000dd2:	2317      	movs	r3, #23
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8000dda:	2317      	movs	r3, #23
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	781b      	ldrb	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b006      	add	sp, #24
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df0:	210f      	movs	r1, #15
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2225      	movs	r2, #37	; 0x25
 8000dfc:	5c9b      	ldrb	r3, [r3, r2]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d006      	beq.n	8000e12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2204      	movs	r2, #4
 8000e08:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e02a      	b.n	8000e68 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	210e      	movs	r1, #14
 8000e1e:	438a      	bics	r2, r1
 8000e20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	438a      	bics	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	221c      	movs	r2, #28
 8000e38:	401a      	ands	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4091      	lsls	r1, r2
 8000e42:	000a      	movs	r2, r1
 8000e44:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2225      	movs	r2, #37	; 0x25
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2224      	movs	r2, #36	; 0x24
 8000e52:	2100      	movs	r1, #0
 8000e54:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	0010      	movs	r0, r2
 8000e66:	4798      	blx	r3
    }
  }
  return status;
 8000e68:	230f      	movs	r3, #15
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	781b      	ldrb	r3, [r3, #0]
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b004      	add	sp, #16
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b084      	sub	sp, #16
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e88:	221c      	movs	r2, #28
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	2101      	movs	r1, #1
 8000e92:	4091      	lsls	r1, r2
 8000e94:	000a      	movs	r2, r1
 8000e96:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	683a      	ldr	r2, [r7, #0]
 8000e9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	2b10      	cmp	r3, #16
 8000ea6:	d108      	bne.n	8000eba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000eb8:	e007      	b.n	8000eca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	60da      	str	r2, [r3, #12]
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eea:	e155      	b.n	8001198 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	4091      	lsls	r1, r2
 8000ef6:	000a      	movs	r2, r1
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d100      	bne.n	8000f04 <HAL_GPIO_Init+0x30>
 8000f02:	e146      	b.n	8001192 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2203      	movs	r2, #3
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	409a      	lsls	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	2201      	movs	r2, #1
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2203      	movs	r2, #3
 8000f84:	4013      	ands	r3, r2
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d017      	beq.n	8000fba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	409a      	lsls	r2, r3
 8000fac:	0013      	movs	r3, r2
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2203      	movs	r2, #3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	58d3      	ldr	r3, [r2, r3]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	4013      	ands	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2107      	movs	r1, #7
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	409a      	lsls	r2, r3
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	0092      	lsls	r2, r2, #2
 800100a:	6939      	ldr	r1, [r7, #16]
 800100c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2203      	movs	r2, #3
 800102c:	401a      	ands	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	409a      	lsls	r2, r3
 8001034:	0013      	movs	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	23c0      	movs	r3, #192	; 0xc0
 8001048:	029b      	lsls	r3, r3, #10
 800104a:	4013      	ands	r3, r2
 800104c:	d100      	bne.n	8001050 <HAL_GPIO_Init+0x17c>
 800104e:	e0a0      	b.n	8001192 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b57      	ldr	r3, [pc, #348]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 8001052:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001054:	4b56      	ldr	r3, [pc, #344]	; (80011b0 <HAL_GPIO_Init+0x2dc>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800105c:	4a55      	ldr	r2, [pc, #340]	; (80011b4 <HAL_GPIO_Init+0x2e0>)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	589b      	ldr	r3, [r3, r2]
 8001068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	2203      	movs	r2, #3
 800106e:	4013      	ands	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	409a      	lsls	r2, r3
 8001076:	0013      	movs	r3, r2
 8001078:	43da      	mvns	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	23a0      	movs	r3, #160	; 0xa0
 8001084:	05db      	lsls	r3, r3, #23
 8001086:	429a      	cmp	r2, r3
 8001088:	d01f      	beq.n	80010ca <HAL_GPIO_Init+0x1f6>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a4a      	ldr	r2, [pc, #296]	; (80011b8 <HAL_GPIO_Init+0x2e4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d019      	beq.n	80010c6 <HAL_GPIO_Init+0x1f2>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a49      	ldr	r2, [pc, #292]	; (80011bc <HAL_GPIO_Init+0x2e8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d013      	beq.n	80010c2 <HAL_GPIO_Init+0x1ee>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2ec>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d00d      	beq.n	80010be <HAL_GPIO_Init+0x1ea>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a47      	ldr	r2, [pc, #284]	; (80011c4 <HAL_GPIO_Init+0x2f0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d007      	beq.n	80010ba <HAL_GPIO_Init+0x1e6>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a46      	ldr	r2, [pc, #280]	; (80011c8 <HAL_GPIO_Init+0x2f4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_GPIO_Init+0x1e2>
 80010b2:	2305      	movs	r3, #5
 80010b4:	e00a      	b.n	80010cc <HAL_GPIO_Init+0x1f8>
 80010b6:	2306      	movs	r3, #6
 80010b8:	e008      	b.n	80010cc <HAL_GPIO_Init+0x1f8>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x1f8>
 80010be:	2303      	movs	r3, #3
 80010c0:	e004      	b.n	80010cc <HAL_GPIO_Init+0x1f8>
 80010c2:	2302      	movs	r3, #2
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_Init+0x1f8>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <HAL_GPIO_Init+0x1f8>
 80010ca:	2300      	movs	r3, #0
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	2103      	movs	r1, #3
 80010d0:	400a      	ands	r2, r1
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4093      	lsls	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010dc:	4935      	ldr	r1, [pc, #212]	; (80011b4 <HAL_GPIO_Init+0x2e0>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3302      	adds	r3, #2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43da      	mvns	r2, r3
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	025b      	lsls	r3, r3, #9
 8001102:	4013      	ands	r3, r2
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685a      	ldr	r2, [r3, #4]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	035b      	lsls	r3, r3, #13
 8001156:	4013      	ands	r3, r2
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4313      	orrs	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43da      	mvns	r2, r3
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	2380      	movs	r3, #128	; 0x80
 800117e:	039b      	lsls	r3, r3, #14
 8001180:	4013      	ands	r3, r2
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <HAL_GPIO_Init+0x2f8>)
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	3301      	adds	r3, #1
 8001196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	40da      	lsrs	r2, r3
 80011a0:	1e13      	subs	r3, r2, #0
 80011a2:	d000      	beq.n	80011a6 <HAL_GPIO_Init+0x2d2>
 80011a4:	e6a2      	b.n	8000eec <HAL_GPIO_Init+0x18>
  }
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b006      	add	sp, #24
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010000 	.word	0x40010000
 80011b8:	50000400 	.word	0x50000400
 80011bc:	50000800 	.word	0x50000800
 80011c0:	50000c00 	.word	0x50000c00
 80011c4:	50001000 	.word	0x50001000
 80011c8:	50001c00 	.word	0x50001c00
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	0008      	movs	r0, r1
 80011da:	0011      	movs	r1, r2
 80011dc:	1cbb      	adds	r3, r7, #2
 80011de:	1c02      	adds	r2, r0, #0
 80011e0:	801a      	strh	r2, [r3, #0]
 80011e2:	1c7b      	adds	r3, r7, #1
 80011e4:	1c0a      	adds	r2, r1, #0
 80011e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e8:	1c7b      	adds	r3, r7, #1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011f0:	1cbb      	adds	r3, r7, #2
 80011f2:	881a      	ldrh	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011f8:	e003      	b.n	8001202 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011fa:	1cbb      	adds	r3, r7, #2
 80011fc:	881a      	ldrh	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	000a      	movs	r2, r1
 8001214:	1cbb      	adds	r3, r7, #2
 8001216:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121e:	1cbb      	adds	r3, r7, #2
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4013      	ands	r3, r2
 8001226:	041a      	lsls	r2, r3, #16
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	1cb9      	adds	r1, r7, #2
 800122e:	8809      	ldrh	r1, [r1, #0]
 8001230:	400b      	ands	r3, r1
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	619a      	str	r2, [r3, #24]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b004      	add	sp, #16
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d102      	bne.n	8001254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	f000 fbbf 	bl	80019d2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001254:	4bc9      	ldr	r3, [pc, #804]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	220c      	movs	r2, #12
 800125a:	4013      	ands	r3, r2
 800125c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800125e:	4bc7      	ldr	r3, [pc, #796]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	025b      	lsls	r3, r3, #9
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2201      	movs	r2, #1
 8001270:	4013      	ands	r3, r2
 8001272:	d100      	bne.n	8001276 <HAL_RCC_OscConfig+0x36>
 8001274:	e07e      	b.n	8001374 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	2b08      	cmp	r3, #8
 800127a:	d007      	beq.n	800128c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	2b0c      	cmp	r3, #12
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x68>
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	025b      	lsls	r3, r3, #9
 8001288:	429a      	cmp	r2, r3
 800128a:	d10d      	bne.n	80012a8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800128c:	4bbb      	ldr	r3, [pc, #748]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2380      	movs	r3, #128	; 0x80
 8001292:	029b      	lsls	r3, r3, #10
 8001294:	4013      	ands	r3, r2
 8001296:	d100      	bne.n	800129a <HAL_RCC_OscConfig+0x5a>
 8001298:	e06b      	b.n	8001372 <HAL_RCC_OscConfig+0x132>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d167      	bne.n	8001372 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f000 fb95 	bl	80019d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	025b      	lsls	r3, r3, #9
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d107      	bne.n	80012c4 <HAL_RCC_OscConfig+0x84>
 80012b4:	4bb1      	ldr	r3, [pc, #708]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4bb0      	ldr	r3, [pc, #704]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	0249      	lsls	r1, r1, #9
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e027      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685a      	ldr	r2, [r3, #4]
 80012c8:	23a0      	movs	r3, #160	; 0xa0
 80012ca:	02db      	lsls	r3, r3, #11
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d10e      	bne.n	80012ee <HAL_RCC_OscConfig+0xae>
 80012d0:	4baa      	ldr	r3, [pc, #680]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4ba9      	ldr	r3, [pc, #676]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	02c9      	lsls	r1, r1, #11
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	4ba7      	ldr	r3, [pc, #668]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4ba6      	ldr	r3, [pc, #664]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0249      	lsls	r1, r1, #9
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e012      	b.n	8001314 <HAL_RCC_OscConfig+0xd4>
 80012ee:	4ba3      	ldr	r3, [pc, #652]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4ba2      	ldr	r3, [pc, #648]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012f4:	49a2      	ldr	r1, [pc, #648]	; (8001580 <HAL_RCC_OscConfig+0x340>)
 80012f6:	400a      	ands	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	4ba0      	ldr	r3, [pc, #640]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	025b      	lsls	r3, r3, #9
 8001302:	4013      	ands	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4b9c      	ldr	r3, [pc, #624]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b9b      	ldr	r3, [pc, #620]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 800130e:	499d      	ldr	r1, [pc, #628]	; (8001584 <HAL_RCC_OscConfig+0x344>)
 8001310:	400a      	ands	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d015      	beq.n	8001348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fbf2 	bl	8000b04 <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001324:	e009      	b.n	800133a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001326:	f7ff fbed 	bl	8000b04 <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d902      	bls.n	800133a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	f000 fb4c 	bl	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800133a:	4b90      	ldr	r3, [pc, #576]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	029b      	lsls	r3, r3, #10
 8001342:	4013      	ands	r3, r2
 8001344:	d0ef      	beq.n	8001326 <HAL_RCC_OscConfig+0xe6>
 8001346:	e015      	b.n	8001374 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fbdc 	bl	8000b04 <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001352:	f7ff fbd7 	bl	8000b04 <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b64      	cmp	r3, #100	; 0x64
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e336      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001364:	4b85      	ldr	r3, [pc, #532]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	029b      	lsls	r3, r3, #10
 800136c:	4013      	ands	r3, r2
 800136e:	d1f0      	bne.n	8001352 <HAL_RCC_OscConfig+0x112>
 8001370:	e000      	b.n	8001374 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001372:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2202      	movs	r2, #2
 800137a:	4013      	ands	r3, r2
 800137c:	d100      	bne.n	8001380 <HAL_RCC_OscConfig+0x140>
 800137e:	e099      	b.n	80014b4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	2220      	movs	r2, #32
 800138a:	4013      	ands	r3, r2
 800138c:	d009      	beq.n	80013a2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800138e:	4b7b      	ldr	r3, [pc, #492]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4b7a      	ldr	r3, [pc, #488]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001394:	2120      	movs	r1, #32
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	2220      	movs	r2, #32
 800139e:	4393      	bics	r3, r2
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d005      	beq.n	80013b4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0c      	cmp	r3, #12
 80013ac:	d13e      	bne.n	800142c <HAL_RCC_OscConfig+0x1ec>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d13b      	bne.n	800142c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013b4:	4b71      	ldr	r3, [pc, #452]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2204      	movs	r2, #4
 80013ba:	4013      	ands	r3, r2
 80013bc:	d004      	beq.n	80013c8 <HAL_RCC_OscConfig+0x188>
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e304      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b6c      	ldr	r3, [pc, #432]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a6e      	ldr	r2, [pc, #440]	; (8001588 <HAL_RCC_OscConfig+0x348>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	0019      	movs	r1, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	021a      	lsls	r2, r3, #8
 80013d8:	4b68      	ldr	r3, [pc, #416]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80013da:	430a      	orrs	r2, r1
 80013dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013de:	4b67      	ldr	r3, [pc, #412]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2209      	movs	r2, #9
 80013e4:	4393      	bics	r3, r2
 80013e6:	0019      	movs	r1, r3
 80013e8:	4b64      	ldr	r3, [pc, #400]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80013ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ec:	430a      	orrs	r2, r1
 80013ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013f0:	f000 fc42 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 80013f4:	0001      	movs	r1, r0
 80013f6:	4b61      	ldr	r3, [pc, #388]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	220f      	movs	r2, #15
 80013fe:	4013      	ands	r3, r2
 8001400:	4a62      	ldr	r2, [pc, #392]	; (800158c <HAL_RCC_OscConfig+0x34c>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	000a      	movs	r2, r1
 8001406:	40da      	lsrs	r2, r3
 8001408:	4b61      	ldr	r3, [pc, #388]	; (8001590 <HAL_RCC_OscConfig+0x350>)
 800140a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800140c:	4b61      	ldr	r3, [pc, #388]	; (8001594 <HAL_RCC_OscConfig+0x354>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2513      	movs	r5, #19
 8001412:	197c      	adds	r4, r7, r5
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fb2f 	bl	8000a78 <HAL_InitTick>
 800141a:	0003      	movs	r3, r0
 800141c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800141e:	197b      	adds	r3, r7, r5
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d046      	beq.n	80014b4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001426:	197b      	adds	r3, r7, r5
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	e2d2      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	2b00      	cmp	r3, #0
 8001430:	d027      	beq.n	8001482 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2209      	movs	r2, #9
 8001438:	4393      	bics	r3, r2
 800143a:	0019      	movs	r1, r3
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 800143e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001440:	430a      	orrs	r2, r1
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fb5e 	bl	8000b04 <HAL_GetTick>
 8001448:	0003      	movs	r3, r0
 800144a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144e:	f7ff fb59 	bl	8000b04 <HAL_GetTick>
 8001452:	0002      	movs	r2, r0
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e2b8      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001460:	4b46      	ldr	r3, [pc, #280]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2204      	movs	r2, #4
 8001466:	4013      	ands	r3, r2
 8001468:	d0f1      	beq.n	800144e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b44      	ldr	r3, [pc, #272]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4a46      	ldr	r2, [pc, #280]	; (8001588 <HAL_RCC_OscConfig+0x348>)
 8001470:	4013      	ands	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	021a      	lsls	r2, r3, #8
 800147a:	4b40      	ldr	r3, [pc, #256]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	e018      	b.n	80014b4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001482:	4b3e      	ldr	r3, [pc, #248]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b3d      	ldr	r3, [pc, #244]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001488:	2101      	movs	r1, #1
 800148a:	438a      	bics	r2, r1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fb39 	bl	8000b04 <HAL_GetTick>
 8001492:	0003      	movs	r3, r0
 8001494:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001498:	f7ff fb34 	bl	8000b04 <HAL_GetTick>
 800149c:	0002      	movs	r2, r0
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e293      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014aa:	4b34      	ldr	r3, [pc, #208]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2204      	movs	r2, #4
 80014b0:	4013      	ands	r3, r2
 80014b2:	d1f1      	bne.n	8001498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2210      	movs	r2, #16
 80014ba:	4013      	ands	r3, r2
 80014bc:	d100      	bne.n	80014c0 <HAL_RCC_OscConfig+0x280>
 80014be:	e0a2      	b.n	8001606 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d140      	bne.n	8001548 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4013      	ands	r3, r2
 80014d0:	d005      	beq.n	80014de <HAL_RCC_OscConfig+0x29e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e279      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	4a2d      	ldr	r2, [pc, #180]	; (8001598 <HAL_RCC_OscConfig+0x358>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	0019      	movs	r1, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	0a19      	lsrs	r1, r3, #8
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	061a      	lsls	r2, r3, #24
 8001500:	4b1e      	ldr	r3, [pc, #120]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001502:	430a      	orrs	r2, r1
 8001504:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	0b5b      	lsrs	r3, r3, #13
 800150c:	3301      	adds	r3, #1
 800150e:	2280      	movs	r2, #128	; 0x80
 8001510:	0212      	lsls	r2, r2, #8
 8001512:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	091b      	lsrs	r3, r3, #4
 800151a:	210f      	movs	r1, #15
 800151c:	400b      	ands	r3, r1
 800151e:	491b      	ldr	r1, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x34c>)
 8001520:	5ccb      	ldrb	r3, [r1, r3]
 8001522:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001524:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_RCC_OscConfig+0x350>)
 8001526:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_RCC_OscConfig+0x354>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2513      	movs	r5, #19
 800152e:	197c      	adds	r4, r7, r5
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff faa1 	bl	8000a78 <HAL_InitTick>
 8001536:	0003      	movs	r3, r0
 8001538:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800153a:	197b      	adds	r3, r7, r5
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d061      	beq.n	8001606 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001542:	197b      	adds	r3, r7, r5
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	e244      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d040      	beq.n	80015d2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_RCC_OscConfig+0x33c>)
 8001556:	2180      	movs	r1, #128	; 0x80
 8001558:	0049      	lsls	r1, r1, #1
 800155a:	430a      	orrs	r2, r1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fad1 	bl	8000b04 <HAL_GetTick>
 8001562:	0003      	movs	r3, r0
 8001564:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001566:	e019      	b.n	800159c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001568:	f7ff facc 	bl	8000b04 <HAL_GetTick>
 800156c:	0002      	movs	r2, r0
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d912      	bls.n	800159c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e22b      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	40021000 	.word	0x40021000
 8001580:	fffeffff 	.word	0xfffeffff
 8001584:	fffbffff 	.word	0xfffbffff
 8001588:	ffffe0ff 	.word	0xffffe0ff
 800158c:	0800351c 	.word	0x0800351c
 8001590:	20000078 	.word	0x20000078
 8001594:	2000007c 	.word	0x2000007c
 8001598:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800159c:	4bca      	ldr	r3, [pc, #808]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4013      	ands	r3, r2
 80015a6:	d0df      	beq.n	8001568 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a8:	4bc7      	ldr	r3, [pc, #796]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4ac7      	ldr	r2, [pc, #796]	; (80018cc <HAL_RCC_OscConfig+0x68c>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015b6:	4bc4      	ldr	r3, [pc, #784]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80015b8:	430a      	orrs	r2, r1
 80015ba:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015bc:	4bc2      	ldr	r3, [pc, #776]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	0a19      	lsrs	r1, r3, #8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
 80015c8:	061a      	lsls	r2, r3, #24
 80015ca:	4bbf      	ldr	r3, [pc, #764]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80015cc:	430a      	orrs	r2, r1
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	e019      	b.n	8001606 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015d2:	4bbd      	ldr	r3, [pc, #756]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	4bbc      	ldr	r3, [pc, #752]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80015d8:	49bd      	ldr	r1, [pc, #756]	; (80018d0 <HAL_RCC_OscConfig+0x690>)
 80015da:	400a      	ands	r2, r1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fa91 	bl	8000b04 <HAL_GetTick>
 80015e2:	0003      	movs	r3, r0
 80015e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e8:	f7ff fa8c 	bl	8000b04 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1eb      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015fa:	4bb3      	ldr	r3, [pc, #716]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2208      	movs	r2, #8
 800160c:	4013      	ands	r3, r2
 800160e:	d036      	beq.n	800167e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d019      	beq.n	800164c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001618:	4bab      	ldr	r3, [pc, #684]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800161a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800161c:	4baa      	ldr	r3, [pc, #680]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800161e:	2101      	movs	r1, #1
 8001620:	430a      	orrs	r2, r1
 8001622:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fa6e 	bl	8000b04 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800162e:	f7ff fa69 	bl	8000b04 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e1c8      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001640:	4ba1      	ldr	r3, [pc, #644]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001644:	2202      	movs	r2, #2
 8001646:	4013      	ands	r3, r2
 8001648:	d0f1      	beq.n	800162e <HAL_RCC_OscConfig+0x3ee>
 800164a:	e018      	b.n	800167e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800164c:	4b9e      	ldr	r3, [pc, #632]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800164e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001650:	4b9d      	ldr	r3, [pc, #628]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001652:	2101      	movs	r1, #1
 8001654:	438a      	bics	r2, r1
 8001656:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff fa54 	bl	8000b04 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fa4f 	bl	8000b04 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e1ae      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001674:	4b94      	ldr	r3, [pc, #592]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d1f1      	bne.n	8001662 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2204      	movs	r2, #4
 8001684:	4013      	ands	r3, r2
 8001686:	d100      	bne.n	800168a <HAL_RCC_OscConfig+0x44a>
 8001688:	e0ae      	b.n	80017e8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168a:	2023      	movs	r0, #35	; 0x23
 800168c:	183b      	adds	r3, r7, r0
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b8d      	ldr	r3, [pc, #564]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	055b      	lsls	r3, r3, #21
 800169a:	4013      	ands	r3, r2
 800169c:	d109      	bne.n	80016b2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b8a      	ldr	r3, [pc, #552]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80016a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016a2:	4b89      	ldr	r3, [pc, #548]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0549      	lsls	r1, r1, #21
 80016a8:	430a      	orrs	r2, r1
 80016aa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016ac:	183b      	adds	r3, r7, r0
 80016ae:	2201      	movs	r2, #1
 80016b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b2:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <HAL_RCC_OscConfig+0x694>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4013      	ands	r3, r2
 80016bc:	d11a      	bne.n	80016f4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016be:	4b85      	ldr	r3, [pc, #532]	; (80018d4 <HAL_RCC_OscConfig+0x694>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4b84      	ldr	r3, [pc, #528]	; (80018d4 <HAL_RCC_OscConfig+0x694>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	0049      	lsls	r1, r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fa1a 	bl	8000b04 <HAL_GetTick>
 80016d0:	0003      	movs	r3, r0
 80016d2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d6:	f7ff fa15 	bl	8000b04 <HAL_GetTick>
 80016da:	0002      	movs	r2, r0
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b64      	cmp	r3, #100	; 0x64
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e174      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b7a      	ldr	r3, [pc, #488]	; (80018d4 <HAL_RCC_OscConfig+0x694>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	; 0x80
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4013      	ands	r3, r2
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4d0>
 8001700:	4b71      	ldr	r3, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001702:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001704:	4b70      	ldr	r3, [pc, #448]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	0049      	lsls	r1, r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	651a      	str	r2, [r3, #80]	; 0x50
 800170e:	e031      	b.n	8001774 <HAL_RCC_OscConfig+0x534>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d10c      	bne.n	8001732 <HAL_RCC_OscConfig+0x4f2>
 8001718:	4b6b      	ldr	r3, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800171a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800171c:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800171e:	496c      	ldr	r1, [pc, #432]	; (80018d0 <HAL_RCC_OscConfig+0x690>)
 8001720:	400a      	ands	r2, r1
 8001722:	651a      	str	r2, [r3, #80]	; 0x50
 8001724:	4b68      	ldr	r3, [pc, #416]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001728:	4b67      	ldr	r3, [pc, #412]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800172a:	496b      	ldr	r1, [pc, #428]	; (80018d8 <HAL_RCC_OscConfig+0x698>)
 800172c:	400a      	ands	r2, r1
 800172e:	651a      	str	r2, [r3, #80]	; 0x50
 8001730:	e020      	b.n	8001774 <HAL_RCC_OscConfig+0x534>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689a      	ldr	r2, [r3, #8]
 8001736:	23a0      	movs	r3, #160	; 0xa0
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	429a      	cmp	r2, r3
 800173c:	d10e      	bne.n	800175c <HAL_RCC_OscConfig+0x51c>
 800173e:	4b62      	ldr	r3, [pc, #392]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001742:	4b61      	ldr	r3, [pc, #388]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	00c9      	lsls	r1, r1, #3
 8001748:	430a      	orrs	r2, r1
 800174a:	651a      	str	r2, [r3, #80]	; 0x50
 800174c:	4b5e      	ldr	r3, [pc, #376]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800174e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001750:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	0049      	lsls	r1, r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	651a      	str	r2, [r3, #80]	; 0x50
 800175a:	e00b      	b.n	8001774 <HAL_RCC_OscConfig+0x534>
 800175c:	4b5a      	ldr	r3, [pc, #360]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800175e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001760:	4b59      	ldr	r3, [pc, #356]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001762:	495b      	ldr	r1, [pc, #364]	; (80018d0 <HAL_RCC_OscConfig+0x690>)
 8001764:	400a      	ands	r2, r1
 8001766:	651a      	str	r2, [r3, #80]	; 0x50
 8001768:	4b57      	ldr	r3, [pc, #348]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800176a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176c:	4b56      	ldr	r3, [pc, #344]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800176e:	495a      	ldr	r1, [pc, #360]	; (80018d8 <HAL_RCC_OscConfig+0x698>)
 8001770:	400a      	ands	r2, r1
 8001772:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d015      	beq.n	80017a8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177c:	f7ff f9c2 	bl	8000b04 <HAL_GetTick>
 8001780:	0003      	movs	r3, r0
 8001782:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001784:	e009      	b.n	800179a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff f9bd 	bl	8000b04 <HAL_GetTick>
 800178a:	0002      	movs	r2, r0
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_OscConfig+0x69c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e11b      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800179a:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800179c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4013      	ands	r3, r2
 80017a4:	d0ef      	beq.n	8001786 <HAL_RCC_OscConfig+0x546>
 80017a6:	e014      	b.n	80017d2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a8:	f7ff f9ac 	bl	8000b04 <HAL_GetTick>
 80017ac:	0003      	movs	r3, r0
 80017ae:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b0:	e009      	b.n	80017c6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff f9a7 	bl	8000b04 <HAL_GetTick>
 80017b6:	0002      	movs	r2, r0
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	4a47      	ldr	r2, [pc, #284]	; (80018dc <HAL_RCC_OscConfig+0x69c>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e105      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80017c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d1ef      	bne.n	80017b2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017d2:	2323      	movs	r3, #35	; 0x23
 80017d4:	18fb      	adds	r3, r7, r3
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b3a      	ldr	r3, [pc, #232]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80017de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e0:	4b39      	ldr	r3, [pc, #228]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80017e2:	493f      	ldr	r1, [pc, #252]	; (80018e0 <HAL_RCC_OscConfig+0x6a0>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2220      	movs	r2, #32
 80017ee:	4013      	ands	r3, r2
 80017f0:	d049      	beq.n	8001886 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d026      	beq.n	8001848 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017fa:	4b33      	ldr	r3, [pc, #204]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001800:	2101      	movs	r1, #1
 8001802:	430a      	orrs	r2, r1
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	4b30      	ldr	r3, [pc, #192]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 8001808:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800180c:	2101      	movs	r1, #1
 800180e:	430a      	orrs	r2, r1
 8001810:	635a      	str	r2, [r3, #52]	; 0x34
 8001812:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <HAL_RCC_OscConfig+0x6a4>)
 8001814:	6a1a      	ldr	r2, [r3, #32]
 8001816:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <HAL_RCC_OscConfig+0x6a4>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0189      	lsls	r1, r1, #6
 800181c:	430a      	orrs	r2, r1
 800181e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff f970 	bl	8000b04 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182a:	f7ff f96b 	bl	8000b04 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0ca      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2202      	movs	r2, #2
 8001842:	4013      	ands	r3, r2
 8001844:	d0f1      	beq.n	800182a <HAL_RCC_OscConfig+0x5ea>
 8001846:	e01e      	b.n	8001886 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800184e:	2101      	movs	r1, #1
 8001850:	438a      	bics	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <HAL_RCC_OscConfig+0x6a4>)
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_RCC_OscConfig+0x6a4>)
 800185a:	4923      	ldr	r1, [pc, #140]	; (80018e8 <HAL_RCC_OscConfig+0x6a8>)
 800185c:	400a      	ands	r2, r1
 800185e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f950 	bl	8000b04 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800186a:	f7ff f94b 	bl	8000b04 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0aa      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2202      	movs	r2, #2
 8001882:	4013      	ands	r3, r2
 8001884:	d1f1      	bne.n	800186a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	2b00      	cmp	r3, #0
 800188c:	d100      	bne.n	8001890 <HAL_RCC_OscConfig+0x650>
 800188e:	e09f      	b.n	80019d0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d100      	bne.n	8001898 <HAL_RCC_OscConfig+0x658>
 8001896:	e078      	b.n	800198a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189c:	2b02      	cmp	r3, #2
 800189e:	d159      	bne.n	8001954 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_RCC_OscConfig+0x688>)
 80018a6:	4911      	ldr	r1, [pc, #68]	; (80018ec <HAL_RCC_OscConfig+0x6ac>)
 80018a8:	400a      	ands	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff f92a 	bl	8000b04 <HAL_GetTick>
 80018b0:	0003      	movs	r3, r0
 80018b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018b4:	e01c      	b.n	80018f0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b6:	f7ff f925 	bl	8000b04 <HAL_GetTick>
 80018ba:	0002      	movs	r2, r0
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d915      	bls.n	80018f0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e084      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
 80018c8:	40021000 	.word	0x40021000
 80018cc:	ffff1fff 	.word	0xffff1fff
 80018d0:	fffffeff 	.word	0xfffffeff
 80018d4:	40007000 	.word	0x40007000
 80018d8:	fffffbff 	.word	0xfffffbff
 80018dc:	00001388 	.word	0x00001388
 80018e0:	efffffff 	.word	0xefffffff
 80018e4:	40010000 	.word	0x40010000
 80018e8:	ffffdfff 	.word	0xffffdfff
 80018ec:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018f0:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	049b      	lsls	r3, r3, #18
 80018f8:	4013      	ands	r3, r2
 80018fa:	d1dc      	bne.n	80018b6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018fc:	4b37      	ldr	r3, [pc, #220]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a37      	ldr	r2, [pc, #220]	; (80019e0 <HAL_RCC_OscConfig+0x7a0>)
 8001902:	4013      	ands	r3, r2
 8001904:	0019      	movs	r1, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	431a      	orrs	r2, r3
 8001916:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 8001918:	430a      	orrs	r2, r1
 800191a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 8001922:	2180      	movs	r1, #128	; 0x80
 8001924:	0449      	lsls	r1, r1, #17
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7ff f8eb 	bl	8000b04 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff f8e6 	bl	8000b04 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e045      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	049b      	lsls	r3, r3, #18
 800194e:	4013      	ands	r3, r2
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x6f4>
 8001952:	e03d      	b.n	80019d0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 800195a:	4922      	ldr	r1, [pc, #136]	; (80019e4 <HAL_RCC_OscConfig+0x7a4>)
 800195c:	400a      	ands	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff f8d0 	bl	8000b04 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196a:	f7ff f8cb 	bl	8000b04 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e02a      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	049b      	lsls	r3, r3, #18
 8001984:	4013      	ands	r3, r2
 8001986:	d1f0      	bne.n	800196a <HAL_RCC_OscConfig+0x72a>
 8001988:	e022      	b.n	80019d0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	2b01      	cmp	r3, #1
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e01d      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_RCC_OscConfig+0x79c>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	2380      	movs	r3, #128	; 0x80
 80019a0:	025b      	lsls	r3, r3, #9
 80019a2:	401a      	ands	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d10f      	bne.n	80019cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	23f0      	movs	r3, #240	; 0xf0
 80019b0:	039b      	lsls	r3, r3, #14
 80019b2:	401a      	ands	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d107      	bne.n	80019cc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	23c0      	movs	r3, #192	; 0xc0
 80019c0:	041b      	lsls	r3, r3, #16
 80019c2:	401a      	ands	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d001      	beq.n	80019d0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	0018      	movs	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b00a      	add	sp, #40	; 0x28
 80019d8:	bdb0      	pop	{r4, r5, r7, pc}
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	40021000 	.word	0x40021000
 80019e0:	ff02ffff 	.word	0xff02ffff
 80019e4:	feffffff 	.word	0xfeffffff

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e128      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b96      	ldr	r3, [pc, #600]	; (8001c58 <HAL_RCC_ClockConfig+0x270>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d91e      	bls.n	8001a48 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <HAL_RCC_ClockConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4393      	bics	r3, r2
 8001a12:	0019      	movs	r1, r3
 8001a14:	4b90      	ldr	r3, [pc, #576]	; (8001c58 <HAL_RCC_ClockConfig+0x270>)
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff f872 	bl	8000b04 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a24:	e009      	b.n	8001a3a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a26:	f7ff f86d 	bl	8000b04 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	4a8a      	ldr	r2, [pc, #552]	; (8001c5c <HAL_RCC_ClockConfig+0x274>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e109      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b87      	ldr	r3, [pc, #540]	; (8001c58 <HAL_RCC_ClockConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4013      	ands	r3, r2
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d1ee      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a52:	4b83      	ldr	r3, [pc, #524]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	22f0      	movs	r2, #240	; 0xf0
 8001a58:	4393      	bics	r3, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001a62:	430a      	orrs	r2, r1
 8001a64:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
 8001a70:	e089      	b.n	8001b86 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a7a:	4b79      	ldr	r3, [pc, #484]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	2380      	movs	r3, #128	; 0x80
 8001a80:	029b      	lsls	r3, r3, #10
 8001a82:	4013      	ands	r3, r2
 8001a84:	d120      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e0e1      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a92:	4b73      	ldr	r3, [pc, #460]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	2380      	movs	r3, #128	; 0x80
 8001a98:	049b      	lsls	r3, r3, #18
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d114      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0d5      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d109      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0ca      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ab8:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0c2      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac8:	4b65      	ldr	r3, [pc, #404]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2203      	movs	r2, #3
 8001ace:	4393      	bics	r3, r2
 8001ad0:	0019      	movs	r1, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001adc:	f7ff f812 	bl	8000b04 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d111      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aee:	f7ff f809 	bl	8000b04 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x274>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0a5      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b02:	4b57      	ldr	r3, [pc, #348]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	220c      	movs	r2, #12
 8001b08:	4013      	ands	r3, r2
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d1ef      	bne.n	8001aee <HAL_RCC_ClockConfig+0x106>
 8001b0e:	e03a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d111      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b18:	e009      	b.n	8001b2e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b1a:	f7fe fff3 	bl	8000b04 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a4d      	ldr	r2, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x274>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e08f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2e:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	220c      	movs	r2, #12
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b0c      	cmp	r3, #12
 8001b38:	d1ef      	bne.n	8001b1a <HAL_RCC_ClockConfig+0x132>
 8001b3a:	e024      	b.n	8001b86 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d11b      	bne.n	8001b7c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b46:	f7fe ffdd 	bl	8000b04 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4a42      	ldr	r2, [pc, #264]	; (8001c5c <HAL_RCC_ClockConfig+0x274>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e079      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b5a:	4b41      	ldr	r3, [pc, #260]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	220c      	movs	r2, #12
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d1ef      	bne.n	8001b46 <HAL_RCC_ClockConfig+0x15e>
 8001b66:	e00e      	b.n	8001b86 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b68:	f7fe ffcc 	bl	8000b04 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <HAL_RCC_ClockConfig+0x274>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e068      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	220c      	movs	r2, #12
 8001b82:	4013      	ands	r3, r2
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x270>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d21e      	bcs.n	8001bd2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_RCC_ClockConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4393      	bics	r3, r2
 8001b9c:	0019      	movs	r1, r3
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	; (8001c58 <HAL_RCC_ClockConfig+0x270>)
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ba6:	f7fe ffad 	bl	8000b04 <HAL_GetTick>
 8001baa:	0003      	movs	r3, r0
 8001bac:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	e009      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7fe ffa8 	bl	8000b04 <HAL_GetTick>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <HAL_RCC_ClockConfig+0x274>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e044      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <HAL_RCC_ClockConfig+0x270>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4013      	ands	r3, r2
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d1ee      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bdc:	4b20      	ldr	r3, [pc, #128]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x27c>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	0019      	movs	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001bec:	430a      	orrs	r2, r1
 8001bee:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d00a      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4a1a      	ldr	r2, [pc, #104]	; (8001c68 <HAL_RCC_ClockConfig+0x280>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	00da      	lsls	r2, r3, #3
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c10:	f000 f832 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8001c14:	0001      	movs	r1, r0
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <HAL_RCC_ClockConfig+0x278>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	091b      	lsrs	r3, r3, #4
 8001c1c:	220f      	movs	r2, #15
 8001c1e:	4013      	ands	r3, r2
 8001c20:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <HAL_RCC_ClockConfig+0x284>)
 8001c22:	5cd3      	ldrb	r3, [r2, r3]
 8001c24:	000a      	movs	r2, r1
 8001c26:	40da      	lsrs	r2, r3
 8001c28:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <HAL_RCC_ClockConfig+0x288>)
 8001c2a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_RCC_ClockConfig+0x28c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	250b      	movs	r5, #11
 8001c32:	197c      	adds	r4, r7, r5
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7fe ff1f 	bl	8000a78 <HAL_InitTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001c3e:	197b      	adds	r3, r7, r5
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c46:	197b      	adds	r3, r7, r5
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	00001388 	.word	0x00001388
 8001c60:	40021000 	.word	0x40021000
 8001c64:	fffff8ff 	.word	0xfffff8ff
 8001c68:	ffffc7ff 	.word	0xffffc7ff
 8001c6c:	0800351c 	.word	0x0800351c
 8001c70:	20000078 	.word	0x20000078
 8001c74:	2000007c 	.word	0x2000007c

08001c78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c78:	b5b0      	push	{r4, r5, r7, lr}
 8001c7a:	b08e      	sub	sp, #56	; 0x38
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c7e:	4b4c      	ldr	r3, [pc, #304]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c86:	230c      	movs	r3, #12
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b0c      	cmp	r3, #12
 8001c8c:	d014      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8001c8e:	d900      	bls.n	8001c92 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c90:	e07b      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x112>
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d002      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x24>
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d00b      	beq.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9a:	e076      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c9c:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2210      	movs	r2, #16
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d002      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ca6:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001caa:	e07c      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001cac:	4b42      	ldr	r3, [pc, #264]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb0:	e079      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb2:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x144>)
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cb6:	e076      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	0c9a      	lsrs	r2, r3, #18
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x148>)
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc8:	0d9a      	lsrs	r2, r3, #22
 8001cca:	2303      	movs	r3, #3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	3301      	adds	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d01a      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	4a35      	ldr	r2, [pc, #212]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x144>)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	69b8      	ldr	r0, [r7, #24]
 8001cec:	69f9      	ldr	r1, [r7, #28]
 8001cee:	f7fe fab7 	bl	8000260 <__aeabi_lmul>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	000b      	movs	r3, r1
 8001cf6:	0010      	movs	r0, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f7fe fa8b 	bl	8000220 <__aeabi_uldivmod>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	0013      	movs	r3, r2
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
 8001d12:	e037      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2210      	movs	r2, #16
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d01a      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d28:	2300      	movs	r3, #0
 8001d2a:	68b8      	ldr	r0, [r7, #8]
 8001d2c:	68f9      	ldr	r1, [r7, #12]
 8001d2e:	f7fe fa97 	bl	8000260 <__aeabi_lmul>
 8001d32:	0002      	movs	r2, r0
 8001d34:	000b      	movs	r3, r1
 8001d36:	0010      	movs	r0, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	603b      	str	r3, [r7, #0]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f7fe fa6b 	bl	8000220 <__aeabi_uldivmod>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	000b      	movs	r3, r1
 8001d4e:	0013      	movs	r3, r2
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
 8001d52:	e017      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	0018      	movs	r0, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	4a16      	ldr	r2, [pc, #88]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f7fe fa7e 	bl	8000260 <__aeabi_lmul>
 8001d64:	0002      	movs	r2, r0
 8001d66:	000b      	movs	r3, r1
 8001d68:	0010      	movs	r0, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	001c      	movs	r4, r3
 8001d70:	2300      	movs	r3, #0
 8001d72:	001d      	movs	r5, r3
 8001d74:	0022      	movs	r2, r4
 8001d76:	002b      	movs	r3, r5
 8001d78:	f7fe fa52 	bl	8000220 <__aeabi_uldivmod>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	000b      	movs	r3, r1
 8001d80:	0013      	movs	r3, r2
 8001d82:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d88:	e00d      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	0b5b      	lsrs	r3, r3, #13
 8001d90:	2207      	movs	r2, #7
 8001d92:	4013      	ands	r3, r2
 8001d94:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	2280      	movs	r2, #128	; 0x80
 8001d9c:	0212      	lsls	r2, r2, #8
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	0013      	movs	r3, r2
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001da8:	0018      	movs	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b00e      	add	sp, #56	; 0x38
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	003d0900 	.word	0x003d0900
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200
 8001dc0:	08003534 	.word	0x08003534

08001dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	20000078 	.word	0x20000078

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ddc:	f7ff fff2 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001de0:	0001      	movs	r1, r0
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	2207      	movs	r2, #7
 8001dea:	4013      	ands	r3, r2
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	40d9      	lsrs	r1, r3
 8001df2:	000b      	movs	r3, r1
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	0800352c 	.word	0x0800352c

08001e04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e08:	f7ff ffdc 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001e0c:	0001      	movs	r1, r0
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	0adb      	lsrs	r3, r3, #11
 8001e14:	2207      	movs	r2, #7
 8001e16:	4013      	ands	r3, r2
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e1a:	5cd3      	ldrb	r3, [r2, r3]
 8001e1c:	40d9      	lsrs	r1, r3
 8001e1e:	000b      	movs	r3, r1
}
 8001e20:	0018      	movs	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	0800352c 	.word	0x0800352c

08001e30 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001e38:	2317      	movs	r3, #23
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2220      	movs	r2, #32
 8001e46:	4013      	ands	r3, r2
 8001e48:	d106      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	4013      	ands	r3, r2
 8001e54:	d100      	bne.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001e56:	e0d9      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e58:	4ba4      	ldr	r3, [pc, #656]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	055b      	lsls	r3, r3, #21
 8001e60:	4013      	ands	r3, r2
 8001e62:	d10a      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4ba1      	ldr	r3, [pc, #644]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e68:	4ba0      	ldr	r3, [pc, #640]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	0549      	lsls	r1, r1, #21
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001e72:	2317      	movs	r3, #23
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	2201      	movs	r2, #1
 8001e78:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b9d      	ldr	r3, [pc, #628]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	d11a      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b9a      	ldr	r3, [pc, #616]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b99      	ldr	r3, [pc, #612]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001e8c:	2180      	movs	r1, #128	; 0x80
 8001e8e:	0049      	lsls	r1, r1, #1
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e94:	f7fe fe36 	bl	8000b04 <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9e:	f7fe fe31 	bl	8000b04 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b64      	cmp	r3, #100	; 0x64
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e118      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	4b8f      	ldr	r3, [pc, #572]	; (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d0f0      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001ebc:	4b8b      	ldr	r3, [pc, #556]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	039b      	lsls	r3, r3, #14
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	23c0      	movs	r3, #192	; 0xc0
 8001ece:	039b      	lsls	r3, r3, #14
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d107      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	23c0      	movs	r3, #192	; 0xc0
 8001ede:	039b      	lsls	r3, r3, #14
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d013      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	23c0      	movs	r3, #192	; 0xc0
 8001eee:	029b      	lsls	r3, r3, #10
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	23c0      	movs	r3, #192	; 0xc0
 8001ef4:	029b      	lsls	r3, r3, #10
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d10a      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001efa:	4b7c      	ldr	r3, [pc, #496]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	029b      	lsls	r3, r3, #10
 8001f02:	401a      	ands	r2, r3
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	029b      	lsls	r3, r3, #10
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d101      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0e8      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001f10:	4b76      	ldr	r3, [pc, #472]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f14:	23c0      	movs	r3, #192	; 0xc0
 8001f16:	029b      	lsls	r3, r3, #10
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d049      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	23c0      	movs	r3, #192	; 0xc0
 8001f28:	029b      	lsls	r3, r3, #10
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d004      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2220      	movs	r2, #32
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d10d      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	23c0      	movs	r3, #192	; 0xc0
 8001f42:	029b      	lsls	r3, r3, #10
 8001f44:	4013      	ands	r3, r2
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d034      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	4013      	ands	r3, r2
 8001f56:	d02e      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001f58:	4b64      	ldr	r3, [pc, #400]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	4a65      	ldr	r2, [pc, #404]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f62:	4b62      	ldr	r3, [pc, #392]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f66:	4b61      	ldr	r3, [pc, #388]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	0309      	lsls	r1, r1, #12
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f70:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f74:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f76:	4960      	ldr	r1, [pc, #384]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001f7c:	4b5b      	ldr	r3, [pc, #364]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	2380      	movs	r3, #128	; 0x80
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d014      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fdba 	bl	8000b04 <HAL_GetTick>
 8001f90:	0003      	movs	r3, r0
 8001f92:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f94:	e009      	b.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7fe fdb5 	bl	8000b04 <HAL_GetTick>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	4a56      	ldr	r2, [pc, #344]	; (80020fc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e09b      	b.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001faa:	4b50      	ldr	r3, [pc, #320]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	d0ef      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	23c0      	movs	r3, #192	; 0xc0
 8001fc2:	029b      	lsls	r3, r3, #10
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a4c      	ldr	r2, [pc, #304]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	23c0      	movs	r3, #192	; 0xc0
 8001fd8:	039b      	lsls	r3, r3, #14
 8001fda:	401a      	ands	r2, r3
 8001fdc:	4b43      	ldr	r3, [pc, #268]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001fe4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	23c0      	movs	r3, #192	; 0xc0
 8001fec:	029b      	lsls	r3, r3, #10
 8001fee:	401a      	ands	r2, r3
 8001ff0:	4b3e      	ldr	r3, [pc, #248]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ff6:	2317      	movs	r3, #23
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002000:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002006:	493f      	ldr	r1, [pc, #252]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002008:	400a      	ands	r2, r1
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2201      	movs	r2, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d009      	beq.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002016:	4b35      	ldr	r3, [pc, #212]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	2203      	movs	r2, #3
 800201c:	4393      	bics	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	4b31      	ldr	r3, [pc, #196]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002026:	430a      	orrs	r2, r1
 8002028:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2202      	movs	r2, #2
 8002030:	4013      	ands	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002038:	220c      	movs	r2, #12
 800203a:	4393      	bics	r3, r2
 800203c:	0019      	movs	r1, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691a      	ldr	r2, [r3, #16]
 8002042:	4b2a      	ldr	r3, [pc, #168]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002044:	430a      	orrs	r2, r1
 8002046:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2204      	movs	r2, #4
 800204e:	4013      	ands	r3, r2
 8002050:	d009      	beq.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002056:	4a2c      	ldr	r2, [pc, #176]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002058:	4013      	ands	r3, r2
 800205a:	0019      	movs	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002062:	430a      	orrs	r2, r1
 8002064:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2208      	movs	r2, #8
 800206c:	4013      	ands	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002070:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	4a25      	ldr	r2, [pc, #148]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699a      	ldr	r2, [r3, #24]
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002080:	430a      	orrs	r2, r1
 8002082:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	4013      	ands	r3, r2
 800208e:	d009      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002096:	4013      	ands	r3, r2
 8002098:	0019      	movs	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69da      	ldr	r2, [r3, #28]
 800209e:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020a0:	430a      	orrs	r2, r1
 80020a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	4013      	ands	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	0019      	movs	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020be:	430a      	orrs	r2, r1
 80020c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2280      	movs	r2, #128	; 0x80
 80020c8:	4013      	ands	r3, r2
 80020ca:	d009      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d0:	4a10      	ldr	r2, [pc, #64]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	0019      	movs	r1, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1a      	ldr	r2, [r3, #32]
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020dc:	430a      	orrs	r2, r1
 80020de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b006      	add	sp, #24
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
 80020f4:	fffcffff 	.word	0xfffcffff
 80020f8:	fff7ffff 	.word	0xfff7ffff
 80020fc:	00001388 	.word	0x00001388
 8002100:	ffcfffff 	.word	0xffcfffff
 8002104:	efffffff 	.word	0xefffffff
 8002108:	fffff3ff 	.word	0xfffff3ff
 800210c:	ffffcfff 	.word	0xffffcfff
 8002110:	fbffffff 	.word	0xfbffffff
 8002114:	fff3ffff 	.word	0xfff3ffff

08002118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e083      	b.n	8002232 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	2382      	movs	r3, #130	; 0x82
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	429a      	cmp	r2, r3
 800213c:	d009      	beq.n	8002152 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	61da      	str	r2, [r3, #28]
 8002144:	e005      	b.n	8002152 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2251      	movs	r2, #81	; 0x51
 800215c:	5c9b      	ldrb	r3, [r3, r2]
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d107      	bne.n	8002174 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2250      	movs	r2, #80	; 0x50
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	0018      	movs	r0, r3
 8002170:	f7fe fb7c 	bl	800086c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2251      	movs	r2, #81	; 0x51
 8002178:	2102      	movs	r1, #2
 800217a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2140      	movs	r1, #64	; 0x40
 8002188:	438a      	bics	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	2382      	movs	r3, #130	; 0x82
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	401a      	ands	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6899      	ldr	r1, [r3, #8]
 800219a:	2384      	movs	r3, #132	; 0x84
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	400b      	ands	r3, r1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68d9      	ldr	r1, [r3, #12]
 80021a6:	2380      	movs	r3, #128	; 0x80
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	400b      	ands	r3, r1
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2102      	movs	r1, #2
 80021b4:	400b      	ands	r3, r1
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	2101      	movs	r1, #1
 80021be:	400b      	ands	r3, r1
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6999      	ldr	r1, [r3, #24]
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	400b      	ands	r3, r1
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	2138      	movs	r1, #56	; 0x38
 80021d4:	400b      	ands	r3, r1
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	400b      	ands	r3, r1
 80021e0:	431a      	orrs	r2, r3
 80021e2:	0011      	movs	r1, r2
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	019b      	lsls	r3, r3, #6
 80021ec:	401a      	ands	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	0c1b      	lsrs	r3, r3, #16
 80021fc:	2204      	movs	r2, #4
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	2210      	movs	r2, #16
 8002208:	401a      	ands	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <HAL_SPI_Init+0x124>)
 800221e:	400a      	ands	r2, r1
 8002220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2251      	movs	r2, #81	; 0x51
 800222c:	2101      	movs	r1, #1
 800222e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	0018      	movs	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	b002      	add	sp, #8
 8002238:	bd80      	pop	{r7, pc}
 800223a:	46c0      	nop			; (mov r8, r8)
 800223c:	fffff7ff 	.word	0xfffff7ff

08002240 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	001a      	movs	r2, r3
 800224e:	1cbb      	adds	r3, r7, #2
 8002250:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002252:	2317      	movs	r3, #23
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2250      	movs	r2, #80	; 0x50
 800225e:	5c9b      	ldrb	r3, [r3, r2]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_SPI_TransmitReceive_DMA+0x28>
 8002264:	2302      	movs	r3, #2
 8002266:	e0f6      	b.n	8002456 <HAL_SPI_TransmitReceive_DMA+0x216>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2250      	movs	r2, #80	; 0x50
 800226c:	2101      	movs	r1, #1
 800226e:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002270:	2016      	movs	r0, #22
 8002272:	183b      	adds	r3, r7, r0
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	2151      	movs	r1, #81	; 0x51
 8002278:	5c52      	ldrb	r2, [r2, r1]
 800227a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002282:	0001      	movs	r1, r0
 8002284:	187b      	adds	r3, r7, r1
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d011      	beq.n	80022b0 <HAL_SPI_TransmitReceive_DMA+0x70>
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	2382      	movs	r3, #130	; 0x82
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	429a      	cmp	r2, r3
 8002294:	d107      	bne.n	80022a6 <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <HAL_SPI_TransmitReceive_DMA+0x66>
 800229e:	187b      	adds	r3, r7, r1
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d004      	beq.n	80022b0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 80022a6:	2317      	movs	r3, #23
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2202      	movs	r2, #2
 80022ac:	701a      	strb	r2, [r3, #0]
    goto error;
 80022ae:	e0cb      	b.n	8002448 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d006      	beq.n	80022c4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_SPI_TransmitReceive_DMA+0x84>
 80022bc:	1cbb      	adds	r3, r7, #2
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 80022c4:	2317      	movs	r3, #23
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80022cc:	e0bc      	b.n	8002448 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2251      	movs	r2, #81	; 0x51
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d003      	beq.n	80022e2 <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2251      	movs	r2, #81	; 0x51
 80022de:	2105      	movs	r1, #5
 80022e0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1cba      	adds	r2, r7, #2
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1cba      	adds	r2, r7, #2
 80022fa:	8812      	ldrh	r2, [r2, #0]
 80022fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	1cba      	adds	r2, r7, #2
 8002308:	8812      	ldrh	r2, [r2, #0]
 800230a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1cba      	adds	r2, r7, #2
 8002310:	8812      	ldrh	r2, [r2, #0]
 8002312:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2251      	movs	r2, #81	; 0x51
 8002324:	5c9b      	ldrb	r3, [r3, r2]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b04      	cmp	r3, #4
 800232a:	d108      	bne.n	800233e <HAL_SPI_TransmitReceive_DMA+0xfe>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002330:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_SPI_TransmitReceive_DMA+0x220>)
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	4a4a      	ldr	r2, [pc, #296]	; (8002464 <HAL_SPI_TransmitReceive_DMA+0x224>)
 800233a:	62da      	str	r2, [r3, #44]	; 0x2c
 800233c:	e007      	b.n	800234e <HAL_SPI_TransmitReceive_DMA+0x10e>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	4a49      	ldr	r2, [pc, #292]	; (8002468 <HAL_SPI_TransmitReceive_DMA+0x228>)
 8002344:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	4a48      	ldr	r2, [pc, #288]	; (800246c <HAL_SPI_TransmitReceive_DMA+0x22c>)
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a47      	ldr	r2, [pc, #284]	; (8002470 <HAL_SPI_TransmitReceive_DMA+0x230>)
 8002354:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235a:	2200      	movs	r2, #0
 800235c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	330c      	adds	r3, #12
 8002368:	0019      	movs	r1, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236e:	001a      	movs	r2, r3
                                 hspi->RxXferCount))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002374:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8002376:	f7fe fcd1 	bl	8000d1c <HAL_DMA_Start_IT>
 800237a:	1e03      	subs	r3, r0, #0
 800237c:	d00e      	beq.n	800239c <HAL_SPI_TransmitReceive_DMA+0x15c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	2210      	movs	r2, #16
 8002384:	431a      	orrs	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800238a:	2317      	movs	r3, #23
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2201      	movs	r2, #1
 8002390:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2251      	movs	r2, #81	; 0x51
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]
    goto error;
 800239a:	e055      	b.n	8002448 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	430a      	orrs	r2, r1
 80023aa:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b8:	2200      	movs	r2, #0
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c8:	2200      	movs	r2, #0
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	0019      	movs	r1, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	330c      	adds	r3, #12
 80023dc:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80023e4:	f7fe fc9a 	bl	8000d1c <HAL_DMA_Start_IT>
 80023e8:	1e03      	subs	r3, r0, #0
 80023ea:	d00e      	beq.n	800240a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	2210      	movs	r2, #16
 80023f2:	431a      	orrs	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80023f8:	2317      	movs	r3, #23
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]

    hspi->State = HAL_SPI_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2251      	movs	r2, #81	; 0x51
 8002404:	2101      	movs	r1, #1
 8002406:	5499      	strb	r1, [r3, r2]
    goto error;
 8002408:	e01e      	b.n	8002448 <HAL_SPI_TransmitReceive_DMA+0x208>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2240      	movs	r2, #64	; 0x40
 8002412:	4013      	ands	r3, r2
 8002414:	2b40      	cmp	r3, #64	; 0x40
 8002416:	d007      	beq.n	8002428 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2140      	movs	r1, #64	; 0x40
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2120      	movs	r1, #32
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2102      	movs	r1, #2
 8002444:	430a      	orrs	r2, r1
 8002446:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2250      	movs	r2, #80	; 0x50
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002450:	2317      	movs	r3, #23
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	781b      	ldrb	r3, [r3, #0]
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b006      	add	sp, #24
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	080027e3 	.word	0x080027e3
 8002464:	080026a1 	.word	0x080026a1
 8002468:	08002801 	.word	0x08002801
 800246c:	0800274f 	.word	0x0800274f
 8002470:	0800281f 	.word	0x0800281f

08002474 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	001a      	movs	r2, r3
 8002492:	2301      	movs	r3, #1
 8002494:	4013      	ands	r3, r2
 8002496:	d10f      	bne.n	80024b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2201      	movs	r2, #1
 800249c:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800249e:	d00b      	beq.n	80024b8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	099b      	lsrs	r3, r3, #6
 80024a4:	001a      	movs	r2, r3
 80024a6:	2301      	movs	r3, #1
 80024a8:	4013      	ands	r3, r2
 80024aa:	d005      	beq.n	80024b8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	0010      	movs	r0, r2
 80024b4:	4798      	blx	r3
    return;
 80024b6:	e0d5      	b.n	8002664 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	085b      	lsrs	r3, r3, #1
 80024bc:	001a      	movs	r2, r3
 80024be:	2301      	movs	r3, #1
 80024c0:	4013      	ands	r3, r2
 80024c2:	d00b      	beq.n	80024dc <HAL_SPI_IRQHandler+0x68>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	09db      	lsrs	r3, r3, #7
 80024c8:	001a      	movs	r2, r3
 80024ca:	2301      	movs	r3, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d005      	beq.n	80024dc <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	0010      	movs	r0, r2
 80024d8:	4798      	blx	r3
    return;
 80024da:	e0c3      	b.n	8002664 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	095b      	lsrs	r3, r3, #5
 80024e0:	001a      	movs	r2, r3
 80024e2:	2301      	movs	r3, #1
 80024e4:	4013      	ands	r3, r2
 80024e6:	d10c      	bne.n	8002502 <HAL_SPI_IRQHandler+0x8e>
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	099b      	lsrs	r3, r3, #6
 80024ec:	001a      	movs	r2, r3
 80024ee:	2301      	movs	r3, #1
 80024f0:	4013      	ands	r3, r2
 80024f2:	d106      	bne.n	8002502 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	001a      	movs	r2, r3
 80024fa:	2301      	movs	r3, #1
 80024fc:	4013      	ands	r3, r2
 80024fe:	d100      	bne.n	8002502 <HAL_SPI_IRQHandler+0x8e>
 8002500:	e0b0      	b.n	8002664 <HAL_SPI_IRQHandler+0x1f0>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	095b      	lsrs	r3, r3, #5
 8002506:	001a      	movs	r2, r3
 8002508:	2301      	movs	r3, #1
 800250a:	4013      	ands	r3, r2
 800250c:	d100      	bne.n	8002510 <HAL_SPI_IRQHandler+0x9c>
 800250e:	e0a9      	b.n	8002664 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	099b      	lsrs	r3, r3, #6
 8002514:	001a      	movs	r2, r3
 8002516:	2301      	movs	r3, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d023      	beq.n	8002564 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2251      	movs	r2, #81	; 0x51
 8002520:	5c9b      	ldrb	r3, [r3, r2]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b03      	cmp	r3, #3
 8002526:	d011      	beq.n	800254c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252c:	2204      	movs	r2, #4
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002534:	2300      	movs	r3, #0
 8002536:	617b      	str	r3, [r7, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	e00b      	b.n	8002564 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
        return;
 8002562:	e07f      	b.n	8002664 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	001a      	movs	r2, r3
 800256a:	2301      	movs	r3, #1
 800256c:	4013      	ands	r3, r2
 800256e:	d014      	beq.n	800259a <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002574:	2201      	movs	r2, #1
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800257c:	2300      	movs	r3, #0
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2140      	movs	r1, #64	; 0x40
 8002594:	438a      	bics	r2, r1
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	001a      	movs	r2, r3
 80025a0:	2301      	movs	r3, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	d00c      	beq.n	80025c0 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	2208      	movs	r2, #8
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80025b2:	2300      	movs	r3, #0
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d04c      	beq.n	8002662 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	21e0      	movs	r1, #224	; 0xe0
 80025d4:	438a      	bics	r2, r1
 80025d6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2251      	movs	r2, #81	; 0x51
 80025dc:	2101      	movs	r1, #1
 80025de:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	2202      	movs	r2, #2
 80025e4:	4013      	ands	r3, r2
 80025e6:	d103      	bne.n	80025f0 <HAL_SPI_IRQHandler+0x17c>
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	2201      	movs	r2, #1
 80025ec:	4013      	ands	r3, r2
 80025ee:	d032      	beq.n	8002656 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2103      	movs	r1, #3
 80025fc:	438a      	bics	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002604:	2b00      	cmp	r3, #0
 8002606:	d010      	beq.n	800262a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	4a17      	ldr	r2, [pc, #92]	; (800266c <HAL_SPI_IRQHandler+0x1f8>)
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002614:	0018      	movs	r0, r3
 8002616:	f7fe fbe7 	bl	8000de8 <HAL_DMA_Abort_IT>
 800261a:	1e03      	subs	r3, r0, #0
 800261c:	d005      	beq.n	800262a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	2240      	movs	r2, #64	; 0x40
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	2b00      	cmp	r3, #0
 8002630:	d016      	beq.n	8002660 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002636:	4a0d      	ldr	r2, [pc, #52]	; (800266c <HAL_SPI_IRQHandler+0x1f8>)
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800263e:	0018      	movs	r0, r3
 8002640:	f7fe fbd2 	bl	8000de8 <HAL_DMA_Abort_IT>
 8002644:	1e03      	subs	r3, r0, #0
 8002646:	d00b      	beq.n	8002660 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264c:	2240      	movs	r2, #64	; 0x40
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002654:	e004      	b.n	8002660 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	0018      	movs	r0, r3
 800265a:	f7fe f8d5 	bl	8000808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800265e:	e000      	b.n	8002662 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002660:	46c0      	nop			; (mov r8, r8)
    return;
 8002662:	46c0      	nop			; (mov r8, r8)
  }
}
 8002664:	46bd      	mov	sp, r7
 8002666:	b008      	add	sp, #32
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	08002861 	.word	0x08002861

08002670 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	b002      	add	sp, #8
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026ae:	f7fe fa29 	bl	8000b04 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2220      	movs	r2, #32
 80026be:	4013      	ands	r3, r2
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d03d      	beq.n	8002740 <SPI_DMAReceiveCplt+0xa0>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2120      	movs	r1, #32
 80026d0:	438a      	bics	r2, r1
 80026d2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10e      	bne.n	80026fa <SPI_DMAReceiveCplt+0x5a>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	2382      	movs	r3, #130	; 0x82
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d108      	bne.n	80026fa <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2103      	movs	r1, #3
 80026f4:	438a      	bics	r2, r1
 80026f6:	605a      	str	r2, [r3, #4]
 80026f8:	e007      	b.n	800270a <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2101      	movs	r1, #1
 8002706:	438a      	bics	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2164      	movs	r1, #100	; 0x64
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f949 	bl	80029a8 <SPI_EndRxTransaction>
 8002716:	1e03      	subs	r3, r0, #0
 8002718:	d002      	beq.n	8002720 <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2220      	movs	r2, #32
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2251      	movs	r2, #81	; 0x51
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <SPI_DMAReceiveCplt+0xa0>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	0018      	movs	r0, r3
 800273a:	f7fe f865 	bl	8000808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800273e:	e003      	b.n	8002748 <SPI_DMAReceiveCplt+0xa8>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff ff94 	bl	8002670 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002748:	46bd      	mov	sp, r7
 800274a:	b004      	add	sp, #16
 800274c:	bd80      	pop	{r7, pc}

0800274e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800275c:	f7fe f9d2 	bl	8000b04 <HAL_GetTick>
 8002760:	0003      	movs	r3, r0
 8002762:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2220      	movs	r2, #32
 800276c:	4013      	ands	r3, r2
 800276e:	2b20      	cmp	r3, #32
 8002770:	d030      	beq.n	80027d4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2120      	movs	r1, #32
 800277e:	438a      	bics	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2164      	movs	r1, #100	; 0x64
 8002788:	0018      	movs	r0, r3
 800278a:	f000 f977 	bl	8002a7c <SPI_EndRxTxTransaction>
 800278e:	1e03      	subs	r3, r0, #0
 8002790:	d005      	beq.n	800279e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	2220      	movs	r2, #32
 8002798:	431a      	orrs	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2103      	movs	r1, #3
 80027aa:	438a      	bics	r2, r1
 80027ac:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2251      	movs	r2, #81	; 0x51
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d004      	beq.n	80027d4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7fe f81b 	bl	8000808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80027d2:	e003      	b.n	80027dc <SPI_DMATransmitReceiveCplt+0x8e>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	0018      	movs	r0, r3
 80027d8:	f7fe f802 	bl	80007e0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027dc:	46bd      	mov	sp, r7
 80027de:	b004      	add	sp, #16
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f7ff ff44 	bl	8002680 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0018      	movs	r0, r3
 8002812:	f7ff ff3d 	bl	8002690 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b004      	add	sp, #16
 800281c:	bd80      	pop	{r7, pc}

0800281e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2103      	movs	r1, #3
 8002838:	438a      	bics	r2, r1
 800283a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	2210      	movs	r2, #16
 8002842:	431a      	orrs	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2251      	movs	r2, #81	; 0x51
 800284c:	2101      	movs	r1, #1
 800284e:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	0018      	movs	r0, r3
 8002854:	f7fd ffd8 	bl	8000808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002858:	46c0      	nop			; (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bd80      	pop	{r7, pc}

08002860 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	0018      	movs	r0, r3
 800287e:	f7fd ffc3 	bl	8000808 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	b004      	add	sp, #16
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	603b      	str	r3, [r7, #0]
 8002898:	1dfb      	adds	r3, r7, #7
 800289a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800289c:	f7fe f932 	bl	8000b04 <HAL_GetTick>
 80028a0:	0002      	movs	r2, r0
 80028a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	18d3      	adds	r3, r2, r3
 80028aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028ac:	f7fe f92a 	bl	8000b04 <HAL_GetTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	015b      	lsls	r3, r3, #5
 80028ba:	0d1b      	lsrs	r3, r3, #20
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	4353      	muls	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028c2:	e058      	b.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	d055      	beq.n	8002976 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028ca:	f7fe f91b 	bl	8000b04 <HAL_GetTick>
 80028ce:	0002      	movs	r2, r0
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	69fa      	ldr	r2, [r7, #28]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d902      	bls.n	80028e0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d142      	bne.n	8002966 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	21e0      	movs	r1, #224	; 0xe0
 80028ec:	438a      	bics	r2, r1
 80028ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	2382      	movs	r3, #130	; 0x82
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d113      	bne.n	8002924 <SPI_WaitFlagStateUntilTimeout+0x98>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	429a      	cmp	r2, r3
 8002906:	d005      	beq.n	8002914 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	429a      	cmp	r2, r3
 8002912:	d107      	bne.n	8002924 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2140      	movs	r1, #64	; 0x40
 8002920:	438a      	bics	r2, r1
 8002922:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	019b      	lsls	r3, r3, #6
 800292c:	429a      	cmp	r2, r3
 800292e:	d110      	bne.n	8002952 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	491a      	ldr	r1, [pc, #104]	; (80029a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800293c:	400a      	ands	r2, r1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2180      	movs	r1, #128	; 0x80
 800294c:	0189      	lsls	r1, r1, #6
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2251      	movs	r2, #81	; 0x51
 8002956:	2101      	movs	r1, #1
 8002958:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2250      	movs	r2, #80	; 0x50
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e017      	b.n	8002996 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3b01      	subs	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	4013      	ands	r3, r2
 8002980:	68ba      	ldr	r2, [r7, #8]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	425a      	negs	r2, r3
 8002986:	4153      	adcs	r3, r2
 8002988:	b2db      	uxtb	r3, r3
 800298a:	001a      	movs	r2, r3
 800298c:	1dfb      	adds	r3, r7, #7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	d197      	bne.n	80028c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b008      	add	sp, #32
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	20000078 	.word	0x20000078
 80029a4:	ffffdfff 	.word	0xffffdfff

080029a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	2382      	movs	r3, #130	; 0x82
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	429a      	cmp	r2, r3
 80029be:	d113      	bne.n	80029e8 <SPI_EndRxTransaction+0x40>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d005      	beq.n	80029d8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d107      	bne.n	80029e8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2140      	movs	r1, #64	; 0x40
 80029e4:	438a      	bics	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	2382      	movs	r3, #130	; 0x82
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d12b      	bne.n	8002a4c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d012      	beq.n	8002a26 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	0013      	movs	r3, r2
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	2180      	movs	r1, #128	; 0x80
 8002a0e:	f7ff ff3d 	bl	800288c <SPI_WaitFlagStateUntilTimeout>
 8002a12:	1e03      	subs	r3, r0, #0
 8002a14:	d02d      	beq.n	8002a72 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e026      	b.n	8002a74 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a26:	68ba      	ldr	r2, [r7, #8]
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	0013      	movs	r3, r2
 8002a30:	2200      	movs	r2, #0
 8002a32:	2101      	movs	r1, #1
 8002a34:	f7ff ff2a 	bl	800288c <SPI_WaitFlagStateUntilTimeout>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d01a      	beq.n	8002a72 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	2220      	movs	r2, #32
 8002a42:	431a      	orrs	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e013      	b.n	8002a74 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	0013      	movs	r3, r2
 8002a56:	2200      	movs	r2, #0
 8002a58:	2101      	movs	r1, #1
 8002a5a:	f7ff ff17 	bl	800288c <SPI_WaitFlagStateUntilTimeout>
 8002a5e:	1e03      	subs	r3, r0, #0
 8002a60:	d007      	beq.n	8002a72 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	2220      	movs	r2, #32
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e000      	b.n	8002a74 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	0018      	movs	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b004      	add	sp, #16
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <SPI_EndRxTxTransaction+0x84>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	491d      	ldr	r1, [pc, #116]	; (8002b04 <SPI_EndRxTxTransaction+0x88>)
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f7fd fb3a 	bl	8000108 <__udivsi3>
 8002a94:	0003      	movs	r3, r0
 8002a96:	001a      	movs	r2, r3
 8002a98:	0013      	movs	r3, r2
 8002a9a:	015b      	lsls	r3, r3, #5
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	189b      	adds	r3, r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	2382      	movs	r3, #130	; 0x82
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d112      	bne.n	8002ad8 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	0013      	movs	r3, r2
 8002abc:	2200      	movs	r2, #0
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	f7ff fee4 	bl	800288c <SPI_WaitFlagStateUntilTimeout>
 8002ac4:	1e03      	subs	r3, r0, #0
 8002ac6:	d016      	beq.n	8002af6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	2220      	movs	r2, #32
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e00f      	b.n	8002af8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b80      	cmp	r3, #128	; 0x80
 8002af0:	d0f2      	beq.n	8002ad8 <SPI_EndRxTxTransaction+0x5c>
 8002af2:	e000      	b.n	8002af6 <SPI_EndRxTxTransaction+0x7a>
        break;
 8002af4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	0018      	movs	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b006      	add	sp, #24
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	20000078 	.word	0x20000078
 8002b04:	016e3600 	.word	0x016e3600

08002b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e044      	b.n	8002ba4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d107      	bne.n	8002b32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2274      	movs	r2, #116	; 0x74
 8002b26:	2100      	movs	r1, #0
 8002b28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fd feeb 	bl	8000908 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2224      	movs	r2, #36	; 0x24
 8002b36:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2101      	movs	r1, #1
 8002b44:	438a      	bics	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f000 f830 	bl	8002bb0 <UART_SetConfig>
 8002b50:	0003      	movs	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e024      	b.n	8002ba4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f000 fae1 	bl	800312c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	490d      	ldr	r1, [pc, #52]	; (8002bac <HAL_UART_Init+0xa4>)
 8002b76:	400a      	ands	r2, r1
 8002b78:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	212a      	movs	r1, #42	; 0x2a
 8002b86:	438a      	bics	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 fb79 	bl	8003294 <UART_CheckIdleState>
 8002ba2:	0003      	movs	r3, r0
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	ffffb7ff 	.word	0xffffb7ff

08002bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b08e      	sub	sp, #56	; 0x38
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb8:	231a      	movs	r3, #26
 8002bba:	2218      	movs	r2, #24
 8002bbc:	4694      	mov	ip, r2
 8002bbe:	44bc      	add	ip, r7
 8002bc0:	4463      	add	r3, ip
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4ab0      	ldr	r2, [pc, #704]	; (8002ea8 <UART_SetConfig+0x2f8>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	0019      	movs	r1, r3
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4aac      	ldr	r2, [pc, #688]	; (8002eac <UART_SetConfig+0x2fc>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4aa6      	ldr	r2, [pc, #664]	; (8002eb0 <UART_SetConfig+0x300>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c22:	4313      	orrs	r3, r2
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4aa1      	ldr	r2, [pc, #644]	; (8002eb4 <UART_SetConfig+0x304>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a9d      	ldr	r2, [pc, #628]	; (8002eb8 <UART_SetConfig+0x308>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d136      	bne.n	8002cb4 <UART_SetConfig+0x104>
 8002c46:	4b9d      	ldr	r3, [pc, #628]	; (8002ebc <UART_SetConfig+0x30c>)
 8002c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d020      	beq.n	8002c94 <UART_SetConfig+0xe4>
 8002c52:	d827      	bhi.n	8002ca4 <UART_SetConfig+0xf4>
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d00d      	beq.n	8002c74 <UART_SetConfig+0xc4>
 8002c58:	d824      	bhi.n	8002ca4 <UART_SetConfig+0xf4>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d002      	beq.n	8002c64 <UART_SetConfig+0xb4>
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d010      	beq.n	8002c84 <UART_SetConfig+0xd4>
 8002c62:	e01f      	b.n	8002ca4 <UART_SetConfig+0xf4>
 8002c64:	231b      	movs	r3, #27
 8002c66:	2218      	movs	r2, #24
 8002c68:	4694      	mov	ip, r2
 8002c6a:	44bc      	add	ip, r7
 8002c6c:	4463      	add	r3, ip
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
 8002c72:	e0c5      	b.n	8002e00 <UART_SetConfig+0x250>
 8002c74:	231b      	movs	r3, #27
 8002c76:	2218      	movs	r2, #24
 8002c78:	4694      	mov	ip, r2
 8002c7a:	44bc      	add	ip, r7
 8002c7c:	4463      	add	r3, ip
 8002c7e:	2202      	movs	r2, #2
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	e0bd      	b.n	8002e00 <UART_SetConfig+0x250>
 8002c84:	231b      	movs	r3, #27
 8002c86:	2218      	movs	r2, #24
 8002c88:	4694      	mov	ip, r2
 8002c8a:	44bc      	add	ip, r7
 8002c8c:	4463      	add	r3, ip
 8002c8e:	2204      	movs	r2, #4
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e0b5      	b.n	8002e00 <UART_SetConfig+0x250>
 8002c94:	231b      	movs	r3, #27
 8002c96:	2218      	movs	r2, #24
 8002c98:	4694      	mov	ip, r2
 8002c9a:	44bc      	add	ip, r7
 8002c9c:	4463      	add	r3, ip
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e0ad      	b.n	8002e00 <UART_SetConfig+0x250>
 8002ca4:	231b      	movs	r3, #27
 8002ca6:	2218      	movs	r2, #24
 8002ca8:	4694      	mov	ip, r2
 8002caa:	44bc      	add	ip, r7
 8002cac:	4463      	add	r3, ip
 8002cae:	2210      	movs	r2, #16
 8002cb0:	701a      	strb	r2, [r3, #0]
 8002cb2:	e0a5      	b.n	8002e00 <UART_SetConfig+0x250>
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a81      	ldr	r2, [pc, #516]	; (8002ec0 <UART_SetConfig+0x310>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d136      	bne.n	8002d2c <UART_SetConfig+0x17c>
 8002cbe:	4b7f      	ldr	r3, [pc, #508]	; (8002ebc <UART_SetConfig+0x30c>)
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	220c      	movs	r2, #12
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b0c      	cmp	r3, #12
 8002cc8:	d020      	beq.n	8002d0c <UART_SetConfig+0x15c>
 8002cca:	d827      	bhi.n	8002d1c <UART_SetConfig+0x16c>
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d00d      	beq.n	8002cec <UART_SetConfig+0x13c>
 8002cd0:	d824      	bhi.n	8002d1c <UART_SetConfig+0x16c>
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <UART_SetConfig+0x12c>
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d010      	beq.n	8002cfc <UART_SetConfig+0x14c>
 8002cda:	e01f      	b.n	8002d1c <UART_SetConfig+0x16c>
 8002cdc:	231b      	movs	r3, #27
 8002cde:	2218      	movs	r2, #24
 8002ce0:	4694      	mov	ip, r2
 8002ce2:	44bc      	add	ip, r7
 8002ce4:	4463      	add	r3, ip
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
 8002cea:	e089      	b.n	8002e00 <UART_SetConfig+0x250>
 8002cec:	231b      	movs	r3, #27
 8002cee:	2218      	movs	r2, #24
 8002cf0:	4694      	mov	ip, r2
 8002cf2:	44bc      	add	ip, r7
 8002cf4:	4463      	add	r3, ip
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e081      	b.n	8002e00 <UART_SetConfig+0x250>
 8002cfc:	231b      	movs	r3, #27
 8002cfe:	2218      	movs	r2, #24
 8002d00:	4694      	mov	ip, r2
 8002d02:	44bc      	add	ip, r7
 8002d04:	4463      	add	r3, ip
 8002d06:	2204      	movs	r2, #4
 8002d08:	701a      	strb	r2, [r3, #0]
 8002d0a:	e079      	b.n	8002e00 <UART_SetConfig+0x250>
 8002d0c:	231b      	movs	r3, #27
 8002d0e:	2218      	movs	r2, #24
 8002d10:	4694      	mov	ip, r2
 8002d12:	44bc      	add	ip, r7
 8002d14:	4463      	add	r3, ip
 8002d16:	2208      	movs	r2, #8
 8002d18:	701a      	strb	r2, [r3, #0]
 8002d1a:	e071      	b.n	8002e00 <UART_SetConfig+0x250>
 8002d1c:	231b      	movs	r3, #27
 8002d1e:	2218      	movs	r2, #24
 8002d20:	4694      	mov	ip, r2
 8002d22:	44bc      	add	ip, r7
 8002d24:	4463      	add	r3, ip
 8002d26:	2210      	movs	r2, #16
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	e069      	b.n	8002e00 <UART_SetConfig+0x250>
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a64      	ldr	r2, [pc, #400]	; (8002ec4 <UART_SetConfig+0x314>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d107      	bne.n	8002d46 <UART_SetConfig+0x196>
 8002d36:	231b      	movs	r3, #27
 8002d38:	2218      	movs	r2, #24
 8002d3a:	4694      	mov	ip, r2
 8002d3c:	44bc      	add	ip, r7
 8002d3e:	4463      	add	r3, ip
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e05c      	b.n	8002e00 <UART_SetConfig+0x250>
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a5f      	ldr	r2, [pc, #380]	; (8002ec8 <UART_SetConfig+0x318>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d107      	bne.n	8002d60 <UART_SetConfig+0x1b0>
 8002d50:	231b      	movs	r3, #27
 8002d52:	2218      	movs	r2, #24
 8002d54:	4694      	mov	ip, r2
 8002d56:	44bc      	add	ip, r7
 8002d58:	4463      	add	r3, ip
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
 8002d5e:	e04f      	b.n	8002e00 <UART_SetConfig+0x250>
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a52      	ldr	r2, [pc, #328]	; (8002eb0 <UART_SetConfig+0x300>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d143      	bne.n	8002df2 <UART_SetConfig+0x242>
 8002d6a:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <UART_SetConfig+0x30c>)
 8002d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d6e:	23c0      	movs	r3, #192	; 0xc0
 8002d70:	011b      	lsls	r3, r3, #4
 8002d72:	4013      	ands	r3, r2
 8002d74:	22c0      	movs	r2, #192	; 0xc0
 8002d76:	0112      	lsls	r2, r2, #4
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d02a      	beq.n	8002dd2 <UART_SetConfig+0x222>
 8002d7c:	22c0      	movs	r2, #192	; 0xc0
 8002d7e:	0112      	lsls	r2, r2, #4
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d82e      	bhi.n	8002de2 <UART_SetConfig+0x232>
 8002d84:	2280      	movs	r2, #128	; 0x80
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d012      	beq.n	8002db2 <UART_SetConfig+0x202>
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	0112      	lsls	r2, r2, #4
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d826      	bhi.n	8002de2 <UART_SetConfig+0x232>
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d004      	beq.n	8002da2 <UART_SetConfig+0x1f2>
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	00d2      	lsls	r2, r2, #3
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d010      	beq.n	8002dc2 <UART_SetConfig+0x212>
 8002da0:	e01f      	b.n	8002de2 <UART_SetConfig+0x232>
 8002da2:	231b      	movs	r3, #27
 8002da4:	2218      	movs	r2, #24
 8002da6:	4694      	mov	ip, r2
 8002da8:	44bc      	add	ip, r7
 8002daa:	4463      	add	r3, ip
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
 8002db0:	e026      	b.n	8002e00 <UART_SetConfig+0x250>
 8002db2:	231b      	movs	r3, #27
 8002db4:	2218      	movs	r2, #24
 8002db6:	4694      	mov	ip, r2
 8002db8:	44bc      	add	ip, r7
 8002dba:	4463      	add	r3, ip
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	e01e      	b.n	8002e00 <UART_SetConfig+0x250>
 8002dc2:	231b      	movs	r3, #27
 8002dc4:	2218      	movs	r2, #24
 8002dc6:	4694      	mov	ip, r2
 8002dc8:	44bc      	add	ip, r7
 8002dca:	4463      	add	r3, ip
 8002dcc:	2204      	movs	r2, #4
 8002dce:	701a      	strb	r2, [r3, #0]
 8002dd0:	e016      	b.n	8002e00 <UART_SetConfig+0x250>
 8002dd2:	231b      	movs	r3, #27
 8002dd4:	2218      	movs	r2, #24
 8002dd6:	4694      	mov	ip, r2
 8002dd8:	44bc      	add	ip, r7
 8002dda:	4463      	add	r3, ip
 8002ddc:	2208      	movs	r2, #8
 8002dde:	701a      	strb	r2, [r3, #0]
 8002de0:	e00e      	b.n	8002e00 <UART_SetConfig+0x250>
 8002de2:	231b      	movs	r3, #27
 8002de4:	2218      	movs	r2, #24
 8002de6:	4694      	mov	ip, r2
 8002de8:	44bc      	add	ip, r7
 8002dea:	4463      	add	r3, ip
 8002dec:	2210      	movs	r2, #16
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e006      	b.n	8002e00 <UART_SetConfig+0x250>
 8002df2:	231b      	movs	r3, #27
 8002df4:	2218      	movs	r2, #24
 8002df6:	4694      	mov	ip, r2
 8002df8:	44bc      	add	ip, r7
 8002dfa:	4463      	add	r3, ip
 8002dfc:	2210      	movs	r2, #16
 8002dfe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2a      	ldr	r2, [pc, #168]	; (8002eb0 <UART_SetConfig+0x300>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d000      	beq.n	8002e0c <UART_SetConfig+0x25c>
 8002e0a:	e09e      	b.n	8002f4a <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e0c:	231b      	movs	r3, #27
 8002e0e:	2218      	movs	r2, #24
 8002e10:	4694      	mov	ip, r2
 8002e12:	44bc      	add	ip, r7
 8002e14:	4463      	add	r3, ip
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d01d      	beq.n	8002e58 <UART_SetConfig+0x2a8>
 8002e1c:	dc20      	bgt.n	8002e60 <UART_SetConfig+0x2b0>
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d015      	beq.n	8002e4e <UART_SetConfig+0x29e>
 8002e22:	dc1d      	bgt.n	8002e60 <UART_SetConfig+0x2b0>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <UART_SetConfig+0x27e>
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d005      	beq.n	8002e38 <UART_SetConfig+0x288>
 8002e2c:	e018      	b.n	8002e60 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e2e:	f7fe ffd3 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8002e32:	0003      	movs	r3, r0
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e36:	e01d      	b.n	8002e74 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <UART_SetConfig+0x30c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	4013      	ands	r3, r2
 8002e40:	d002      	beq.n	8002e48 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e42:	4b22      	ldr	r3, [pc, #136]	; (8002ecc <UART_SetConfig+0x31c>)
 8002e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e46:	e015      	b.n	8002e74 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <UART_SetConfig+0x320>)
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e4c:	e012      	b.n	8002e74 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4e:	f7fe ff13 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002e52:	0003      	movs	r3, r0
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e56:	e00d      	b.n	8002e74 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e5e:	e009      	b.n	8002e74 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e64:	231a      	movs	r3, #26
 8002e66:	2218      	movs	r2, #24
 8002e68:	4694      	mov	ip, r2
 8002e6a:	44bc      	add	ip, r7
 8002e6c:	4463      	add	r3, ip
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
        break;
 8002e72:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d100      	bne.n	8002e7c <UART_SetConfig+0x2cc>
 8002e7a:	e13c      	b.n	80030f6 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	0013      	movs	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d305      	bcc.n	8002e98 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d91d      	bls.n	8002ed4 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8002e98:	231a      	movs	r3, #26
 8002e9a:	2218      	movs	r2, #24
 8002e9c:	4694      	mov	ip, r2
 8002e9e:	44bc      	add	ip, r7
 8002ea0:	4463      	add	r3, ip
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e126      	b.n	80030f6 <UART_SetConfig+0x546>
 8002ea8:	efff69f3 	.word	0xefff69f3
 8002eac:	ffffcfff 	.word	0xffffcfff
 8002eb0:	40004800 	.word	0x40004800
 8002eb4:	fffff4ff 	.word	0xfffff4ff
 8002eb8:	40013800 	.word	0x40013800
 8002ebc:	40021000 	.word	0x40021000
 8002ec0:	40004400 	.word	0x40004400
 8002ec4:	40004c00 	.word	0x40004c00
 8002ec8:	40005000 	.word	0x40005000
 8002ecc:	003d0900 	.word	0x003d0900
 8002ed0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]
 8002edc:	6939      	ldr	r1, [r7, #16]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	000b      	movs	r3, r1
 8002ee2:	0e1b      	lsrs	r3, r3, #24
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	0205      	lsls	r5, r0, #8
 8002ee8:	431d      	orrs	r5, r3
 8002eea:	000b      	movs	r3, r1
 8002eec:	021c      	lsls	r4, r3, #8
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68b8      	ldr	r0, [r7, #8]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	1900      	adds	r0, r0, r4
 8002f00:	4169      	adcs	r1, r5
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	607b      	str	r3, [r7, #4]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f7fd f986 	bl	8000220 <__aeabi_uldivmod>
 8002f14:	0002      	movs	r2, r0
 8002f16:	000b      	movs	r3, r1
 8002f18:	0013      	movs	r3, r2
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f1e:	23c0      	movs	r3, #192	; 0xc0
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d309      	bcc.n	8002f3a <UART_SetConfig+0x38a>
 8002f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f28:	2380      	movs	r3, #128	; 0x80
 8002f2a:	035b      	lsls	r3, r3, #13
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d204      	bcs.n	8002f3a <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	e0dd      	b.n	80030f6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002f3a:	231a      	movs	r3, #26
 8002f3c:	2218      	movs	r2, #24
 8002f3e:	4694      	mov	ip, r2
 8002f40:	44bc      	add	ip, r7
 8002f42:	4463      	add	r3, ip
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e0d5      	b.n	80030f6 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d000      	beq.n	8002f58 <UART_SetConfig+0x3a8>
 8002f56:	e074      	b.n	8003042 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8002f58:	231b      	movs	r3, #27
 8002f5a:	2218      	movs	r2, #24
 8002f5c:	4694      	mov	ip, r2
 8002f5e:	44bc      	add	ip, r7
 8002f60:	4463      	add	r3, ip
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d822      	bhi.n	8002fae <UART_SetConfig+0x3fe>
 8002f68:	009a      	lsls	r2, r3, #2
 8002f6a:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <UART_SetConfig+0x568>)
 8002f6c:	18d3      	adds	r3, r2, r3
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f72:	f7fe ff31 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8002f76:	0003      	movs	r3, r0
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f7a:	e022      	b.n	8002fc2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f7c:	f7fe ff42 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
 8002f80:	0003      	movs	r3, r0
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f84:	e01d      	b.n	8002fc2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f86:	4b65      	ldr	r3, [pc, #404]	; (800311c <UART_SetConfig+0x56c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d002      	beq.n	8002f96 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002f90:	4b63      	ldr	r3, [pc, #396]	; (8003120 <UART_SetConfig+0x570>)
 8002f92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002f94:	e015      	b.n	8002fc2 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8002f96:	4b63      	ldr	r3, [pc, #396]	; (8003124 <UART_SetConfig+0x574>)
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002f9a:	e012      	b.n	8002fc2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f9c:	f7fe fe6c 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fa4:	e00d      	b.n	8002fc2 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fa6:	2380      	movs	r3, #128	; 0x80
 8002fa8:	021b      	lsls	r3, r3, #8
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002fac:	e009      	b.n	8002fc2 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002fb2:	231a      	movs	r3, #26
 8002fb4:	2218      	movs	r2, #24
 8002fb6:	4694      	mov	ip, r2
 8002fb8:	44bc      	add	ip, r7
 8002fba:	4463      	add	r3, ip
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
        break;
 8002fc0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d100      	bne.n	8002fca <UART_SetConfig+0x41a>
 8002fc8:	e095      	b.n	80030f6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	005a      	lsls	r2, r3, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	18d2      	adds	r2, r2, r3
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0019      	movs	r1, r3
 8002fdc:	0010      	movs	r0, r2
 8002fde:	f7fd f893 	bl	8000108 <__udivsi3>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fea:	2b0f      	cmp	r3, #15
 8002fec:	d921      	bls.n	8003032 <UART_SetConfig+0x482>
 8002fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	025b      	lsls	r3, r3, #9
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d21c      	bcs.n	8003032 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	200e      	movs	r0, #14
 8002ffe:	2418      	movs	r4, #24
 8003000:	193b      	adds	r3, r7, r4
 8003002:	181b      	adds	r3, r3, r0
 8003004:	210f      	movs	r1, #15
 8003006:	438a      	bics	r2, r1
 8003008:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	b29b      	uxth	r3, r3
 8003010:	2207      	movs	r2, #7
 8003012:	4013      	ands	r3, r2
 8003014:	b299      	uxth	r1, r3
 8003016:	193b      	adds	r3, r7, r4
 8003018:	181b      	adds	r3, r3, r0
 800301a:	193a      	adds	r2, r7, r4
 800301c:	1812      	adds	r2, r2, r0
 800301e:	8812      	ldrh	r2, [r2, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	193a      	adds	r2, r7, r4
 800302a:	1812      	adds	r2, r2, r0
 800302c:	8812      	ldrh	r2, [r2, #0]
 800302e:	60da      	str	r2, [r3, #12]
 8003030:	e061      	b.n	80030f6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003032:	231a      	movs	r3, #26
 8003034:	2218      	movs	r2, #24
 8003036:	4694      	mov	ip, r2
 8003038:	44bc      	add	ip, r7
 800303a:	4463      	add	r3, ip
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e059      	b.n	80030f6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003042:	231b      	movs	r3, #27
 8003044:	2218      	movs	r2, #24
 8003046:	4694      	mov	ip, r2
 8003048:	44bc      	add	ip, r7
 800304a:	4463      	add	r3, ip
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b08      	cmp	r3, #8
 8003050:	d822      	bhi.n	8003098 <UART_SetConfig+0x4e8>
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	4b34      	ldr	r3, [pc, #208]	; (8003128 <UART_SetConfig+0x578>)
 8003056:	18d3      	adds	r3, r2, r3
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800305c:	f7fe febc 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8003060:	0003      	movs	r3, r0
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003064:	e022      	b.n	80030ac <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003066:	f7fe fecd 	bl	8001e04 <HAL_RCC_GetPCLK2Freq>
 800306a:	0003      	movs	r3, r0
 800306c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800306e:	e01d      	b.n	80030ac <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <UART_SetConfig+0x56c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2210      	movs	r2, #16
 8003076:	4013      	ands	r3, r2
 8003078:	d002      	beq.n	8003080 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800307a:	4b29      	ldr	r3, [pc, #164]	; (8003120 <UART_SetConfig+0x570>)
 800307c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800307e:	e015      	b.n	80030ac <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8003080:	4b28      	ldr	r3, [pc, #160]	; (8003124 <UART_SetConfig+0x574>)
 8003082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003084:	e012      	b.n	80030ac <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003086:	f7fe fdf7 	bl	8001c78 <HAL_RCC_GetSysClockFreq>
 800308a:	0003      	movs	r3, r0
 800308c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800308e:	e00d      	b.n	80030ac <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003090:	2380      	movs	r3, #128	; 0x80
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003096:	e009      	b.n	80030ac <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800309c:	231a      	movs	r3, #26
 800309e:	2218      	movs	r2, #24
 80030a0:	4694      	mov	ip, r2
 80030a2:	44bc      	add	ip, r7
 80030a4:	4463      	add	r3, ip
 80030a6:	2201      	movs	r2, #1
 80030a8:	701a      	strb	r2, [r3, #0]
        break;
 80030aa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80030ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d021      	beq.n	80030f6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	085a      	lsrs	r2, r3, #1
 80030b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ba:	18d2      	adds	r2, r2, r3
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	0019      	movs	r1, r3
 80030c2:	0010      	movs	r0, r2
 80030c4:	f7fd f820 	bl	8000108 <__udivsi3>
 80030c8:	0003      	movs	r3, r0
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d0:	2b0f      	cmp	r3, #15
 80030d2:	d909      	bls.n	80030e8 <UART_SetConfig+0x538>
 80030d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	025b      	lsls	r3, r3, #9
 80030da:	429a      	cmp	r2, r3
 80030dc:	d204      	bcs.n	80030e8 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	e006      	b.n	80030f6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80030e8:	231a      	movs	r3, #26
 80030ea:	2218      	movs	r2, #24
 80030ec:	4694      	mov	ip, r2
 80030ee:	44bc      	add	ip, r7
 80030f0:	4463      	add	r3, ip
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2200      	movs	r2, #0
 80030fa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2200      	movs	r2, #0
 8003100:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003102:	231a      	movs	r3, #26
 8003104:	2218      	movs	r2, #24
 8003106:	4694      	mov	ip, r2
 8003108:	44bc      	add	ip, r7
 800310a:	4463      	add	r3, ip
 800310c:	781b      	ldrb	r3, [r3, #0]
}
 800310e:	0018      	movs	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	b00e      	add	sp, #56	; 0x38
 8003114:	bdb0      	pop	{r4, r5, r7, pc}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	08003540 	.word	0x08003540
 800311c:	40021000 	.word	0x40021000
 8003120:	003d0900 	.word	0x003d0900
 8003124:	00f42400 	.word	0x00f42400
 8003128:	08003564 	.word	0x08003564

0800312c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	d00b      	beq.n	8003156 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	4a4a      	ldr	r2, [pc, #296]	; (8003270 <UART_AdvFeatureConfig+0x144>)
 8003146:	4013      	ands	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	2202      	movs	r2, #2
 800315c:	4013      	ands	r3, r2
 800315e:	d00b      	beq.n	8003178 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a43      	ldr	r2, [pc, #268]	; (8003274 <UART_AdvFeatureConfig+0x148>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	2204      	movs	r2, #4
 800317e:	4013      	ands	r3, r2
 8003180:	d00b      	beq.n	800319a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	4a3b      	ldr	r2, [pc, #236]	; (8003278 <UART_AdvFeatureConfig+0x14c>)
 800318a:	4013      	ands	r3, r2
 800318c:	0019      	movs	r1, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	2208      	movs	r2, #8
 80031a0:	4013      	ands	r3, r2
 80031a2:	d00b      	beq.n	80031bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a34      	ldr	r2, [pc, #208]	; (800327c <UART_AdvFeatureConfig+0x150>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	0019      	movs	r1, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	2210      	movs	r2, #16
 80031c2:	4013      	ands	r3, r2
 80031c4:	d00b      	beq.n	80031de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <UART_AdvFeatureConfig+0x154>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	0019      	movs	r1, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2220      	movs	r2, #32
 80031e4:	4013      	ands	r3, r2
 80031e6:	d00b      	beq.n	8003200 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4a25      	ldr	r2, [pc, #148]	; (8003284 <UART_AdvFeatureConfig+0x158>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	0019      	movs	r1, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	2240      	movs	r2, #64	; 0x40
 8003206:	4013      	ands	r3, r2
 8003208:	d01d      	beq.n	8003246 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a1d      	ldr	r2, [pc, #116]	; (8003288 <UART_AdvFeatureConfig+0x15c>)
 8003212:	4013      	ands	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003226:	2380      	movs	r3, #128	; 0x80
 8003228:	035b      	lsls	r3, r3, #13
 800322a:	429a      	cmp	r2, r3
 800322c:	d10b      	bne.n	8003246 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a15      	ldr	r2, [pc, #84]	; (800328c <UART_AdvFeatureConfig+0x160>)
 8003236:	4013      	ands	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2280      	movs	r2, #128	; 0x80
 800324c:	4013      	ands	r3, r2
 800324e:	d00b      	beq.n	8003268 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <UART_AdvFeatureConfig+0x164>)
 8003258:	4013      	ands	r3, r2
 800325a:	0019      	movs	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
  }
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}
 8003270:	fffdffff 	.word	0xfffdffff
 8003274:	fffeffff 	.word	0xfffeffff
 8003278:	fffbffff 	.word	0xfffbffff
 800327c:	ffff7fff 	.word	0xffff7fff
 8003280:	ffffefff 	.word	0xffffefff
 8003284:	ffffdfff 	.word	0xffffdfff
 8003288:	ffefffff 	.word	0xffefffff
 800328c:	ff9fffff 	.word	0xff9fffff
 8003290:	fff7ffff 	.word	0xfff7ffff

08003294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af02      	add	r7, sp, #8
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2280      	movs	r2, #128	; 0x80
 80032a0:	2100      	movs	r1, #0
 80032a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032a4:	f7fd fc2e 	bl	8000b04 <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2208      	movs	r2, #8
 80032b4:	4013      	ands	r3, r2
 80032b6:	2b08      	cmp	r3, #8
 80032b8:	d10c      	bne.n	80032d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2280      	movs	r2, #128	; 0x80
 80032be:	0391      	lsls	r1, r2, #14
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4a17      	ldr	r2, [pc, #92]	; (8003320 <UART_CheckIdleState+0x8c>)
 80032c4:	9200      	str	r2, [sp, #0]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f000 f82c 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 80032cc:	1e03      	subs	r3, r0, #0
 80032ce:	d001      	beq.n	80032d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e021      	b.n	8003318 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2204      	movs	r2, #4
 80032dc:	4013      	ands	r3, r2
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d10c      	bne.n	80032fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2280      	movs	r2, #128	; 0x80
 80032e6:	03d1      	lsls	r1, r2, #15
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <UART_CheckIdleState+0x8c>)
 80032ec:	9200      	str	r2, [sp, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f000 f818 	bl	8003324 <UART_WaitOnFlagUntilTimeout>
 80032f4:	1e03      	subs	r3, r0, #0
 80032f6:	d001      	beq.n	80032fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e00d      	b.n	8003318 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2220      	movs	r2, #32
 8003306:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2274      	movs	r2, #116	; 0x74
 8003312:	2100      	movs	r1, #0
 8003314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	0018      	movs	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	b004      	add	sp, #16
 800331e:	bd80      	pop	{r7, pc}
 8003320:	01ffffff 	.word	0x01ffffff

08003324 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b094      	sub	sp, #80	; 0x50
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	1dfb      	adds	r3, r7, #7
 8003332:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003334:	e0a3      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003338:	3301      	adds	r3, #1
 800333a:	d100      	bne.n	800333e <UART_WaitOnFlagUntilTimeout+0x1a>
 800333c:	e09f      	b.n	800347e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fd fbe1 	bl	8000b04 <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <UART_WaitOnFlagUntilTimeout+0x30>
 800334e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003350:	2b00      	cmp	r3, #0
 8003352:	d13d      	bne.n	80033d0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003354:	f3ef 8310 	mrs	r3, PRIMASK
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800335c:	647b      	str	r3, [r7, #68]	; 0x44
 800335e:	2301      	movs	r3, #1
 8003360:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003364:	f383 8810 	msr	PRIMASK, r3
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	494c      	ldr	r1, [pc, #304]	; (80034a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003376:	400a      	ands	r2, r1
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	f383 8810 	msr	PRIMASK, r3
}
 8003384:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800338e:	643b      	str	r3, [r7, #64]	; 0x40
 8003390:	2301      	movs	r3, #1
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2101      	movs	r1, #1
 80033a8:	438a      	bics	r2, r1
 80033aa:	609a      	str	r2, [r3, #8]
 80033ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2274      	movs	r2, #116	; 0x74
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e067      	b.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2204      	movs	r2, #4
 80033d8:	4013      	ands	r3, r2
 80033da:	d050      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	401a      	ands	r2, r3
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	011b      	lsls	r3, r3, #4
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d146      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fa:	f3ef 8310 	mrs	r3, PRIMASK
 80033fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003400:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003404:	2301      	movs	r3, #1
 8003406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f383 8810 	msr	PRIMASK, r3
}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4923      	ldr	r1, [pc, #140]	; (80034a8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800341c:	400a      	ands	r2, r1
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003422:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f383 8810 	msr	PRIMASK, r3
}
 800342a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800342c:	f3ef 8310 	mrs	r3, PRIMASK
 8003430:	61fb      	str	r3, [r7, #28]
  return(result);
 8003432:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003434:	64bb      	str	r3, [r7, #72]	; 0x48
 8003436:	2301      	movs	r3, #1
 8003438:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f383 8810 	msr	PRIMASK, r3
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2101      	movs	r1, #1
 800344e:	438a      	bics	r2, r1
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	f383 8810 	msr	PRIMASK, r3
}
 800345c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2220      	movs	r2, #32
 8003462:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2280      	movs	r2, #128	; 0x80
 800346e:	2120      	movs	r1, #32
 8003470:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2274      	movs	r2, #116	; 0x74
 8003476:	2100      	movs	r1, #0
 8003478:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e010      	b.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	4013      	ands	r3, r2
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	425a      	negs	r2, r3
 800348e:	4153      	adcs	r3, r2
 8003490:	b2db      	uxtb	r3, r3
 8003492:	001a      	movs	r2, r3
 8003494:	1dfb      	adds	r3, r7, #7
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d100      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0x17a>
 800349c:	e74b      	b.n	8003336 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	0018      	movs	r0, r3
 80034a2:	46bd      	mov	sp, r7
 80034a4:	b014      	add	sp, #80	; 0x50
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	fffffe5f 	.word	0xfffffe5f

080034ac <__libc_init_array>:
 80034ac:	b570      	push	{r4, r5, r6, lr}
 80034ae:	2600      	movs	r6, #0
 80034b0:	4d0c      	ldr	r5, [pc, #48]	; (80034e4 <__libc_init_array+0x38>)
 80034b2:	4c0d      	ldr	r4, [pc, #52]	; (80034e8 <__libc_init_array+0x3c>)
 80034b4:	1b64      	subs	r4, r4, r5
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	42a6      	cmp	r6, r4
 80034ba:	d109      	bne.n	80034d0 <__libc_init_array+0x24>
 80034bc:	2600      	movs	r6, #0
 80034be:	f000 f821 	bl	8003504 <_init>
 80034c2:	4d0a      	ldr	r5, [pc, #40]	; (80034ec <__libc_init_array+0x40>)
 80034c4:	4c0a      	ldr	r4, [pc, #40]	; (80034f0 <__libc_init_array+0x44>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	42a6      	cmp	r6, r4
 80034cc:	d105      	bne.n	80034da <__libc_init_array+0x2e>
 80034ce:	bd70      	pop	{r4, r5, r6, pc}
 80034d0:	00b3      	lsls	r3, r6, #2
 80034d2:	58eb      	ldr	r3, [r5, r3]
 80034d4:	4798      	blx	r3
 80034d6:	3601      	adds	r6, #1
 80034d8:	e7ee      	b.n	80034b8 <__libc_init_array+0xc>
 80034da:	00b3      	lsls	r3, r6, #2
 80034dc:	58eb      	ldr	r3, [r5, r3]
 80034de:	4798      	blx	r3
 80034e0:	3601      	adds	r6, #1
 80034e2:	e7f2      	b.n	80034ca <__libc_init_array+0x1e>
 80034e4:	08003590 	.word	0x08003590
 80034e8:	08003590 	.word	0x08003590
 80034ec:	08003590 	.word	0x08003590
 80034f0:	08003594 	.word	0x08003594

080034f4 <memset>:
 80034f4:	0003      	movs	r3, r0
 80034f6:	1882      	adds	r2, r0, r2
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d100      	bne.n	80034fe <memset+0xa>
 80034fc:	4770      	bx	lr
 80034fe:	7019      	strb	r1, [r3, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	e7f9      	b.n	80034f8 <memset+0x4>

08003504 <_init>:
 8003504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800350a:	bc08      	pop	{r3}
 800350c:	469e      	mov	lr, r3
 800350e:	4770      	bx	lr

08003510 <_fini>:
 8003510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003516:	bc08      	pop	{r3}
 8003518:	469e      	mov	lr, r3
 800351a:	4770      	bx	lr
